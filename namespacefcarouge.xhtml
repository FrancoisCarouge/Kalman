<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.1</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('namespacefcarouge.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Francois Carouge's projects namespace.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="namespaces" name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1benchmark.xhtml">benchmark</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1benchmark"><td class="mdescLeft">&#160;</td><td class="mdescRight">Benchmark implementation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1decorator.xhtml">decorator</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1decorator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collection of functionality extension for filters. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1eigen.xhtml">eigen</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1indexed.xhtml">indexed</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1kalman__internal.xhtml">kalman_internal</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1kalman__internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation details. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1naive.xhtml">naive</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1sample.xhtml">sample</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1sample"><td class="mdescLeft">&#160;</td><td class="mdescRight">Examples, tutorials, demonstrators of the library. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test.xhtml">test</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1test"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unit, integration, regression, and usage tests. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A generic Kalman filter.  <a href="classfcarouge_1_1kalman.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coroutine lazy matrix.  <a href="structfcarouge_1_1matrix.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a66bc0b3b05af74a53388c91b4dfde9e9" id="r_a66bc0b3b05af74a53388c91b4dfde9e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a66bc0b3b05af74a53388c91b4dfde9e9">height</a> = mp_units::quantity_point&lt;mp_units::isq::height[m]&gt;</td></tr>
<tr class="separator:a66bc0b3b05af74a53388c91b4dfde9e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0480c6f84be0a01264da3eb984c103e1" id="r_a0480c6f84be0a01264da3eb984c103e1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0480c6f84be0a01264da3eb984c103e1">position</a> = mp_units::quantity_point&lt;mp_units::isq::length[m]&gt;</td></tr>
<tr class="separator:a0480c6f84be0a01264da3eb984c103e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7062d0a510937d0a2201f1167b6066cc" id="r_a7062d0a510937d0a2201f1167b6066cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7062d0a510937d0a2201f1167b6066cc">velocity</a> = mp_units::quantity_point&lt;mp_units::isq::velocity[m / s]&gt;</td></tr>
<tr class="separator:a7062d0a510937d0a2201f1167b6066cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bf1207d66f4f99f4c7175ac6a65dfd4" id="r_a3bf1207d66f4f99f4c7175ac6a65dfd4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3bf1207d66f4f99f4c7175ac6a65dfd4">acceleration</a></td></tr>
<tr class="separator:a3bf1207d66f4f99f4c7175ac6a65dfd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a1efa10d3f0e4480b2ed1745c672aa1" id="r_a1a1efa10d3f0e4480b2ed1745c672aa1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1a1efa10d3f0e4480b2ed1745c672aa1">temperature</a></td></tr>
<tr class="separator:a1a1efa10d3f0e4480b2ed1745c672aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Types</div></td></tr>
<tr class="memitem:af51993d5457effe625e8a68ca064136c" id="r_af51993d5457effe625e8a68ca064136c"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </td></tr>
<tr class="memitem:af51993d5457effe625e8a68ca064136c"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af51993d5457effe625e8a68ca064136c">matrix</a></td></tr>
<tr class="memdesc:af51993d5457effe625e8a68ca064136c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type indexed-based matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:af51993d5457effe625e8a68ca064136c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967" id="r_ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1&gt; </td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad06bb441aa2dcec149c52de0c297a967">column_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, 1&gt;</td></tr>
<tr class="memdesc:ad06bb441aa2dcec149c52de0c297a967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type indexed-based column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:ad06bb441aa2dcec149c52de0c297a967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7426c99fa5df210b90d63cd32c0b04f4" id="r_a7426c99fa5df210b90d63cd32c0b04f4"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, auto Column = 1, bool Copyable = false&gt; </td></tr>
<tr class="memitem:a7426c99fa5df210b90d63cd32c0b04f4"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7426c99fa5df210b90d63cd32c0b04f4">row_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, decltype(Column){1}, Column, Copyable&gt;</td></tr>
<tr class="memdesc:a7426c99fa5df210b90d63cd32c0b04f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coroutine lazy row vector.  <br /></td></tr>
<tr class="separator:a7426c99fa5df210b90d63cd32c0b04f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abb7d0eaceb29f78f64bff07a52fe5824" id="r_abb7d0eaceb29f78f64bff07a52fe5824"><td class="memTemplParams" colspan="2">template&lt;typename Filter &gt; </td></tr>
<tr class="memitem:abb7d0eaceb29f78f64bff07a52fe5824"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abb7d0eaceb29f78f64bff07a52fe5824">operator|</a> (Filter &amp;&amp;filter, const <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a> decorator)</td></tr>
<tr class="separator:abb7d0eaceb29f78f64bff07a52fe5824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae167596e2c65ae7024cbc80f5b5d1974" id="r_ae167596e2c65ae7024cbc80f5b5d1974"><td class="memTemplParams" colspan="2">template&lt;std::ranges::range Range&gt; </td></tr>
<tr class="memitem:ae167596e2c65ae7024cbc80f5b5d1974"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::generator&lt; typename Range::value_type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a> (Range elements)</td></tr>
<tr class="separator:ae167596e2c65ae7024cbc80f5b5d1974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34cda4cdb141fdaa3b43f3973585e4b1" id="r_a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a34cda4cdb141fdaa3b43f3973585e4b1">make_generator</a> (Type element) -&gt; std::generator&lt; Type &gt;</td></tr>
<tr class="separator:a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62fb05e2f569f36e8cac44a90ccbc106" id="r_a62fb05e2f569f36e8cac44a90ccbc106"><td class="memTemplParams" colspan="2">template&lt;std::invocable L&gt; </td></tr>
<tr class="memitem:a62fb05e2f569f36e8cac44a90ccbc106"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a62fb05e2f569f36e8cac44a90ccbc106">operator==</a> (L lhs, L rhs)</td></tr>
<tr class="separator:a62fb05e2f569f36e8cac44a90ccbc106"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47d78fa7b2fbab1fdec6f6e30d6b1da0" id="r_a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memTemplParams" colspan="2">template&lt;std::invocable L, typename T &gt; </td></tr>
<tr class="memitem:a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a47d78fa7b2fbab1fdec6f6e30d6b1da0">operator==</a> (L lhs, T rhs)</td></tr>
<tr class="separator:a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84939a609e68330c2689aff14d978311" id="r_a84939a609e68330c2689aff14d978311"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column, bool CopyableOrNot1, bool CopyableOrNot2&gt; </td></tr>
<tr class="memitem:a84939a609e68330c2689aff14d978311"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a84939a609e68330c2689aff14d978311">operator==</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot1 &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot2 &gt; rhs)</td></tr>
<tr class="separator:a84939a609e68330c2689aff14d978311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f46009dfa013275132875c5be3ab85c" id="r_a5f46009dfa013275132875c5be3ab85c"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Size&gt; </td></tr>
<tr class="memitem:a5f46009dfa013275132875c5be3ab85c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, 1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5f46009dfa013275132875c5be3ab85c">operator*</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Size &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Size, 1 &gt; rhs)</td></tr>
<tr class="separator:a5f46009dfa013275132875c5be3ab85c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0647c4efb9c02b9ea365aacec50e4ae0" id="r_a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0647c4efb9c02b9ea365aacec50e4ae0">operator*</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; lhs, arithmetic auto rhs)</td></tr>
<tr class="separator:a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214880fe1dfe8701212c14c9ece44013" id="r_a214880fe1dfe8701212c14c9ece44013"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a214880fe1dfe8701212c14c9ece44013"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a214880fe1dfe8701212c14c9ece44013">operator+</a> (Type lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt; rhs)</td></tr>
<tr class="separator:a214880fe1dfe8701212c14c9ece44013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37839500158d123b7bdc6824a025f0bc" id="r_a37839500158d123b7bdc6824a025f0bc"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a37839500158d123b7bdc6824a025f0bc"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a37839500158d123b7bdc6824a025f0bc">operator+</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; rhs)</td></tr>
<tr class="separator:a37839500158d123b7bdc6824a025f0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Deduction Guides</div></td></tr>
<tr class="memitem:a4a3bd37a96fd242e89867316396afcd5" id="r_a4a3bd37a96fd242e89867316396afcd5"><td class="memTemplParams" colspan="2">template&lt;typename... Arguments&gt; </td></tr>
<tr class="memitem:a4a3bd37a96fd242e89867316396afcd5"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4a3bd37a96fd242e89867316396afcd5">kalman</a> (Arguments... arguments) -&gt; kalman&lt; <a class="el" href="namespacefcarouge_1_1kalman__internal.xhtml#a083c7633e41b94b1c0cf980cd4a51d74">kalman_internal::deduce_filter</a>&lt; Arguments... &gt; &gt;</td></tr>
<tr class="memdesc:a4a3bd37a96fd242e89867316396afcd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deduces the filter type from its declared configuration.  <br /></td></tr>
<tr class="separator:a4a3bd37a96fd242e89867316396afcd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4833d152f612bead262723ae23039575" id="r_a4833d152f612bead262723ae23039575"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a4833d152f612bead262723ae23039575"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4833d152f612bead262723ae23039575">matrix</a> (Type) -&gt; matrix&lt; Type, 1, 1 &gt;</td></tr>
<tr class="separator:a4833d152f612bead262723ae23039575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0175c0b371513180978bbdb30909c54" id="r_ac0175c0b371513180978bbdb30909c54"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:ac0175c0b371513180978bbdb30909c54"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac0175c0b371513180978bbdb30909c54">matrix</a> (const Type(&amp;)[Row][Column]) -&gt; matrix&lt; Type, Row, Column &gt;</td></tr>
<tr class="separator:ac0175c0b371513180978bbdb30909c54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b1c08e7faa5e078cd8c56e4acd8a54" id="r_a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row&gt; </td></tr>
<tr class="memitem:a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a36b1c08e7faa5e078cd8c56e4acd8a54">matrix</a> (const Type(&amp;)[Row]) -&gt; matrix&lt; Type, Row, 1 &gt;</td></tr>
<tr class="separator:a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9268087b30b9b76ebd787d0d80f75af6" id="r_a9268087b30b9b76ebd787d0d80f75af6"><td class="memTemplParams" colspan="2">template&lt;typename... Types, auto... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;first&lt;Types...&gt;, Types&gt;...&gt; &amp;&amp; ((Columns == first_v&lt;Columns&gt;) &amp;&amp; ... &amp;&amp; true))</td></tr>
<tr class="memitem:a9268087b30b9b76ebd787d0d80f75af6"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9268087b30b9b76ebd787d0d80f75af6">matrix</a> (const Types(&amp;...rows)[Columns]) -&gt; matrix&lt; std::remove_cvref_t&lt; first&lt; Types... &gt; &gt;, sizeof...(Columns),(Columns,...)&gt;</td></tr>
<tr class="separator:a9268087b30b9b76ebd787d0d80f75af6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a44762b6a541e61f07ed2b0477b182829" id="r_a44762b6a541e61f07ed2b0477b182829"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a44762b6a541e61f07ed2b0477b182829">printer</a></td></tr>
<tr class="separator:a44762b6a541e61f07ed2b0477b182829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a557163de917941ab5d3f973845e847" id="r_a4a557163de917941ab5d3f973845e847"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a4a557163de917941ab5d3f973845e847"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4a557163de917941ab5d3f973845e847">make_one_generator</a></td></tr>
<tr class="separator:a4a557163de917941ab5d3f973845e847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fe918283834c2c859a7325fc8d3a563" id="r_a7fe918283834c2c859a7325fc8d3a563"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a7fe918283834c2c859a7325fc8d3a563"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7fe918283834c2c859a7325fc8d3a563">make_zero_generator</a></td></tr>
<tr class="separator:a7fe918283834c2c859a7325fc8d3a563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aadf374ff49533297b0971d8a66b436" id="r_a0aadf374ff49533297b0971d8a66b436"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0aadf374ff49533297b0971d8a66b436">s4</a> {pow&lt;4&gt;(s)}</td></tr>
<tr class="separator:a0aadf374ff49533297b0971d8a66b436"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a8a206bd21b1225ecfea4798c26d775" id="r_a5a8a206bd21b1225ecfea4798c26d775"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5a8a206bd21b1225ecfea4798c26d775">deg_C2</a> {pow&lt;2&gt;(deg_C)}</td></tr>
<tr class="separator:a5a8a206bd21b1225ecfea4798c26d775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Algebraic Named Values</div></td></tr>
<tr class="memitem:a1c46caaf8e14f460b314c80eadf8a11b" id="r_a1c46caaf8e14f460b314c80eadf8a11b"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a1c46caaf8e14f460b314c80eadf8a11b"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1c46caaf8e14f460b314c80eadf8a11b">one&lt; matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:a1c46caaf8e14f460b314c80eadf8a11b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The one matrix lazy specialization.  <br /></td></tr>
<tr class="separator:a1c46caaf8e14f460b314c80eadf8a11b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8d7e56d105ac30c247bc5c8960b18b" id="r_a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9b8d7e56d105ac30c247bc5c8960b18b">zero&lt; matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix lazy specialization.  <br /></td></tr>
<tr class="separator:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Francois Carouge's projects namespace. </p>
<p>The definitions and implementations of the library intended for public usage. Lowers the name conflict probability in large projects. Use using-declarations or namespace-alias-definition per your project guidelines. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a3bf1207d66f4f99f4c7175ac6a65dfd4" name="a3bf1207d66f4f99f4c7175ac6a65dfd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bf1207d66f4f99f4c7175ac6a65dfd4">&#9670;&#160;</a></span>acceleration</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a3bf1207d66f4f99f4c7175ac6a65dfd4">fcarouge::acceleration</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    mp_units::quantity_point&lt;mp_units::isq::acceleration[m / s2]&gt;</div>
</div><!-- fragment --><dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_2x1x1_rocket_altitude_8cpp-example.xhtml#a2">kf_2x1x1_rocket_altitude.cpp</a>, and <a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a4">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00070">70</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<a id="ad06bb441aa2dcec149c52de0c297a967" name="ad06bb441aa2dcec149c52de0c297a967"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad06bb441aa2dcec149c52de0c297a967">&#9670;&#160;</a></span>column_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a3aae575a4aa6b608a99d02f58b0fc86c">fcarouge::column_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, 1&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scalar type indexed-based column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>
<p>Quantity column vector with mp-units and <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.</p>
<p>Scalar type indexed-based column vector with naive implementations.</p>
<p>Coroutine lazy column vector. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="a66bc0b3b05af74a53388c91b4dfde9e9" name="a66bc0b3b05af74a53388c91b4dfde9e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66bc0b3b05af74a53388c91b4dfde9e9">&#9670;&#160;</a></span>height</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a66bc0b3b05af74a53388c91b4dfde9e9">fcarouge::height</a> = mp_units::quantity_point&lt;mp_units::isq::height[m]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_1x1x0_building_height_unit_8cpp-example.xhtml#a1">kf_1x1x0_building_height_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00067">67</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<a id="af51993d5457effe625e8a68ca064136c" name="af51993d5457effe625e8a68ca064136c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af51993d5457effe625e8a68ca064136c">&#9670;&#160;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::matrix</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> indexed::matrix&lt;eigen::matrix&lt;Type, Row, Column&gt;,</div>
<div class="line">                               kalman_internal::tuple_n_type&lt;Type, Row&gt;,</div>
<div class="line">                               kalman_internal::tuple_n_type&lt;Type, Column&gt;&gt;</div>
</div><!-- fragment -->
<p>Scalar type indexed-based matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>
<p>Scalar type indexed-based matrix with naive implementations. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="a0480c6f84be0a01264da3eb984c103e1" name="a0480c6f84be0a01264da3eb984c103e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0480c6f84be0a01264da3eb984c103e1">&#9670;&#160;</a></span>position</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a0480c6f84be0a01264da3eb984c103e1">fcarouge::position</a> = mp_units::quantity_point&lt;mp_units::isq::length[m]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_1x1x1_dog_position_unit_8cpp-example.xhtml#a1">kf_1x1x1_dog_position_unit.cpp</a>, and <a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a2">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00068">68</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<a id="a7426c99fa5df210b90d63cd32c0b04f4" name="a7426c99fa5df210b90d63cd32c0b04f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7426c99fa5df210b90d63cd32c0b04f4">&#9670;&#160;</a></span>row_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, auto Column = 1, bool Copyable = false&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#adec4afd23d0a51e3f79d35c0bdd5f39b">fcarouge::row_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, decltype(Column){1}, Column, Copyable&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Coroutine lazy row vector. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00281">281</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  281</span>{1}, Column, Copyable&gt;;</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1a1efa10d3f0e4480b2ed1745c672aa1" name="a1a1efa10d3f0e4480b2ed1745c672aa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a1efa10d3f0e4480b2ed1745c672aa1">&#9670;&#160;</a></span>temperature</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a1a1efa10d3f0e4480b2ed1745c672aa1">fcarouge::temperature</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    mp_units::quantity_point&lt;mp_units::isq::Celsius_temperature[deg_C]&gt;</div>
</div><!-- fragment --><dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_1x1x0_liquid_temperature_8cpp-example.xhtml#a1">kf_1x1x0_liquid_temperature.cpp</a>, and <a class="el" href="kf_1x1x0_liquid_temperature_unit_8cpp-example.xhtml#a1">kf_1x1x0_liquid_temperature_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00072">72</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<a id="a7062d0a510937d0a2201f1167b6066cc" name="a7062d0a510937d0a2201f1167b6066cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7062d0a510937d0a2201f1167b6066cc">&#9670;&#160;</a></span>velocity</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a7062d0a510937d0a2201f1167b6066cc">fcarouge::velocity</a> = mp_units::quantity_point&lt;mp_units::isq::velocity[m / s]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a3">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00069">69</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a4a3bd37a96fd242e89867316396afcd5" name="a4a3bd37a96fd242e89867316396afcd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a3bd37a96fd242e89867316396afcd5">&#9670;&#160;</a></span>kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Arguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman </td>
          <td>(</td>
          <td class="paramtype">Arguments...</td>          <td class="paramname"><span class="paramname"><em>arguments</em></span></td><td>)</td>
          <td> -&gt;  kalman&lt; <a class="el" href="namespacefcarouge_1_1kalman__internal.xhtml#a083c7633e41b94b1c0cf980cd4a51d74">kalman_internal::deduce_filter</a>&lt; Arguments... &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deduces the filter type from its declared configuration. </p>
<p>The configuration arguments passed are used to determine at compile time the type of fiter to use. The objecive is to select the most performant filter within the defined configuraton parameters.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Arguments</td><td>The declarations of the filter configuration.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000016">Todo</a></b></dt><dd><p class="startdd">Should the parameter be named configurations? </p>
<p class="enddd">Should the configuration examples, supports be documented here? </p>
</dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ekf_4x1x0_soaring_8cpp-example.xhtml#a2">ekf_4x1x0_soaring.cpp</a>, <a class="el" href="kf_1x1x0_building_height_8cpp-example.xhtml#a0">kf_1x1x0_building_height.cpp</a>, <a class="el" href="kf_1x1x0_building_height_unit_8cpp-example.xhtml#a0">kf_1x1x0_building_height_unit.cpp</a>, <a class="el" href="kf_1x1x0_liquid_temperature_8cpp-example.xhtml#a0">kf_1x1x0_liquid_temperature.cpp</a>, <a class="el" href="kf_1x1x0_liquid_temperature_unit_8cpp-example.xhtml#a0">kf_1x1x0_liquid_temperature_unit.cpp</a>, <a class="el" href="kf_1x1x1_dog_position_8cpp-example.xhtml#a0">kf_1x1x1_dog_position.cpp</a>, <a class="el" href="kf_1x1x1_dog_position_unit_8cpp-example.xhtml#a0">kf_1x1x1_dog_position_unit.cpp</a>, <a class="el" href="kf_2x1x1_rocket_altitude_8cpp-example.xhtml#a3">kf_2x1x1_rocket_altitude.cpp</a>, <a class="el" href="kf_6x2x0_vehicle_location_8cpp-example.xhtml#a2">kf_6x2x0_vehicle_location.cpp</a>, <a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a1">kf_6x2x0_vehicle_location_unit.cpp</a>, and <a class="el" href="kf_8x4x0_deep_sort_bounding_box_8cpp-example.xhtml#a1">kf_8x4x0_deep_sort_bounding_box.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ae167596e2c65ae7024cbc80f5b5d1974" name="ae167596e2c65ae7024cbc80f5b5d1974"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae167596e2c65ae7024cbc80f5b5d1974">&#9670;&#160;</a></span>make_generator() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::ranges::range Range&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::generator&lt; typename Range::value_type &gt; fcarouge::make_generator </td>
          <td>(</td>
          <td class="paramtype">Range</td>          <td class="paramname"><span class="paramname"><em>elements</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">67</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   67</span>                               {</div>
<div class="line"><span class="lineno">   68</span>  <span class="keywordflow">return</span> [](<span class="keyword">auto</span> elements_copy)</div>
<div class="line"><span class="lineno">   69</span>             -&gt; std::generator&lt;<span class="keyword">typename</span> <span class="keyword">decltype</span>(elements)::value_type&gt; {</div>
<div class="line"><span class="lineno">   70</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;element : elements_copy) { <span class="comment">// std::ranges::elements_of</span></div>
<div class="line"><span class="lineno">   71</span>      <span class="keyword">co_yield</span> element;</div>
<div class="line"><span class="lineno">   72</span>    }</div>
<div class="line"><span class="lineno">   73</span>  }(elements);</div>
<div class="line"><span class="lineno">   74</span>}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::clone()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00200">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::explicit()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00165">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::matrix()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00236">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator()()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00260">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator()()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00363">operator==()</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00225">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator[]()</a>.</p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_ae167596e2c65ae7024cbc80f5b5d1974_icgraph.svg" width="624" height="356"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a34cda4cdb141fdaa3b43f3973585e4b1" name="a34cda4cdb141fdaa3b43f3973585e4b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34cda4cdb141fdaa3b43f3973585e4b1">&#9670;&#160;</a></span>make_generator() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_generator </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>element</em></span></td><td>)</td>
          <td> -&gt; std::generator&lt;Type&gt; </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00078">78</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   78</span>                                                                         {</div>
<div class="line"><span class="lineno">   79</span>  <span class="keywordflow">return</span> [](Type element_copy) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">   80</span>    <span class="keyword">co_yield</span> element_copy;</div>
<div class="line"><span class="lineno">   81</span>  }(element);</div>
<div class="line"><span class="lineno">   82</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a36b1c08e7faa5e078cd8c56e4acd8a54" name="a36b1c08e7faa5e078cd8c56e4acd8a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b1c08e7faa5e078cd8c56e4acd8a54">&#9670;&#160;</a></span>matrix() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Type</em></span>(&amp;)[Row]</td><td>)</td>
          <td> -&gt;  matrix&lt; Type, Row, 1 &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac0175c0b371513180978bbdb30909c54" name="ac0175c0b371513180978bbdb30909c54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0175c0b371513180978bbdb30909c54">&#9670;&#160;</a></span>matrix() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Type</em></span>(&amp;)[Row][Column]</td><td>)</td>
          <td> -&gt;  matrix&lt; Type, Row, Column &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9268087b30b9b76ebd787d0d80f75af6" name="a9268087b30b9b76ebd787d0d80f75af6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9268087b30b9b76ebd787d0d80f75af6">&#9670;&#160;</a></span>matrix() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types, auto... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;first&lt;Types...&gt;, Types&gt;...&gt; &amp;&amp; ((Columns == first_v&lt;Columns&gt;) &amp;&amp; ... &amp;&amp; true))</div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Types</em></span>(&amp;...rows)[Columns]</td><td>)</td>
          <td> -&gt;  matrix&lt; std::remove_cvref_t&lt; first&lt; Types... &gt; &gt;, sizeof...(Columns),(Columns,...)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4833d152f612bead262723ae23039575" name="a4833d152f612bead262723ae23039575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4833d152f612bead262723ae23039575">&#9670;&#160;</a></span>matrix() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  matrix&lt; Type, 1, 1 &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0647c4efb9c02b9ea365aacec50e4ae0" name="a0647c4efb9c02b9ea365aacec50e4ae0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0647c4efb9c02b9ea365aacec50e4ae0">&#9670;&#160;</a></span>operator*() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">arithmetic auto</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00394">394</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  394</span>                                                              {</div>
<div class="line"><span class="lineno">  395</span>  <span class="keyword">auto</span> next{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  396</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next) {</div>
<div class="line"><span class="lineno">  397</span>    <span class="keyword">co_yield</span> *next *rhs;</div>
<div class="line"><span class="lineno">  398</span>  }</div>
<div class="line"><span class="lineno">  399</span>}</div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ac6248dacd7be4fb05540b8ab2956cb7b"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">fcarouge::matrix::begin</a></div><div class="ttdeci">auto begin() const</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">linalg.hpp:273</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a0647c4efb9c02b9ea365aacec50e4ae0_cgraph.svg" width="338" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5f46009dfa013275132875c5be3ab85c" name="a5f46009dfa013275132875c5be3ab85c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f46009dfa013275132875c5be3ab85c">&#9670;&#160;</a></span>operator*() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, 1 &gt; fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Size &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Size, 1 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00377">377</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  378</span>                                                                               {</div>
<div class="line"><span class="lineno">  379</span>  <span class="comment">// fix me?</span></div>
<div class="line"><span class="lineno">  380</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  381</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {       <span class="comment">// chunk_by_rows</span></div>
<div class="line"><span class="lineno">  382</span>    matrix&lt;Type, Size, 1&gt; rhs_copy{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>()}; <span class="comment">// repeat_n</span></div>
<div class="line"><span class="lineno">  383</span>    <span class="keyword">auto</span> next2{rhs_copy.begin()};</div>
<div class="line"><span class="lineno">  384</span>    Type <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#ac2c0ae451aa13135fc4feb165b8e41af">element</a>{}; <span class="comment">// inner_product?</span></div>
<div class="line"><span class="lineno">  385</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Size) k{0}; k &lt; Size; ++k, ++next1, ++next2) {</div>
<div class="line"><span class="lineno">  386</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#ac2c0ae451aa13135fc4feb165b8e41af">element</a> += *next1 * *next2;</div>
<div class="line"><span class="lineno">  387</span>    }</div>
<div class="line"><span class="lineno">  388</span>    <span class="keyword">co_yield</span> <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#ac2c0ae451aa13135fc4feb165b8e41af">element</a>;</div>
<div class="line"><span class="lineno">  389</span>  }</div>
<div class="line"><span class="lineno">  390</span>}</div>
<div class="ttc" id="anamespacefcarouge_1_1indexed_xhtml_ac2c0ae451aa13135fc4feb165b8e41af"><div class="ttname"><a href="namespacefcarouge_1_1indexed.xhtml#ac2c0ae451aa13135fc4feb165b8e41af">fcarouge::indexed::element</a></div><div class="ttdeci">kalman_internal::product&lt; std::tuple_element_t&lt; RowIndex, typename Matrix::row_indexes &gt;, std::tuple_element_t&lt; ColumnIndex, typename Matrix::column_indexes &gt; &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="indexed_8hpp_source.xhtml#l00064">indexed.hpp:64</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a3d43f3ebeab72104b65bc49131d293fc"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">fcarouge::matrix::clone</a></div><div class="ttdeci">constexpr std::generator&lt; Type &gt; clone() const</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">linalg.hpp:186</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::clone()</a>.</p>
<div id="dynsection-2" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5f46009dfa013275132875c5be3ab85c_cgraph.svg" width="556" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a37839500158d123b7bdc6824a025f0bc" name="a37839500158d123b7bdc6824a025f0bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37839500158d123b7bdc6824a025f0bc">&#9670;&#160;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00409">409</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  409</span>                                                                        {</div>
<div class="line"><span class="lineno">  410</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  411</span>  <span class="keyword">auto</span> next2{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  412</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next1, ++next2) {</div>
<div class="line"><span class="lineno">  413</span>    <span class="keyword">co_yield</span> *next1 + *next2;</div>
<div class="line"><span class="lineno">  414</span>  }</div>
<div class="line"><span class="lineno">  415</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-3" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a37839500158d123b7bdc6824a025f0bc_cgraph.svg" width="340" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a214880fe1dfe8701212c14c9ece44013" name="a214880fe1dfe8701212c14c9ece44013"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a214880fe1dfe8701212c14c9ece44013">&#9670;&#160;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt; fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00402">402</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  403</span>                                                                          {</div>
<div class="line"><span class="lineno">  404</span>  <span class="keyword">co_yield</span> lhs + *rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>();</div>
<div class="line"><span class="lineno">  405</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-4" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a214880fe1dfe8701212c14c9ece44013_cgraph.svg" width="340" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a62fb05e2f569f36e8cac44a90ccbc106" name="a62fb05e2f569f36e8cac44a90ccbc106"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62fb05e2f569f36e8cac44a90ccbc106">&#9670;&#160;</a></span>operator==() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::invocable L&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00352">352</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  352</span>                                                        {</div>
<div class="line"><span class="lineno">  353</span>  <span class="keywordflow">return</span> lhs() == rhs();</div>
<div class="line"><span class="lineno">  354</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a47d78fa7b2fbab1fdec6f6e30d6b1da0" name="a47d78fa7b2fbab1fdec6f6e30d6b1da0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47d78fa7b2fbab1fdec6f6e30d6b1da0">&#9670;&#160;</a></span>operator==() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::invocable L, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00356">356</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  356</span>                                                                    {</div>
<div class="line"><span class="lineno">  357</span>  <span class="keywordflow">return</span> lhs() == rhs;</div>
<div class="line"><span class="lineno">  358</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a84939a609e68330c2689aff14d978311" name="a84939a609e68330c2689aff14d978311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84939a609e68330c2689aff14d978311">&#9670;&#160;</a></span>operator==() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column, bool CopyableOrNot1, bool CopyableOrNot2&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot1 &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot2 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00363">363</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  364</span>                                                          {</div>
<div class="line"><span class="lineno">  365</span>  std::array&lt;Type, Row * Column&gt; lhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><span class="lineno">  366</span>  std::ranges::copy(lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, lhs_elements.begin());</div>
<div class="line"><span class="lineno">  367</span>  lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(lhs_elements);</div>
<div class="line"><span class="lineno">  368</span> </div>
<div class="line"><span class="lineno">  369</span>  std::array&lt;Type, Row * Column&gt; rhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><span class="lineno">  370</span>  std::ranges::copy(rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, rhs_elements.begin());</div>
<div class="line"><span class="lineno">  371</span>  rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(rhs_elements);</div>
<div class="line"><span class="lineno">  372</span> </div>
<div class="line"><span class="lineno">  373</span>  <span class="keywordflow">return</span> lhs_elements == rhs_elements;</div>
<div class="line"><span class="lineno">  374</span>}</div>
<div class="ttc" id="anamespacefcarouge_xhtml_ae167596e2c65ae7024cbc80f5b5d1974"><div class="ttname"><a href="#ae167596e2c65ae7024cbc80f5b5d1974">fcarouge::make_generator</a></div><div class="ttdeci">constexpr std::generator&lt; typename Range::value_type &gt; make_generator(Range elements)</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">linalg.hpp:67</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a345b32af8d533e28e162b7757e23d2ec"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">fcarouge::matrix::genie</a></div><div class="ttdeci">generator genie</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00276">linalg.hpp:276</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00276">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::genie</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">make_generator()</a>.</p>
<div id="dynsection-5" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a84939a609e68330c2689aff14d978311_cgraph.svg" width="370" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abb7d0eaceb29f78f64bff07a52fe5824" name="abb7d0eaceb29f78f64bff07a52fe5824"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb7d0eaceb29f78f64bff07a52fe5824">&#9670;&#160;</a></span>operator|()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator| </td>
          <td>(</td>
          <td class="paramtype">Filter &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>filter</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a></td>          <td class="paramname"><span class="paramname"><em>decorator</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="printer_8hpp_source.xhtml#l00094">94</a> of file <a class="el" href="printer_8hpp_source.xhtml">printer.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   94</span>                                                                               {</div>
<div class="line"><span class="lineno">   95</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="classfcarouge_1_1decorator_1_1printer.xhtml">decorator::printer&lt;Filter&gt;</a>(std::forward&lt;Filter&gt;(filter));</div>
<div class="line"><span class="lineno">   96</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1decorator_1_1printer_xhtml"><div class="ttname"><a href="classfcarouge_1_1decorator_1_1printer.xhtml">fcarouge::decorator::printer</a></div><div class="ttdoc">Decorates a filter with operation printing.</div><div class="ttdef"><b>Definition</b> <a href="printer_8hpp_source.xhtml#l00052">printer.hpp:52</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5a8a206bd21b1225ecfea4798c26d775" name="a5a8a206bd21b1225ecfea4798c26d775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a8a206bd21b1225ecfea4798c26d775">&#9670;&#160;</a></span>deg_C2</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::deg_C2 {pow&lt;2&gt;(deg_C)}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_1x1x0_liquid_temperature_unit_8cpp-example.xhtml#a2">kf_1x1x0_liquid_temperature_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00065">65</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   65</span>{pow&lt;2&gt;(deg_C)};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4a557163de917941ab5d3f973845e847" name="a4a557163de917941ab5d3f973845e847"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a557163de917941ab5d3f973845e847">&#9670;&#160;</a></span>make_one_generator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_one_generator</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Column) j{0}; j &lt; Column; ++j) {</div>
<div class="line">      <span class="keyword">co_yield</span> i == j;</div>
<div class="line">    }</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00310">310</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  310</span>                       {[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">  311</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {</div>
<div class="line"><span class="lineno">  312</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Column) j{0}; j &lt; Column; ++j) {</div>
<div class="line"><span class="lineno">  313</span>      <span class="keyword">co_yield</span> i == j;</div>
<div class="line"><span class="lineno">  314</span>    }</div>
<div class="line"><span class="lineno">  315</span>  }</div>
<div class="line"><span class="lineno">  316</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7fe918283834c2c859a7325fc8d3a563" name="a7fe918283834c2c859a7325fc8d3a563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fe918283834c2c859a7325fc8d3a563">&#9670;&#160;</a></span>make_zero_generator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_zero_generator</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k) {</div>
<div class="line">    <span class="keyword">co_yield</span> 0.0;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00319">319</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  319</span>                        {[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">  320</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k) {</div>
<div class="line"><span class="lineno">  321</span>    <span class="keyword">co_yield</span> 0.0;</div>
<div class="line"><span class="lineno">  322</span>  }</div>
<div class="line"><span class="lineno">  323</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c46caaf8e14f460b314c80eadf8a11b" name="a1c46caaf8e14f460b314c80eadf8a11b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c46caaf8e14f460b314c80eadf8a11b">&#9670;&#160;</a></span>one&lt; matrix&lt; Type, Row, Column &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::one&lt; <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[](<span class="keyword">auto</span>... args) {</div>
<div class="line">  matrix&lt;Type, Row, Column, true&gt; m{make_one_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line">  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line">    <span class="keywordflow">return</span> m(args...);</div>
<div class="line">  } <span class="keywordflow">else</span> {</div>
<div class="line">    <span class="keywordflow">return</span> m;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p>The one matrix lazy specialization. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00330">330</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  330</span>                                   {[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><span class="lineno">  331</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{make_one_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><span class="lineno">  332</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><span class="lineno">  333</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><span class="lineno">  334</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><span class="lineno">  335</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><span class="lineno">  336</span>  }</div>
<div class="line"><span class="lineno">  337</span>}};</div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml">fcarouge::matrix</a></div><div class="ttdoc">Coroutine lazy matrix.</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00115">linalg.hpp:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a44762b6a541e61f07ed2b0477b182829" name="a44762b6a541e61f07ed2b0477b182829"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44762b6a541e61f07ed2b0477b182829">&#9670;&#160;</a></span>printer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a> fcarouge::printer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="printer_8hpp_source.xhtml#l00090">90</a> of file <a class="el" href="printer_8hpp_source.xhtml">printer.hpp</a>.</p>

</div>
</div>
<a id="a0aadf374ff49533297b0971d8a66b436" name="a0aadf374ff49533297b0971d8a66b436"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aadf374ff49533297b0971d8a66b436">&#9670;&#160;</a></span>s4</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::s4 {pow&lt;4&gt;(s)}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   64</span>{pow&lt;4&gt;(s)};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9b8d7e56d105ac30c247bc5c8960b18b" name="a9b8d7e56d105ac30c247bc5c8960b18b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8d7e56d105ac30c247bc5c8960b18b">&#9670;&#160;</a></span>zero&lt; matrix&lt; Type, Row, Column &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::zero&lt; <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[](<span class="keyword">auto</span>... args) {</div>
<div class="line">  matrix&lt;Type, Row, Column, true&gt; m{make_zero_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line">  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line">    <span class="keywordflow">return</span> m(args...);</div>
<div class="line">  } <span class="keywordflow">else</span> {</div>
<div class="line">    <span class="keywordflow">return</span> m;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p>The zero matrix lazy specialization. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00341">341</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  341</span>                                    {[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><span class="lineno">  342</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{make_zero_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><span class="lineno">  343</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><span class="lineno">  344</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><span class="lineno">  345</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><span class="lineno">  346</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><span class="lineno">  347</span>  }</div>
<div class="line"><span class="lineno">  348</span>}};</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
