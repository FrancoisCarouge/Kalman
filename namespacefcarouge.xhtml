<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.4.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('namespacefcarouge.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#concepts">Concepts</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Francois Carouge's projects namespace.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="namespaces" name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1benchmark.xhtml">benchmark</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1benchmark"><td class="mdescLeft">&#160;</td><td class="mdescRight">Benchmark implementation. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1decorator.xhtml">decorator</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1decorator"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collection of functionality extension for filters. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1eigen.xhtml">eigen</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1indexed.xhtml">indexed</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1internal.xhtml">internal</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation details. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1naive.xhtml">naive</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1sample.xhtml">sample</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1sample"><td class="mdescLeft">&#160;</td><td class="mdescRight">Examples, tutorials, demonstrators of the library. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test.xhtml">test</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1test"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unit, integration, regression, and usage tests. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1divider.xhtml">divider</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra divider expression type specialization point.  <a href="structfcarouge_1_1divider.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1divider_3_01_lhs_00_01_rhs_01_4.xhtml">divider&lt; Lhs, Rhs &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the division type.  <a href="structfcarouge_1_1divider_3_01_lhs_00_01_rhs_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluater.xhtml">evaluater</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra evaluater override expression lazy evaluation specialization point.  <a href="structfcarouge_1_1evaluater.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluater_3_01_indexed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml">evaluater&lt; IndexedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the evaluation type.  <a href="structfcarouge_1_1evaluater_3_01_indexed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluater_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml">evaluater&lt; naive::matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the evaluation type.  <a href="structfcarouge_1_1evaluater_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluater_3_01_type_01_4.xhtml">evaluater&lt; Type &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the evaluation type.  <a href="structfcarouge_1_1evaluater_3_01_type_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A generic Kalman filter.  <a href="classfcarouge_1_1kalman.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coroutine lazy matrix.  <a href="structfcarouge_1_1matrix.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposer.xhtml">transposer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra transposer specialization point.  <a href="structfcarouge_1_1transposer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposer_3_01_indexed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml">transposer&lt; IndexedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the transposer.  <a href="structfcarouge_1_1transposer_3_01_indexed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposer_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml">transposer&lt; naive::matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the transposer.  <a href="structfcarouge_1_1transposer_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposer_3_01_type_01_4.xhtml">transposer&lt; Type &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="concepts" name="concepts"></a>
Concepts</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1kalman__filter.xhtml">kalman_filter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Kalman filter concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arithmetic concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1algebraic.xhtml">algebraic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Algebraic concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__input.xhtml">has_input</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter input support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__process__uncertainty.xhtml">has_process_uncertainty</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter process uncertainty support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__output__uncertainty.xhtml">has_output_uncertainty</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter output uncertainty support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__prediction__types.xhtml">has_prediction_types</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter prediction pack support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__input__control.xhtml">has_input_control</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter input control support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__state__transition.xhtml">has_state_transition</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter state transition support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__update__types.xhtml">has_update_types</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter update pack support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__output__model.xhtml">has_output_model</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter output model support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a9ee3eae5e0b0f9c6c415167c9b0ebe53" id="r_a9ee3eae5e0b0f9c6c415167c9b0ebe53"><td class="memTemplParams" colspan="2">template&lt;typename Representation , auto Reference&gt; </td></tr>
<tr class="memitem:a9ee3eae5e0b0f9c6c415167c9b0ebe53"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">quantity</a> = mp_units::quantity&lt;Reference, Representation&gt;</td></tr>
<tr class="memdesc:a9ee3eae5e0b0f9c6c415167c9b0ebe53"><td class="mdescLeft">&#160;</td><td class="mdescRight">The physical unit quantity.  <br /></td></tr>
<tr class="separator:a9ee3eae5e0b0f9c6c415167c9b0ebe53"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abb7d0eaceb29f78f64bff07a52fe5824" id="r_abb7d0eaceb29f78f64bff07a52fe5824"><td class="memTemplParams" colspan="2">template&lt;typename Filter &gt; </td></tr>
<tr class="memitem:abb7d0eaceb29f78f64bff07a52fe5824"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abb7d0eaceb29f78f64bff07a52fe5824">operator|</a> (Filter &amp;&amp;filter, const <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a> decorator)</td></tr>
<tr class="separator:abb7d0eaceb29f78f64bff07a52fe5824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae167596e2c65ae7024cbc80f5b5d1974" id="r_ae167596e2c65ae7024cbc80f5b5d1974"><td class="memTemplParams" colspan="2">template&lt;std::ranges::range Range&gt; </td></tr>
<tr class="memitem:ae167596e2c65ae7024cbc80f5b5d1974"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::generator&lt; typename Range::value_type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a> (Range elements)</td></tr>
<tr class="separator:ae167596e2c65ae7024cbc80f5b5d1974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34cda4cdb141fdaa3b43f3973585e4b1" id="r_a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a34cda4cdb141fdaa3b43f3973585e4b1">make_generator</a> (Type element) -&gt; std::generator&lt; Type &gt;</td></tr>
<tr class="separator:a34cda4cdb141fdaa3b43f3973585e4b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62fb05e2f569f36e8cac44a90ccbc106" id="r_a62fb05e2f569f36e8cac44a90ccbc106"><td class="memTemplParams" colspan="2">template&lt;std::invocable L&gt; </td></tr>
<tr class="memitem:a62fb05e2f569f36e8cac44a90ccbc106"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a62fb05e2f569f36e8cac44a90ccbc106">operator==</a> (L lhs, L rhs)</td></tr>
<tr class="separator:a62fb05e2f569f36e8cac44a90ccbc106"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47d78fa7b2fbab1fdec6f6e30d6b1da0" id="r_a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memTemplParams" colspan="2">template&lt;std::invocable L, typename T &gt; </td></tr>
<tr class="memitem:a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a47d78fa7b2fbab1fdec6f6e30d6b1da0">operator==</a> (L lhs, T rhs)</td></tr>
<tr class="separator:a47d78fa7b2fbab1fdec6f6e30d6b1da0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84939a609e68330c2689aff14d978311" id="r_a84939a609e68330c2689aff14d978311"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column, bool CopyableOrNot1, bool CopyableOrNot2&gt; </td></tr>
<tr class="memitem:a84939a609e68330c2689aff14d978311"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a84939a609e68330c2689aff14d978311">operator==</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot1 &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot2 &gt; rhs)</td></tr>
<tr class="separator:a84939a609e68330c2689aff14d978311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f46009dfa013275132875c5be3ab85c" id="r_a5f46009dfa013275132875c5be3ab85c"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Size&gt; </td></tr>
<tr class="memitem:a5f46009dfa013275132875c5be3ab85c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, 1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5f46009dfa013275132875c5be3ab85c">operator*</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Size &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Size, 1 &gt; rhs)</td></tr>
<tr class="separator:a5f46009dfa013275132875c5be3ab85c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0647c4efb9c02b9ea365aacec50e4ae0" id="r_a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0647c4efb9c02b9ea365aacec50e4ae0">operator*</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; lhs, arithmetic auto rhs)</td></tr>
<tr class="separator:a0647c4efb9c02b9ea365aacec50e4ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214880fe1dfe8701212c14c9ece44013" id="r_a214880fe1dfe8701212c14c9ece44013"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a214880fe1dfe8701212c14c9ece44013"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a214880fe1dfe8701212c14c9ece44013">operator+</a> (Type lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt; rhs)</td></tr>
<tr class="separator:a214880fe1dfe8701212c14c9ece44013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37839500158d123b7bdc6824a025f0bc" id="r_a37839500158d123b7bdc6824a025f0bc"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a37839500158d123b7bdc6824a025f0bc"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a37839500158d123b7bdc6824a025f0bc">operator+</a> (<a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; lhs, <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; rhs)</td></tr>
<tr class="separator:a37839500158d123b7bdc6824a025f0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Deduction Guides</div></td></tr>
<tr class="memitem:ae4d1dbbab6a8bdcaa50062d0cb879777" id="r_ae4d1dbbab6a8bdcaa50062d0cb879777"><td class="memTemplParams" colspan="2">template&lt;typename... Arguments&gt; </td></tr>
<tr class="memitem:ae4d1dbbab6a8bdcaa50062d0cb879777"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae4d1dbbab6a8bdcaa50062d0cb879777">kalman</a> (Arguments... arguments) -&gt; kalman&lt; <a class="el" href="namespacefcarouge_1_1internal.xhtml#a0005e5cf17f05f289eaf8a5bc9ffeda5">internal::deduce_filter</a>&lt; Arguments... &gt; &gt;</td></tr>
<tr class="memdesc:ae4d1dbbab6a8bdcaa50062d0cb879777"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deduces the filter type from its declared configuration.  <br /></td></tr>
<tr class="separator:ae4d1dbbab6a8bdcaa50062d0cb879777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4833d152f612bead262723ae23039575" id="r_a4833d152f612bead262723ae23039575"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a4833d152f612bead262723ae23039575"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4833d152f612bead262723ae23039575">matrix</a> (Type) -&gt; matrix&lt; Type, 1, 1 &gt;</td></tr>
<tr class="separator:a4833d152f612bead262723ae23039575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0175c0b371513180978bbdb30909c54" id="r_ac0175c0b371513180978bbdb30909c54"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:ac0175c0b371513180978bbdb30909c54"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac0175c0b371513180978bbdb30909c54">matrix</a> (const Type(&amp;)[Row][Column]) -&gt; matrix&lt; Type, Row, Column &gt;</td></tr>
<tr class="separator:ac0175c0b371513180978bbdb30909c54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b1c08e7faa5e078cd8c56e4acd8a54" id="r_a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row&gt; </td></tr>
<tr class="memitem:a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a36b1c08e7faa5e078cd8c56e4acd8a54">matrix</a> (const Type(&amp;)[Row]) -&gt; matrix&lt; Type, Row, 1 &gt;</td></tr>
<tr class="separator:a36b1c08e7faa5e078cd8c56e4acd8a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9268087b30b9b76ebd787d0d80f75af6" id="r_a9268087b30b9b76ebd787d0d80f75af6"><td class="memTemplParams" colspan="2">template&lt;typename... Types, auto... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;<a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt;Types...&gt;, Types&gt;...&gt; &amp;&amp; ((Columns == <a class="el" href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">first_v</a>&lt;Columns&gt;) &amp;&amp; ... &amp;&amp; true))</td></tr>
<tr class="memitem:a9268087b30b9b76ebd787d0d80f75af6"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9268087b30b9b76ebd787d0d80f75af6">matrix</a> (const Types(&amp;...rows)[Columns]) -&gt; matrix&lt; std::remove_cvref_t&lt; <a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt; Types... &gt; &gt;, sizeof...(Columns),(Columns,...)&gt;</td></tr>
<tr class="separator:a9268087b30b9b76ebd787d0d80f75af6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Functions</div></td></tr>
<tr class="memitem:a5ad0022b969a210b7261d0158bc1dd7b" id="r_a5ad0022b969a210b7261d0158bc1dd7b"><td class="memTemplParams" colspan="2">template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </td></tr>
<tr class="memitem:a5ad0022b969a210b7261d0158bc1dd7b"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5ad0022b969a210b7261d0158bc1dd7b">for_constexpr</a> (Function &amp;&amp;function)</td></tr>
<tr class="memdesc:a5ad0022b969a210b7261d0158bc1dd7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compile-time for loop.  <br /></td></tr>
<tr class="separator:a5ad0022b969a210b7261d0158bc1dd7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a44762b6a541e61f07ed2b0477b182829" id="r_a44762b6a541e61f07ed2b0477b182829"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a44762b6a541e61f07ed2b0477b182829">printer</a></td></tr>
<tr class="separator:a44762b6a541e61f07ed2b0477b182829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b0c4f263f282cbb330a4ca6b5ad10d9" id="r_a3b0c4f263f282cbb330a4ca6b5ad10d9"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a3b0c4f263f282cbb330a4ca6b5ad10d9"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3b0c4f263f282cbb330a4ca6b5ad10d9">make_identity_generator</a></td></tr>
<tr class="separator:a3b0c4f263f282cbb330a4ca6b5ad10d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fe918283834c2c859a7325fc8d3a563" id="r_a7fe918283834c2c859a7325fc8d3a563"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a7fe918283834c2c859a7325fc8d3a563"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7fe918283834c2c859a7325fc8d3a563">make_zero_generator</a></td></tr>
<tr class="separator:a7fe918283834c2c859a7325fc8d3a563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab770e1c523d5ae430bb4bbb2199f76d4" id="r_ab770e1c523d5ae430bb4bbb2199f76d4"><td class="memTemplParams" colspan="2">template&lt;typename Representation , auto Reference&gt; </td></tr>
<tr class="memitem:ab770e1c523d5ae430bb4bbb2199f76d4"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">quantity</a>&lt; Representation, Reference &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab770e1c523d5ae430bb4bbb2199f76d4">identity&lt; quantity&lt; Representation, Reference &gt; &gt;</a> {1., Reference}</td></tr>
<tr class="memdesc:ab770e1c523d5ae430bb4bbb2199f76d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton identity matrix specialization.  <br /></td></tr>
<tr class="separator:ab770e1c523d5ae430bb4bbb2199f76d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Named Values</div></td></tr>
<tr class="memitem:ac4cffefdda8c01a267ce2700c6acb903" id="r_ac4cffefdda8c01a267ce2700c6acb903"><td class="memTemplParams" colspan="2">template&lt;typename Pack &gt; </td></tr>
<tr class="memitem:ac4cffefdda8c01a267ce2700c6acb903"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac4cffefdda8c01a267ce2700c6acb903">size</a> {internal::size&lt;Pack&gt;}</td></tr>
<tr class="memdesc:ac4cffefdda8c01a267ce2700c6acb903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of tuple-like types.  <br /></td></tr>
<tr class="separator:ac4cffefdda8c01a267ce2700c6acb903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0d4e00e05e1ca7701aa8dfc9681d77" id="r_a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memTemplParams" colspan="2">template&lt;auto... Values&gt; </td></tr>
<tr class="memitem:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">first_v</a> {internal::first_v&lt;Values...&gt;}</td></tr>
<tr class="memdesc:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first value of the non-type template parameter pack.  <br /></td></tr>
<tr class="separator:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1c0921e3b3af3a11420cfe30e308aa7" id="r_ab1c0921e3b3af3a11420cfe30e308aa7"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:ab1c0921e3b3af3a11420cfe30e308aa7"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab1c0921e3b3af3a11420cfe30e308aa7">identity</a></td></tr>
<tr class="memdesc:ab1c0921e3b3af3a11420cfe30e308aa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">The identity matrix.  <br /></td></tr>
<tr class="separator:ab1c0921e3b3af3a11420cfe30e308aa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b6de8f96a4b6483d91d1e73683a02d1" id="r_a7b6de8f96a4b6483d91d1e73683a02d1"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a7b6de8f96a4b6483d91d1e73683a02d1"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7b6de8f96a4b6483d91d1e73683a02d1">identity&lt; Arithmetic &gt;</a> {1}</td></tr>
<tr class="memdesc:a7b6de8f96a4b6483d91d1e73683a02d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton identity matrix specialization.  <br /></td></tr>
<tr class="separator:a7b6de8f96a4b6483d91d1e73683a02d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af940cca4b42248e5ef4460d697c2bfb3" id="r_af940cca4b42248e5ef4460d697c2bfb3"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</td></tr>
<tr class="memitem:af940cca4b42248e5ef4460d697c2bfb3"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af940cca4b42248e5ef4460d697c2bfb3">identity&lt; Type &gt;</a> {Type::Identity()}</td></tr>
<tr class="separator:af940cca4b42248e5ef4460d697c2bfb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef6fb6c8a265d85709b951506123a5f1" id="r_aef6fb6c8a265d85709b951506123a5f1"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:aef6fb6c8a265d85709b951506123a5f1"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a></td></tr>
<tr class="memdesc:aef6fb6c8a265d85709b951506123a5f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix.  <br /></td></tr>
<tr class="separator:aef6fb6c8a265d85709b951506123a5f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5567c841761bdb7aac049796d4c43580" id="r_a5567c841761bdb7aac049796d4c43580"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a5567c841761bdb7aac049796d4c43580"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5567c841761bdb7aac049796d4c43580">zero&lt; Arithmetic &gt;</a> {0}</td></tr>
<tr class="memdesc:a5567c841761bdb7aac049796d4c43580"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton zero matrix specialization.  <br /></td></tr>
<tr class="separator:a5567c841761bdb7aac049796d4c43580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0283af94a195958399959586dcc8a50" id="r_ac0283af94a195958399959586dcc8a50"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</td></tr>
<tr class="memitem:ac0283af94a195958399959586dcc8a50"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac0283af94a195958399959586dcc8a50">zero&lt; Type &gt;</a> {Type::Zero()}</td></tr>
<tr class="separator:ac0283af94a195958399959586dcc8a50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Algebraic Named Values</div></td></tr>
<tr class="memitem:aa12d176b9a5533210dd230e7f719c4fb" id="r_aa12d176b9a5533210dd230e7f719c4fb"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:aa12d176b9a5533210dd230e7f719c4fb"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa12d176b9a5533210dd230e7f719c4fb">identity&lt; matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:aa12d176b9a5533210dd230e7f719c4fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The identity matrix lazy specialization.  <br /></td></tr>
<tr class="separator:aa12d176b9a5533210dd230e7f719c4fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8d7e56d105ac30c247bc5c8960b18b" id="r_a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Row, auto Column&gt; </td></tr>
<tr class="memitem:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9b8d7e56d105ac30c247bc5c8960b18b">zero&lt; matrix&lt; Type, Row, Column &gt; &gt;</a></td></tr>
<tr class="memdesc:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix lazy specialization.  <br /></td></tr>
<tr class="separator:a9b8d7e56d105ac30c247bc5c8960b18b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Types</h2></td></tr>
<tr class="memitem:a2b9209137b760e121bcfe9bac7dcacc0" id="r_a2b9209137b760e121bcfe9bac7dcacc0"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a2b9209137b760e121bcfe9bac7dcacc0"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a2b9209137b760e121bcfe9bac7dcacc0">divide</a></td></tr>
<tr class="memdesc:a2b9209137b760e121bcfe9bac7dcacc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divider helper type.  <br /></td></tr>
<tr class="separator:a2b9209137b760e121bcfe9bac7dcacc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd5b06c86fbc7f4790315e50578d4e13" id="r_acd5b06c86fbc7f4790315e50578d4e13"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:acd5b06c86fbc7f4790315e50578d4e13"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#acd5b06c86fbc7f4790315e50578d4e13">evaluate</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1evaluater.xhtml">evaluater</a>&lt;Type&gt;&gt;</td></tr>
<tr class="memdesc:acd5b06c86fbc7f4790315e50578d4e13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluater helper type.  <br /></td></tr>
<tr class="separator:acd5b06c86fbc7f4790315e50578d4e13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63023be73bdc7d43cd7053035230ae34" id="r_a63023be73bdc7d43cd7053035230ae34"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a63023be73bdc7d43cd7053035230ae34"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a63023be73bdc7d43cd7053035230ae34">transpose</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1transposer.xhtml">transposer</a>&lt;Type&gt;, const Type &amp;&gt;</td></tr>
<tr class="memdesc:a63023be73bdc7d43cd7053035230ae34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transposer helper type.  <br /></td></tr>
<tr class="separator:a63023be73bdc7d43cd7053035230ae34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a463eb0fdde0b3d3ea64b5a16fa95b253" id="r_a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a463eb0fdde0b3d3ea64b5a16fa95b253">empty_tuple</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#aba5eb00c20ad829026fe88a48785307d">internal::empty_tuple</a></td></tr>
<tr class="memdesc:a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the empty tuple.  <br /></td></tr>
<tr class="separator:a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88ffaddfc70067199a9f22246b9d7220" id="r_a88ffaddfc70067199a9f22246b9d7220"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a88ffaddfc70067199a9f22246b9d7220"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a9b7b21596c593512e73cd0298ff05c47">internal::first</a>&lt;Types...&gt;</td></tr>
<tr class="memdesc:a88ffaddfc70067199a9f22246b9d7220"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first type of the type template parameter pack.  <br /></td></tr>
<tr class="separator:a88ffaddfc70067199a9f22246b9d7220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c5e16e2c726f4a91a88f3563be340b7" id="r_a0c5e16e2c726f4a91a88f3563be340b7"><td class="memTemplParams" colspan="2">template&lt;typename Type , std::size_t Size&gt; </td></tr>
<tr class="memitem:a0c5e16e2c726f4a91a88f3563be340b7"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0c5e16e2c726f4a91a88f3563be340b7">tuple_n_type</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a2d608d28c8cff822a3dfaf1daeb0b15e">internal::tuple_n_type</a>&lt;Type, Size&gt;</td></tr>
<tr class="memdesc:a0c5e16e2c726f4a91a88f3563be340b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">An alias for making a tuple of the same type.  <br /></td></tr>
<tr class="separator:a0c5e16e2c726f4a91a88f3563be340b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae572d5a48afe03765d8e55617ea78689" id="r_ae572d5a48afe03765d8e55617ea78689"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:ae572d5a48afe03765d8e55617ea78689"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae572d5a48afe03765d8e55617ea78689">product</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a521b8803424c884bda00ab81bb651455">internal::product</a>&lt;Lhs, Rhs&gt;</td></tr>
<tr class="memdesc:ae572d5a48afe03765d8e55617ea78689"><td class="mdescLeft">&#160;</td><td class="mdescRight">The deduced result type of the product.  <br /></td></tr>
<tr class="separator:ae572d5a48afe03765d8e55617ea78689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855afd89defaf8feeb606e34b303dd97" id="r_a855afd89defaf8feeb606e34b303dd97"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a855afd89defaf8feeb606e34b303dd97"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a855afd89defaf8feeb606e34b303dd97">ᴀʙᵀ</a> = <a class="el" href="#acd5b06c86fbc7f4790315e50578d4e13">evaluate</a>&lt;<a class="el" href="#ae572d5a48afe03765d8e55617ea78689">product</a>&lt;Lhs, <a class="el" href="#a63023be73bdc7d43cd7053035230ae34">transpose</a>&lt;Rhs&gt;&gt;&gt;</td></tr>
<tr class="memdesc:a855afd89defaf8feeb606e34b303dd97"><td class="mdescLeft">&#160;</td><td class="mdescRight">The evaluated type of the ABᵀ expression.  <br /></td></tr>
<tr class="separator:a855afd89defaf8feeb606e34b303dd97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d51e9ff898a41560f1cd0963356f04c" id="r_a7d51e9ff898a41560f1cd0963356f04c"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </td></tr>
<tr class="memitem:a7d51e9ff898a41560f1cd0963356f04c"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7d51e9ff898a41560f1cd0963356f04c">matrix</a></td></tr>
<tr class="memdesc:a7d51e9ff898a41560f1cd0963356f04c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type indexed-based matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:a7d51e9ff898a41560f1cd0963356f04c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967" id="r_ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1&gt; </td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad06bb441aa2dcec149c52de0c297a967">column_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, 1&gt;</td></tr>
<tr class="memdesc:ad06bb441aa2dcec149c52de0c297a967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type indexed-based column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:ad06bb441aa2dcec149c52de0c297a967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7426c99fa5df210b90d63cd32c0b04f4" id="r_a7426c99fa5df210b90d63cd32c0b04f4"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, auto Column = 1, bool Copyable = false&gt; </td></tr>
<tr class="memitem:a7426c99fa5df210b90d63cd32c0b04f4"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7426c99fa5df210b90d63cd32c0b04f4">row_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, decltype(Column){1}, Column, Copyable&gt;</td></tr>
<tr class="memdesc:a7426c99fa5df210b90d63cd32c0b04f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coroutine lazy row vector.  <br /></td></tr>
<tr class="separator:a7426c99fa5df210b90d63cd32c0b04f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1b555b919a51d9ef29849f6e86b48a" id="r_a5d1b555b919a51d9ef29849f6e86b48a"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5d1b555b919a51d9ef29849f6e86b48a"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5d1b555b919a51d9ef29849f6e86b48a">t</a> (const Type &amp;value)</td></tr>
<tr class="memdesc:a5d1b555b919a51d9ef29849f6e86b48a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose helper function.  <br /></td></tr>
<tr class="separator:a5d1b555b919a51d9ef29849f6e86b48a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Francois Carouge's projects namespace. </p>
<p>The definitions and implementations of the library intended for public usage. Lowers the name conflict probability in large projects. Use using-declarations or namespace-alias-definition per your project guidelines. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a855afd89defaf8feeb606e34b303dd97" name="a855afd89defaf8feeb606e34b303dd97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a855afd89defaf8feeb606e34b303dd97">&#9670;&#160;</a></span>ᴀʙᵀ</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a855afd89defaf8feeb606e34b303dd97">fcarouge::ᴀʙᵀ</a> = <a class="el" href="#acd5b06c86fbc7f4790315e50578d4e13">evaluate</a>&lt;<a class="el" href="#ae572d5a48afe03765d8e55617ea78689">product</a>&lt;Lhs, <a class="el" href="#a63023be73bdc7d43cd7053035230ae34">transpose</a>&lt;Rhs&gt;&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The evaluated type of the ABᵀ expression. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00211">211</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="ad06bb441aa2dcec149c52de0c297a967" name="ad06bb441aa2dcec149c52de0c297a967"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad06bb441aa2dcec149c52de0c297a967">&#9670;&#160;</a></span>column_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a3aae575a4aa6b608a99d02f58b0fc86c">fcarouge::column_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, 1&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scalar type indexed-based column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>
<p>Scalar type indexed-based column vector with naive implementations.</p>
<p>Coroutine lazy column vector. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="a2b9209137b760e121bcfe9bac7dcacc0" name="a2b9209137b760e121bcfe9bac7dcacc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b9209137b760e121bcfe9bac7dcacc0">&#9670;&#160;</a></span>divide</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a2b9209137b760e121bcfe9bac7dcacc0">fcarouge::divide</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;divider&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Divider helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00153">153</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a463eb0fdde0b3d3ea64b5a16fa95b253" name="a463eb0fdde0b3d3ea64b5a16fa95b253"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a463eb0fdde0b3d3ea64b5a16fa95b253">&#9670;&#160;</a></span>empty_tuple</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a463eb0fdde0b3d3ea64b5a16fa95b253">fcarouge::empty_tuple</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#aba5eb00c20ad829026fe88a48785307d">internal::empty_tuple</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the empty tuple. </p>
<p>A tuple with no <code>pack</code> types. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00194">194</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="acd5b06c86fbc7f4790315e50578d4e13" name="acd5b06c86fbc7f4790315e50578d4e13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd5b06c86fbc7f4790315e50578d4e13">&#9670;&#160;</a></span>evaluate</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#acd5b06c86fbc7f4790315e50578d4e13">fcarouge::evaluate</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1evaluater.xhtml">evaluater</a>&lt;Type&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluater helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00163">163</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a88ffaddfc70067199a9f22246b9d7220" name="a88ffaddfc70067199a9f22246b9d7220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88ffaddfc70067199a9f22246b9d7220">&#9670;&#160;</a></span>first</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">fcarouge::first</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a9b7b21596c593512e73cd0298ff05c47">internal::first</a>&lt;Types...&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unpack the first type of the type template parameter pack. </p>
<p>Shorthand for <code>std::tuple_element_t&lt;0, std::tuple&lt;Types...&gt;&gt;</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00199">199</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a7d51e9ff898a41560f1cd0963356f04c" name="a7d51e9ff898a41560f1cd0963356f04c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d51e9ff898a41560f1cd0963356f04c">&#9670;&#160;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::matrix</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    indexed::matrix&lt;eigen::matrix&lt;Type, Row, Column&gt;, tuple_n_type&lt;Type, Row&gt;,</div>
<div class="line">                    tuple_n_type&lt;Type, Column&gt;&gt;</div>
</div><!-- fragment -->
<p>Scalar type indexed-based matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>
<p>Scalar type indexed-based matrix with naive implementations. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="ae572d5a48afe03765d8e55617ea78689" name="ae572d5a48afe03765d8e55617ea78689"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae572d5a48afe03765d8e55617ea78689">&#9670;&#160;</a></span>product</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#ae572d5a48afe03765d8e55617ea78689">fcarouge::product</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a521b8803424c884bda00ab81bb651455">internal::product</a>&lt;Lhs, Rhs&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The deduced result type of the product. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00207">207</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a9ee3eae5e0b0f9c6c415167c9b0ebe53" name="a9ee3eae5e0b0f9c6c415167c9b0ebe53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">&#9670;&#160;</a></span>quantity</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Representation , auto Reference&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">fcarouge::quantity</a> = mp_units::quantity&lt;Reference, Representation&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The physical unit quantity. </p>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00055">55</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>

</div>
</div>
<a id="a7426c99fa5df210b90d63cd32c0b04f4" name="a7426c99fa5df210b90d63cd32c0b04f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7426c99fa5df210b90d63cd32c0b04f4">&#9670;&#160;</a></span>row_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, auto Column = 1, bool Copyable = false&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#adec4afd23d0a51e3f79d35c0bdd5f39b">fcarouge::row_vector</a> = <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, decltype(Column){1}, Column, Copyable&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Coroutine lazy row vector. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00281">281</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  281</span>{1}, Column, Copyable&gt;;</div>
</div><!-- fragment -->
</div>
</div>
<a id="a63023be73bdc7d43cd7053035230ae34" name="a63023be73bdc7d43cd7053035230ae34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63023be73bdc7d43cd7053035230ae34">&#9670;&#160;</a></span>transpose</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a63023be73bdc7d43cd7053035230ae34">fcarouge::transpose</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1transposer.xhtml">transposer</a>&lt;Type&gt;, const Type &amp;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transposer helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00182">182</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a0c5e16e2c726f4a91a88f3563be340b7" name="a0c5e16e2c726f4a91a88f3563be340b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c5e16e2c726f4a91a88f3563be340b7">&#9670;&#160;</a></span>tuple_n_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a0c5e16e2c726f4a91a88f3563be340b7">fcarouge::tuple_n_type</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a2d608d28c8cff822a3dfaf1daeb0b15e">internal::tuple_n_type</a>&lt;Type, Size&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An alias for making a tuple of the same type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00203">203</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a5ad0022b969a210b7261d0158bc1dd7b" name="a5ad0022b969a210b7261d0158bc1dd7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ad0022b969a210b7261d0158bc1dd7b">&#9670;&#160;</a></span>for_constexpr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fcarouge::for_constexpr </td>
          <td>(</td>
          <td class="paramtype">Function &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>function</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compile-time for loop. </p>
<p>Help compilers with non-type template parameters on members. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00223">223</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  223</span>                                                         {</div>
<div class="line"><span class="lineno">  224</span>  internal::for_constexpr&lt;Begin, End, Increment&gt;(</div>
<div class="line"><span class="lineno">  225</span>      std::forward&lt;Function&gt;(function));</div>
<div class="line"><span class="lineno">  226</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="internal_2utility_8hpp_source.xhtml#l00263">fcarouge::internal::for_constexpr()</a>.</p>

<p class="reference">Referenced by <a class="el" href="predict__linalg__x1x_8cpp_source.xhtml#l00061">fcarouge::benchmark::anonymous_namespace{predict_linalg_x1x.cpp}::bench()</a>, <a class="el" href="update__linalg__xx0_8cpp_source.xhtml#l00061">fcarouge::benchmark::anonymous_namespace{update_linalg_xx0.cpp}::bench()</a>, <a class="el" href="format_8hpp_source.xhtml#l00066">std::formatter&lt; Filter, Char &gt;::format()</a>, and <a class="el" href="indexed_8hpp_source.xhtml#l00125">fcarouge::indexed::matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::matrix()</a>.</p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5ad0022b969a210b7261d0158bc1dd7b_cgraph.svg" width="502" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5ad0022b969a210b7261d0158bc1dd7b_icgraph.svg" width="382" height="307"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae4d1dbbab6a8bdcaa50062d0cb879777" name="ae4d1dbbab6a8bdcaa50062d0cb879777"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4d1dbbab6a8bdcaa50062d0cb879777">&#9670;&#160;</a></span>kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Arguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman </td>
          <td>(</td>
          <td class="paramtype">Arguments...</td>          <td class="paramname"><span class="paramname"><em>arguments</em></span></td><td>)</td>
          <td> -&gt;  kalman&lt; <a class="el" href="namespacefcarouge_1_1internal.xhtml#a0005e5cf17f05f289eaf8a5bc9ffeda5">internal::deduce_filter</a>&lt; Arguments... &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deduces the filter type from its declared configuration. </p>
<p>The configuration arguments passed are used to determine at compile time the type of fiter to use. The objecive is to select the most performant filter within the defined configuraton parameters.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Arguments</td><td>The declarations of the filter configuration.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000025">Todo</a></b></dt><dd><p class="startdd">Should the parameter be named configurations? </p>
<p class="enddd">Should the configuration examples, supports be documented here? </p>
</dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ekf_4x1x0_soaring_8cpp-example.xhtml#a2">ekf_4x1x0_soaring.cpp</a>, <a class="el" href="kf_1x1x0_building_height_8cpp-example.xhtml#a0">kf_1x1x0_building_height.cpp</a>, <a class="el" href="kf_1x1x0_liquid_temperature_8cpp-example.xhtml#a0">kf_1x1x0_liquid_temperature.cpp</a>, <a class="el" href="kf_1x1x1_dog_position_8cpp-example.xhtml#a0">kf_1x1x1_dog_position.cpp</a>, <a class="el" href="kf_2x1x1_rocket_altitude_8cpp-example.xhtml#a2">kf_2x1x1_rocket_altitude.cpp</a>, <a class="el" href="kf_6x2x0_vehicle_location_8cpp-example.xhtml#a2">kf_6x2x0_vehicle_location.cpp</a>, and <a class="el" href="kf_8x4x0_deep_sort_bounding_box_8cpp-example.xhtml#a1">kf_8x4x0_deep_sort_bounding_box.cpp</a>.</dd>
</dl>

</div>
</div>
<a id="ae167596e2c65ae7024cbc80f5b5d1974" name="ae167596e2c65ae7024cbc80f5b5d1974"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae167596e2c65ae7024cbc80f5b5d1974">&#9670;&#160;</a></span>make_generator() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::ranges::range Range&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::generator&lt; typename Range::value_type &gt; fcarouge::make_generator </td>
          <td>(</td>
          <td class="paramtype">Range</td>          <td class="paramname"><span class="paramname"><em>elements</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">67</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   67</span>                               {</div>
<div class="line"><span class="lineno">   68</span>  <span class="keywordflow">return</span> [](<span class="keyword">auto</span> elements_copy)</div>
<div class="line"><span class="lineno">   69</span>             -&gt; std::generator&lt;<span class="keyword">typename</span> <span class="keyword">decltype</span>(elements)::value_type&gt; {</div>
<div class="line"><span class="lineno">   70</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;element : elements_copy) { <span class="comment">// std::ranges::elements_of</span></div>
<div class="line"><span class="lineno">   71</span>      <span class="keyword">co_yield</span> element;</div>
<div class="line"><span class="lineno">   72</span>    }</div>
<div class="line"><span class="lineno">   73</span>  }(elements);</div>
<div class="line"><span class="lineno">   74</span>}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::clone()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00200">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::explicit()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00165">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::matrix()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00236">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator()()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00260">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator()()</a>, <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00364">operator==()</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00225">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::operator[]()</a>.</p>
<div id="dynsection-2" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_ae167596e2c65ae7024cbc80f5b5d1974_icgraph.svg" width="624" height="356"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a34cda4cdb141fdaa3b43f3973585e4b1" name="a34cda4cdb141fdaa3b43f3973585e4b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34cda4cdb141fdaa3b43f3973585e4b1">&#9670;&#160;</a></span>make_generator() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_generator </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>element</em></span></td><td>)</td>
          <td> -&gt; std::generator&lt;Type&gt; </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00078">78</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   78</span>                                                                         {</div>
<div class="line"><span class="lineno">   79</span>  <span class="keywordflow">return</span> [](Type element_copy) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">   80</span>    <span class="keyword">co_yield</span> element_copy;</div>
<div class="line"><span class="lineno">   81</span>  }(element);</div>
<div class="line"><span class="lineno">   82</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a36b1c08e7faa5e078cd8c56e4acd8a54" name="a36b1c08e7faa5e078cd8c56e4acd8a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b1c08e7faa5e078cd8c56e4acd8a54">&#9670;&#160;</a></span>matrix() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Type</em></span>(&amp;)[Row]</td><td>)</td>
          <td> -&gt;  matrix&lt; Type, Row, 1 &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac0175c0b371513180978bbdb30909c54" name="ac0175c0b371513180978bbdb30909c54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0175c0b371513180978bbdb30909c54">&#9670;&#160;</a></span>matrix() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Type</em></span>(&amp;)[Row][Column]</td><td>)</td>
          <td> -&gt;  matrix&lt; Type, Row, Column &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9268087b30b9b76ebd787d0d80f75af6" name="a9268087b30b9b76ebd787d0d80f75af6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9268087b30b9b76ebd787d0d80f75af6">&#9670;&#160;</a></span>matrix() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types, auto... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;<a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt;Types...&gt;, Types&gt;...&gt; &amp;&amp; ((Columns == <a class="el" href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">first_v</a>&lt;Columns&gt;) &amp;&amp; ... &amp;&amp; true))</div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Types</em></span>(&amp;...rows)[Columns]</td><td>)</td>
          <td> -&gt;  matrix&lt; std::remove_cvref_t&lt; <a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt; Types... &gt; &gt;, sizeof...(Columns),(Columns,...)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4833d152f612bead262723ae23039575" name="a4833d152f612bead262723ae23039575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4833d152f612bead262723ae23039575">&#9670;&#160;</a></span>matrix() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::matrix </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  matrix&lt; Type, 1, 1 &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0647c4efb9c02b9ea365aacec50e4ae0" name="a0647c4efb9c02b9ea365aacec50e4ae0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0647c4efb9c02b9ea365aacec50e4ae0">&#9670;&#160;</a></span>operator*() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">arithmetic auto</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00395">395</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  395</span>                                                              {</div>
<div class="line"><span class="lineno">  396</span>  <span class="keyword">auto</span> next{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  397</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next) {</div>
<div class="line"><span class="lineno">  398</span>    <span class="keyword">co_yield</span> *next *rhs;</div>
<div class="line"><span class="lineno">  399</span>  }</div>
<div class="line"><span class="lineno">  400</span>}</div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ac6248dacd7be4fb05540b8ab2956cb7b"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">fcarouge::matrix::begin</a></div><div class="ttdeci">auto begin() const</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">linalg.hpp:273</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-3" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a0647c4efb9c02b9ea365aacec50e4ae0_cgraph.svg" width="338" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5f46009dfa013275132875c5be3ab85c" name="a5f46009dfa013275132875c5be3ab85c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f46009dfa013275132875c5be3ab85c">&#9670;&#160;</a></span>operator*() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, 1 &gt; fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Size &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Size, 1 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00378">378</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  379</span>                                                                               {</div>
<div class="line"><span class="lineno">  380</span>  <span class="comment">// fix me?</span></div>
<div class="line"><span class="lineno">  381</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  382</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {       <span class="comment">// chunk_by_rows</span></div>
<div class="line"><span class="lineno">  383</span>    matrix&lt;Type, Size, 1&gt; rhs_copy{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>()}; <span class="comment">// repeat_n</span></div>
<div class="line"><span class="lineno">  384</span>    <span class="keyword">auto</span> next2{rhs_copy.begin()};</div>
<div class="line"><span class="lineno">  385</span>    Type <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">element</a>{}; <span class="comment">// inner_product?</span></div>
<div class="line"><span class="lineno">  386</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Size) k{0}; k &lt; Size; ++k, ++next1, ++next2) {</div>
<div class="line"><span class="lineno">  387</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">element</a> += *next1 * *next2;</div>
<div class="line"><span class="lineno">  388</span>    }</div>
<div class="line"><span class="lineno">  389</span>    <span class="keyword">co_yield</span> <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">element</a>;</div>
<div class="line"><span class="lineno">  390</span>  }</div>
<div class="line"><span class="lineno">  391</span>}</div>
<div class="ttc" id="anamespacefcarouge_1_1indexed_xhtml_a2f189c0e6996a3a73eab75bf5004f901"><div class="ttname"><a href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">fcarouge::indexed::element</a></div><div class="ttdeci">product&lt; std::tuple_element_t&lt; RowIndex, RowIndexes &gt;, std::tuple_element_t&lt; ColumnIndex, ColumnIndexes &gt; &gt; element</div><div class="ttdef"><b>Definition</b> <a href="indexed_8hpp_source.xhtml#l00060">indexed.hpp:60</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a3d43f3ebeab72104b65bc49131d293fc"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">fcarouge::matrix::clone</a></div><div class="ttdeci">constexpr std::generator&lt; Type &gt; clone() const</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">linalg.hpp:186</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00186">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::clone()</a>.</p>
<div id="dynsection-4" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5f46009dfa013275132875c5be3ab85c_cgraph.svg" width="556" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a37839500158d123b7bdc6824a025f0bc" name="a37839500158d123b7bdc6824a025f0bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37839500158d123b7bdc6824a025f0bc">&#9670;&#160;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00410">410</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  410</span>                                                                        {</div>
<div class="line"><span class="lineno">  411</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  412</span>  <span class="keyword">auto</span> next2{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><span class="lineno">  413</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next1, ++next2) {</div>
<div class="line"><span class="lineno">  414</span>    <span class="keyword">co_yield</span> *next1 + *next2;</div>
<div class="line"><span class="lineno">  415</span>  }</div>
<div class="line"><span class="lineno">  416</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-5" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a37839500158d123b7bdc6824a025f0bc_cgraph.svg" width="340" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a214880fe1dfe8701212c14c9ece44013" name="a214880fe1dfe8701212c14c9ece44013"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a214880fe1dfe8701212c14c9ece44013">&#9670;&#160;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt; fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, 1, 1 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00403">403</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  404</span>                                                                          {</div>
<div class="line"><span class="lineno">  405</span>  <span class="keyword">co_yield</span> lhs + *rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>();</div>
<div class="line"><span class="lineno">  406</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00273">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::begin()</a>.</p>
<div id="dynsection-6" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a214880fe1dfe8701212c14c9ece44013_cgraph.svg" width="340" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a62fb05e2f569f36e8cac44a90ccbc106" name="a62fb05e2f569f36e8cac44a90ccbc106"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62fb05e2f569f36e8cac44a90ccbc106">&#9670;&#160;</a></span>operator==() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::invocable L&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00353">353</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  353</span>                                                        {</div>
<div class="line"><span class="lineno">  354</span>  <span class="keywordflow">return</span> lhs() == rhs();</div>
<div class="line"><span class="lineno">  355</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a47d78fa7b2fbab1fdec6f6e30d6b1da0" name="a47d78fa7b2fbab1fdec6f6e30d6b1da0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47d78fa7b2fbab1fdec6f6e30d6b1da0">&#9670;&#160;</a></span>operator==() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::invocable L, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype">L</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00357">357</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  357</span>                                                                    {</div>
<div class="line"><span class="lineno">  358</span>  <span class="keywordflow">return</span> lhs() == rhs;</div>
<div class="line"><span class="lineno">  359</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a84939a609e68330c2689aff14d978311" name="a84939a609e68330c2689aff14d978311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84939a609e68330c2689aff14d978311">&#9670;&#160;</a></span>operator==() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column, bool CopyableOrNot1, bool CopyableOrNot2&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot1 &gt;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column, CopyableOrNot2 &gt;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00364">364</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  365</span>                                                          {</div>
<div class="line"><span class="lineno">  366</span>  std::array&lt;Type, Row * Column&gt; lhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><span class="lineno">  367</span>  std::ranges::copy(lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, lhs_elements.begin());</div>
<div class="line"><span class="lineno">  368</span>  lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(lhs_elements);</div>
<div class="line"><span class="lineno">  369</span> </div>
<div class="line"><span class="lineno">  370</span>  std::array&lt;Type, Row * Column&gt; rhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><span class="lineno">  371</span>  std::ranges::copy(rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, rhs_elements.begin());</div>
<div class="line"><span class="lineno">  372</span>  rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(rhs_elements);</div>
<div class="line"><span class="lineno">  373</span> </div>
<div class="line"><span class="lineno">  374</span>  <span class="keywordflow">return</span> lhs_elements == rhs_elements;</div>
<div class="line"><span class="lineno">  375</span>}</div>
<div class="ttc" id="anamespacefcarouge_xhtml_ae167596e2c65ae7024cbc80f5b5d1974"><div class="ttname"><a href="#ae167596e2c65ae7024cbc80f5b5d1974">fcarouge::make_generator</a></div><div class="ttdeci">constexpr std::generator&lt; typename Range::value_type &gt; make_generator(Range elements)</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">linalg.hpp:67</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a345b32af8d533e28e162b7757e23d2ec"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">fcarouge::matrix::genie</a></div><div class="ttdeci">generator genie</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00276">linalg.hpp:276</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00276">fcarouge::matrix&lt; Type, Row, Column, Copyable &gt;::genie</a>, and <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00067">make_generator()</a>.</p>
<div id="dynsection-7" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a84939a609e68330c2689aff14d978311_cgraph.svg" width="370" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abb7d0eaceb29f78f64bff07a52fe5824" name="abb7d0eaceb29f78f64bff07a52fe5824"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb7d0eaceb29f78f64bff07a52fe5824">&#9670;&#160;</a></span>operator|()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator| </td>
          <td>(</td>
          <td class="paramtype">Filter &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>filter</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a></td>          <td class="paramname"><span class="paramname"><em>decorator</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="printer_8hpp_source.xhtml#l00092">92</a> of file <a class="el" href="printer_8hpp_source.xhtml">printer.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   92</span>                                                                               {</div>
<div class="line"><span class="lineno">   93</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="classfcarouge_1_1decorator_1_1printer.xhtml">decorator::printer&lt;Filter&gt;</a>(std::forward&lt;Filter&gt;(filter));</div>
<div class="line"><span class="lineno">   94</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1decorator_1_1printer_xhtml"><div class="ttname"><a href="classfcarouge_1_1decorator_1_1printer.xhtml">fcarouge::decorator::printer</a></div><div class="ttdoc">Decorates a filter with operation printing.</div><div class="ttdef"><b>Definition</b> <a href="printer_8hpp_source.xhtml#l00050">printer.hpp:50</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d1b555b919a51d9ef29849f6e86b48a" name="a5d1b555b919a51d9ef29849f6e86b48a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d1b555b919a51d9ef29849f6e86b48a">&#9670;&#160;</a></span>t()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::t </td>
          <td>(</td>
          <td class="paramtype">const Type &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transpose helper function. </p>
<p>Enable readable linear algebra notation. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00187">187</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  187</span>                                                   {</div>
<div class="line"><span class="lineno">  188</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1transposer.xhtml">transposer&lt;Type&gt;</a>{}(value);</div>
<div class="line"><span class="lineno">  189</span>}</div>
<div class="ttc" id="astructfcarouge_1_1transposer_xhtml"><div class="ttname"><a href="structfcarouge_1_1transposer.xhtml">fcarouge::transposer</a></div><div class="ttdoc">Linear algebra transposer specialization point.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00166">utility.hpp:166</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="indexed_8hpp_source.xhtml#l00412">fcarouge::transposer&lt; IndexedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;::operator()()</a>.</p>
<div id="dynsection-8" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5d1b555b919a51d9ef29849f6e86b48a_icgraph.svg" width="332" height="82"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a1e0d4e00e05e1ca7701aa8dfc9681d77" name="a1e0d4e00e05e1ca7701aa8dfc9681d77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">&#9670;&#160;</a></span>first_v</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto... Values&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::first_v {internal::first_v&lt;Values...&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unpack the first value of the non-type template parameter pack. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00241">241</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  241</span>{internal::first_v&lt;Values...&gt;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab1c0921e3b3af3a11420cfe30e308aa7" name="ab1c0921e3b3af3a11420cfe30e308aa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1c0921e3b3af3a11420cfe30e308aa7">&#9670;&#160;</a></span>identity</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::identity</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{internal::not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra identity matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The identity matrix. </p>
<p>User-defined. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00247">247</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  247</span>                              {internal::not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  248</span>    <span class="stringliteral">&quot;Implement the linear algebra identity matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b6de8f96a4b6483d91d1e73683a02d1" name="a7b6de8f96a4b6483d91d1e73683a02d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b6de8f96a4b6483d91d1e73683a02d1">&#9670;&#160;</a></span>identity&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#ab1c0921e3b3af3a11420cfe30e308aa7">fcarouge::identity</a>&lt; Arithmetic &gt; {1}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton identity matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00252">252</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  252</span>{1};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa12d176b9a5533210dd230e7f719c4fb" name="aa12d176b9a5533210dd230e7f719c4fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa12d176b9a5533210dd230e7f719c4fb">&#9670;&#160;</a></span>identity&lt; matrix&lt; Type, Row, Column &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#ab1c0921e3b3af3a11420cfe30e308aa7">fcarouge::identity</a>&lt; <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[](<span class="keyword">auto</span>... args) {</div>
<div class="line">  matrix&lt;Type, Row, Column, true&gt; m{</div>
<div class="line">      make_identity_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line">  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line">    <span class="keywordflow">return</span> m(args...);</div>
<div class="line">  } <span class="keywordflow">else</span> {</div>
<div class="line">    <span class="keywordflow">return</span> m;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p>The identity matrix lazy specialization. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00330">330</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  330</span>                                        {[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><span class="lineno">  331</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{</div>
<div class="line"><span class="lineno">  332</span>      make_identity_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><span class="lineno">  333</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><span class="lineno">  334</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><span class="lineno">  335</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><span class="lineno">  336</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><span class="lineno">  337</span>  }</div>
<div class="line"><span class="lineno">  338</span>}};</div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml">fcarouge::matrix</a></div><div class="ttdoc">Coroutine lazy matrix.</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00115">linalg.hpp:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab770e1c523d5ae430bb4bbb2199f76d4" name="ab770e1c523d5ae430bb4bbb2199f76d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab770e1c523d5ae430bb4bbb2199f76d4">&#9670;&#160;</a></span>identity&lt; quantity&lt; Representation, Reference &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Representation , auto Reference&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">quantity</a>&lt;Representation, Reference&gt; <a class="el" href="#ab1c0921e3b3af3a11420cfe30e308aa7">fcarouge::identity</a>&lt; <a class="el" href="#a9ee3eae5e0b0f9c6c415167c9b0ebe53">quantity</a>&lt; Representation, Reference &gt; &gt; {1., Reference}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton identity matrix specialization. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000034">Todo</a></b></dt><dd>The identity with units is no longer the identity? Review the idea. </dd></dl>

<p class="definition">Definition at line <a class="el" href="unit_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="unit_8hpp_source.xhtml">unit.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   62</span>{1., Reference};</div>
</div><!-- fragment -->
</div>
</div>
<a id="af940cca4b42248e5ef4460d697c2bfb3" name="af940cca4b42248e5ef4460d697c2bfb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af940cca4b42248e5ef4460d697c2bfb3">&#9670;&#160;</a></span>identity&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#ab1c0921e3b3af3a11420cfe30e308aa7">fcarouge::identity</a>&lt; Type &gt; {Type::Identity()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00256">256</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  256</span>{Type::Identity()};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3b0c4f263f282cbb330a4ca6b5ad10d9" name="a3b0c4f263f282cbb330a4ca6b5ad10d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b0c4f263f282cbb330a4ca6b5ad10d9">&#9670;&#160;</a></span>make_identity_generator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_identity_generator</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {</div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Column) j{0}; j &lt; Column; ++j) {</div>
<div class="line">      <span class="keyword">co_yield</span> i == j;</div>
<div class="line">    }</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00310">310</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  310</span>                            {[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">  311</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {</div>
<div class="line"><span class="lineno">  312</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Column) j{0}; j &lt; Column; ++j) {</div>
<div class="line"><span class="lineno">  313</span>      <span class="keyword">co_yield</span> i == j;</div>
<div class="line"><span class="lineno">  314</span>    }</div>
<div class="line"><span class="lineno">  315</span>  }</div>
<div class="line"><span class="lineno">  316</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7fe918283834c2c859a7325fc8d3a563" name="a7fe918283834c2c859a7325fc8d3a563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fe918283834c2c859a7325fc8d3a563">&#9670;&#160;</a></span>make_zero_generator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::make_zero_generator</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line">  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k) {</div>
<div class="line">    <span class="keyword">co_yield</span> 0.0;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00319">319</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  319</span>                        {[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><span class="lineno">  320</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k) {</div>
<div class="line"><span class="lineno">  321</span>    <span class="keyword">co_yield</span> 0.0;</div>
<div class="line"><span class="lineno">  322</span>  }</div>
<div class="line"><span class="lineno">  323</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a44762b6a541e61f07ed2b0477b182829" name="a44762b6a541e61f07ed2b0477b182829"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44762b6a541e61f07ed2b0477b182829">&#9670;&#160;</a></span>printer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1printer__decorator.xhtml">printer_decorator</a> fcarouge::printer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="printer_8hpp_source.xhtml#l00088">88</a> of file <a class="el" href="printer_8hpp_source.xhtml">printer.hpp</a>.</p>

</div>
</div>
<a id="ac4cffefdda8c01a267ce2700c6acb903" name="ac4cffefdda8c01a267ce2700c6acb903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4cffefdda8c01a267ce2700c6acb903">&#9670;&#160;</a></span>size</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Pack &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t fcarouge::size {internal::size&lt;Pack&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of tuple-like types. </p>
<p>Convenient short form. In place of <code>std::tuple_size_v</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00237">237</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  237</span>{internal::size&lt;Pack&gt;};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="format_8hpp_source.xhtml#l00066">std::formatter&lt; Filter, Char &gt;::format()</a>.</p>

</div>
</div>
<a id="aef6fb6c8a265d85709b951506123a5f1" name="aef6fb6c8a265d85709b951506123a5f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef6fb6c8a265d85709b951506123a5f1">&#9670;&#160;</a></span>zero</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::zero</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{internal::not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The zero matrix. </p>
<p>User-defined. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_8x4x0_deep_sort_bounding_box_8cpp-example.xhtml#a3">kf_8x4x0_deep_sort_bounding_box.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00266">266</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  266</span>                          {internal::not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  267</span>    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5567c841761bdb7aac049796d4c43580" name="a5567c841761bdb7aac049796d4c43580"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5567c841761bdb7aac049796d4c43580">&#9670;&#160;</a></span>zero&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; Arithmetic &gt; {0}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton zero matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00271">271</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  271</span>{0};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9b8d7e56d105ac30c247bc5c8960b18b" name="a9b8d7e56d105ac30c247bc5c8960b18b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8d7e56d105ac30c247bc5c8960b18b">&#9670;&#160;</a></span>zero&lt; matrix&lt; Type, Row, Column &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; <a class="el" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[](<span class="keyword">auto</span>... args) {</div>
<div class="line">  matrix&lt;Type, Row, Column, true&gt; m{make_zero_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line">  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line">    <span class="keywordflow">return</span> m(args...);</div>
<div class="line">  } <span class="keywordflow">else</span> {</div>
<div class="line">    <span class="keywordflow">return</span> m;</div>
<div class="line">  }</div>
<div class="line">}}</div>
</div><!-- fragment -->
<p>The zero matrix lazy specialization. </p>

<p class="definition">Definition at line <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00342">342</a> of file <a class="el" href="lazy_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  342</span>                                    {[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><span class="lineno">  343</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{make_zero_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><span class="lineno">  344</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><span class="lineno">  345</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><span class="lineno">  346</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><span class="lineno">  347</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><span class="lineno">  348</span>  }</div>
<div class="line"><span class="lineno">  349</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0283af94a195958399959586dcc8a50" name="ac0283af94a195958399959586dcc8a50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0283af94a195958399959586dcc8a50">&#9670;&#160;</a></span>zero&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; Type &gt; {Type::Zero()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00275">275</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  275</span>{Type::Zero()};</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
