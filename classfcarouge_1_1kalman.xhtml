<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::kalman&lt; Filter &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('classfcarouge_1_1kalman.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="classfcarouge_1_1kalman-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::kalman&lt; Filter &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A generic Kalman filter.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for fcarouge::kalman&lt; Filter &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::kalman&lt; Filter &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:a689ccbd268e26f7a6196e095d08e5d5e" id="r_a689ccbd268e26f7a6196e095d08e5d5e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a689ccbd268e26f7a6196e095d08e5d5e">state</a> = Filter::state</td></tr>
<tr class="memdesc:a689ccbd268e26f7a6196e095d08e5d5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state estimate column vector X.  <br /></td></tr>
<tr class="separator:a689ccbd268e26f7a6196e095d08e5d5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7103b91efb16c1484dc4813170f331c" id="r_ad7103b91efb16c1484dc4813170f331c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad7103b91efb16c1484dc4813170f331c">output</a> = Filter::output</td></tr>
<tr class="memdesc:ad7103b91efb16c1484dc4813170f331c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation column vector Z.  <br /></td></tr>
<tr class="separator:ad7103b91efb16c1484dc4813170f331c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d295d2fd3d932f6991e80dd4f91fa90" id="r_a4d295d2fd3d932f6991e80dd4f91fa90"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4d295d2fd3d932f6991e80dd4f91fa90">estimate_uncertainty</a> = Filter::estimate_uncertainty</td></tr>
<tr class="memdesc:a4d295d2fd3d932f6991e80dd4f91fa90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the estimated correlated variance matrix P.  <br /></td></tr>
<tr class="separator:a4d295d2fd3d932f6991e80dd4f91fa90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2e720099deb214d8bfad6d44a697e19" id="r_ae2e720099deb214d8bfad6d44a697e19"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae2e720099deb214d8bfad6d44a697e19">gain</a> = Filter::gain</td></tr>
<tr class="memdesc:ae2e720099deb214d8bfad6d44a697e19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the gain matrix K.  <br /></td></tr>
<tr class="separator:ae2e720099deb214d8bfad6d44a697e19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a008ea306efec20b4270b64d5c7cc8684" id="r_a008ea306efec20b4270b64d5c7cc8684"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a008ea306efec20b4270b64d5c7cc8684">innovation</a> = Filter::innovation</td></tr>
<tr class="memdesc:a008ea306efec20b4270b64d5c7cc8684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation column vector Y.  <br /></td></tr>
<tr class="separator:a008ea306efec20b4270b64d5c7cc8684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab684f584665a0f2cbf636bdb9c389177" id="r_ab684f584665a0f2cbf636bdb9c389177"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab684f584665a0f2cbf636bdb9c389177">innovation_uncertainty</a> = Filter::innovation_uncertainty</td></tr>
<tr class="memdesc:ab684f584665a0f2cbf636bdb9c389177"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation uncertainty matrix S.  <br /></td></tr>
<tr class="separator:ab684f584665a0f2cbf636bdb9c389177"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Functions</div></td></tr>
<tr class="memitem:aa298812e1628d6497e98fd1778f10e78" id="r_aa298812e1628d6497e98fd1778f10e78"><td class="memTemplParams" colspan="2">template&lt;typename... Arguments&gt; </td></tr>
<tr class="memitem:aa298812e1628d6497e98fd1778f10e78"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa298812e1628d6497e98fd1778f10e78">kalman</a> (Arguments... arguments)</td></tr>
<tr class="memdesc:aa298812e1628d6497e98fd1778f10e78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a Kalman filter from its declared configuration.  <br /></td></tr>
<tr class="separator:aa298812e1628d6497e98fd1778f10e78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19a22aa0c26048398d2edd106d71d708" id="r_a19a22aa0c26048398d2edd106d71d708"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a19a22aa0c26048398d2edd106d71d708">kalman</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other)=delete</td></tr>
<tr class="memdesc:a19a22aa0c26048398d2edd106d71d708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a filter, not implemented.  <br /></td></tr>
<tr class="separator:a19a22aa0c26048398d2edd106d71d708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea38ec45d4b4f93a279727a42a95156f" id="r_aea38ec45d4b4f93a279727a42a95156f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aea38ec45d4b4f93a279727a42a95156f">kalman</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:aea38ec45d4b4f93a279727a42a95156f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a filter.  <br /></td></tr>
<tr class="separator:aea38ec45d4b4f93a279727a42a95156f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93e57bf287eff66d4b4f680ce6b22387" id="r_a93e57bf287eff66d4b4f680ce6b22387"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a93e57bf287eff66d4b4f680ce6b22387">operator=</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=delete</td></tr>
<tr class="memdesc:a93e57bf287eff66d4b4f680ce6b22387"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assigns a filter, not implemented.  <br /></td></tr>
<tr class="separator:a93e57bf287eff66d4b4f680ce6b22387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac10982b357e8a659fdbdc5ba8108fde1" id="r_ac10982b357e8a659fdbdc5ba8108fde1"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac10982b357e8a659fdbdc5ba8108fde1">operator=</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td></tr>
<tr class="memdesc:ac10982b357e8a659fdbdc5ba8108fde1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment operator.  <br /></td></tr>
<tr class="separator:ac10982b357e8a659fdbdc5ba8108fde1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfe65228268bb473e8dc412caac073e" id="r_aabfe65228268bb473e8dc412caac073e"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aabfe65228268bb473e8dc412caac073e">~kalman</a> ()=default</td></tr>
<tr class="memdesc:aabfe65228268bb473e8dc412caac073e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs the Kalman filter.  <br /></td></tr>
<tr class="separator:aabfe65228268bb473e8dc412caac073e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Characteristics Member Functions</div></td></tr>
<tr class="memitem:a6833f2b35051ed9d7583c9f1580cb468" id="r_a6833f2b35051ed9d7583c9f1580cb468"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6833f2b35051ed9d7583c9f1580cb468">x</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:a6833f2b35051ed9d7583c9f1580cb468"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state estimate column vector X.  <br /></td></tr>
<tr class="separator:a6833f2b35051ed9d7583c9f1580cb468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad71db64c384ae44f762968e1260b5288" id="r_ad71db64c384ae44f762968e1260b5288"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad71db64c384ae44f762968e1260b5288">x</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:ad71db64c384ae44f762968e1260b5288"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate column vector X.  <br /></td></tr>
<tr class="separator:ad71db64c384ae44f762968e1260b5288"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af472b78373915354862192fad3409cf6" id="r_af472b78373915354862192fad3409cf6"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af472b78373915354862192fad3409cf6">z</a> () const -&gt; const <a class="el" href="#ad7103b91efb16c1484dc4813170f331c">output</a> &amp;</td></tr>
<tr class="memdesc:af472b78373915354862192fad3409cf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last observation column vector Z.  <br /></td></tr>
<tr class="separator:af472b78373915354862192fad3409cf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa708a663249b2edff7954ab797c6f264" id="r_aa708a663249b2edff7954ab797c6f264"><td class="memItemLeft" align="right" valign="top">constexpr const auto &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa708a663249b2edff7954ab797c6f264">u</a> () const</td></tr>
<tr class="memdesc:aa708a663249b2edff7954ab797c6f264"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last control column vector U.  <br /></td></tr>
<tr class="separator:aa708a663249b2edff7954ab797c6f264"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae010e42bcd9a38f9783bfd78922d1665" id="r_ae010e42bcd9a38f9783bfd78922d1665"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae010e42bcd9a38f9783bfd78922d1665">p</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:ae010e42bcd9a38f9783bfd78922d1665"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the estimated covariance matrix P.  <br /></td></tr>
<tr class="separator:ae010e42bcd9a38f9783bfd78922d1665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa163aabe4065e11faf180e3c10499e0a" id="r_aa163aabe4065e11faf180e3c10499e0a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa163aabe4065e11faf180e3c10499e0a">p</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:aa163aabe4065e11faf180e3c10499e0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <br /></td></tr>
<tr class="separator:aa163aabe4065e11faf180e3c10499e0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd5f75dd30c0bf369c67dd7551410b24" id="r_abd5f75dd30c0bf369c67dd7551410b24"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abd5f75dd30c0bf369c67dd7551410b24">q</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:abd5f75dd30c0bf369c67dd7551410b24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the process noise covariance matrix Q.  <br /></td></tr>
<tr class="separator:abd5f75dd30c0bf369c67dd7551410b24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f948a73fbe510d97c0edd103a2e8496" id="r_a3f948a73fbe510d97c0edd103a2e8496"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3f948a73fbe510d97c0edd103a2e8496">q</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a3f948a73fbe510d97c0edd103a2e8496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <br /></td></tr>
<tr class="separator:a3f948a73fbe510d97c0edd103a2e8496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a115988aa225c4e4ecf8954fbf40de679" id="r_a115988aa225c4e4ecf8954fbf40de679"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a115988aa225c4e4ecf8954fbf40de679">r</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:a115988aa225c4e4ecf8954fbf40de679"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation noise covariance matrix R.  <br /></td></tr>
<tr class="separator:a115988aa225c4e4ecf8954fbf40de679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af849d9c510f08a3bb8d8299139bb1b48" id="r_af849d9c510f08a3bb8d8299139bb1b48"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af849d9c510f08a3bb8d8299139bb1b48">r</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:af849d9c510f08a3bb8d8299139bb1b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <br /></td></tr>
<tr class="separator:af849d9c510f08a3bb8d8299139bb1b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7edb970bed6637452bbcb538325fb2af" id="r_a7edb970bed6637452bbcb538325fb2af"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7edb970bed6637452bbcb538325fb2af">f</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:a7edb970bed6637452bbcb538325fb2af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state transition matrix F.  <br /></td></tr>
<tr class="separator:a7edb970bed6637452bbcb538325fb2af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d3ade7f1c1da5927653caa7f099ba5f" id="r_a7d3ade7f1c1da5927653caa7f099ba5f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7d3ade7f1c1da5927653caa7f099ba5f">f</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a7d3ade7f1c1da5927653caa7f099ba5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <br /></td></tr>
<tr class="separator:a7d3ade7f1c1da5927653caa7f099ba5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af065281b32909b6eb9ea66922a67140b" id="r_af065281b32909b6eb9ea66922a67140b"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af065281b32909b6eb9ea66922a67140b">h</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:af065281b32909b6eb9ea66922a67140b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation transition matrix H.  <br /></td></tr>
<tr class="separator:af065281b32909b6eb9ea66922a67140b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13f02f1873808a2a4c03eaa744c2b8f8" id="r_a13f02f1873808a2a4c03eaa744c2b8f8"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a13f02f1873808a2a4c03eaa744c2b8f8">h</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a13f02f1873808a2a4c03eaa744c2b8f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation transition matrix H.  <br /></td></tr>
<tr class="separator:a13f02f1873808a2a4c03eaa744c2b8f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432c41f9b06ed9b51f84f7a72c06bde3" id="r_a432c41f9b06ed9b51f84f7a72c06bde3"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a432c41f9b06ed9b51f84f7a72c06bde3">g</a> (this auto &amp;&amp;self)</td></tr>
<tr class="memdesc:a432c41f9b06ed9b51f84f7a72c06bde3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control transition matrix G.  <br /></td></tr>
<tr class="separator:a432c41f9b06ed9b51f84f7a72c06bde3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0d25d20732129d098fb3471bfad1e4f" id="r_ad0d25d20732129d098fb3471bfad1e4f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0d25d20732129d098fb3471bfad1e4f">g</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:ad0d25d20732129d098fb3471bfad1e4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <br /></td></tr>
<tr class="separator:ad0d25d20732129d098fb3471bfad1e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae785ab07f5e0f994833ef9eea42a0172" id="r_ae785ab07f5e0f994833ef9eea42a0172"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae785ab07f5e0f994833ef9eea42a0172">k</a> () const -&gt; const <a class="el" href="#ae2e720099deb214d8bfad6d44a697e19">gain</a> &amp;</td></tr>
<tr class="memdesc:ae785ab07f5e0f994833ef9eea42a0172"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the gain matrix K.  <br /></td></tr>
<tr class="separator:ae785ab07f5e0f994833ef9eea42a0172"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5b5c43dcc898eab0391ecc90ff7b328" id="r_af5b5c43dcc898eab0391ecc90ff7b328"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af5b5c43dcc898eab0391ecc90ff7b328">y</a> () const -&gt; const <a class="el" href="#a008ea306efec20b4270b64d5c7cc8684">innovation</a> &amp;</td></tr>
<tr class="memdesc:af5b5c43dcc898eab0391ecc90ff7b328"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation column vector Y.  <br /></td></tr>
<tr class="separator:af5b5c43dcc898eab0391ecc90ff7b328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5df535983dfb9efe819fbbbcc1f89a6" id="r_aa5df535983dfb9efe819fbbbcc1f89a6"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa5df535983dfb9efe819fbbbcc1f89a6">s</a> () const -&gt; const <a class="el" href="#ab684f584665a0f2cbf636bdb9c389177">innovation_uncertainty</a> &amp;</td></tr>
<tr class="memdesc:aa5df535983dfb9efe819fbbbcc1f89a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation uncertainty matrix S.  <br /></td></tr>
<tr class="separator:aa5df535983dfb9efe819fbbbcc1f89a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Filtering Member Functions</div></td></tr>
<tr class="memitem:a54714ec34eba3646ef3913388c90d2ea" id="r_a54714ec34eba3646ef3913388c90d2ea"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a54714ec34eba3646ef3913388c90d2ea">predict</a> (const auto &amp;...arguments)</td></tr>
<tr class="memdesc:a54714ec34eba3646ef3913388c90d2ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Produces estimates of the state variables and uncertainties.  <br /></td></tr>
<tr class="separator:a54714ec34eba3646ef3913388c90d2ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c60c21241e8e12d84a3832917fef235" id="r_a0c60c21241e8e12d84a3832917fef235"><td class="memTemplParams" colspan="2">template&lt;auto Position&gt; </td></tr>
<tr class="memitem:a0c60c21241e8e12d84a3832917fef235"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0c60c21241e8e12d84a3832917fef235">predict</a> () const</td></tr>
<tr class="memdesc:a0c60c21241e8e12d84a3832917fef235"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Nth prediction argument.  <br /></td></tr>
<tr class="separator:a0c60c21241e8e12d84a3832917fef235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a85603ea16cb72f7b7fc3bfedaa90bd" id="r_a4a85603ea16cb72f7b7fc3bfedaa90bd"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a85603ea16cb72f7b7fc3bfedaa90bd">update</a> (const auto &amp;...arguments)</td></tr>
<tr class="memdesc:a4a85603ea16cb72f7b7fc3bfedaa90bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the estimates with the outcome of a measurement.  <br /></td></tr>
<tr class="separator:a4a85603ea16cb72f7b7fc3bfedaa90bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa57cbe8460a2b56e9b82de6720485d67" id="r_aa57cbe8460a2b56e9b82de6720485d67"><td class="memTemplParams" colspan="2">template&lt;auto Position&gt; </td></tr>
<tr class="memitem:aa57cbe8460a2b56e9b82de6720485d67"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa57cbe8460a2b56e9b82de6720485d67">update</a> () const</td></tr>
<tr class="memdesc:aa57cbe8460a2b56e9b82de6720485d67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Nth update argument.  <br /></td></tr>
<tr class="separator:aa57cbe8460a2b56e9b82de6720485d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:af6ca44cd2bb7fa8b3b260b2d09143103" id="r_af6ca44cd2bb7fa8b3b260b2d09143103"><td class="memItemLeft" align="right" valign="top">Filter&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af6ca44cd2bb7fa8b3b260b2d09143103">filter</a></td></tr>
<tr class="memdesc:af6ca44cd2bb7fa8b3b260b2d09143103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates the implementation details of the filter.  <br /></td></tr>
<tr class="separator:af6ca44cd2bb7fa8b3b260b2d09143103"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Filter&gt;<br />
class fcarouge::kalman&lt; Filter &gt;</div><p>A generic Kalman filter. </p>
<p>The Kalman filter is a Bayesian filter that uses multivariate Gaussians, a recursive state estimator, a linear quadratic estimator (LQE), and an Infinite Impulse Response (IIR) filter. It is a control theory tool applicable to signal estimation, sensor fusion, or data assimilation problems. The filter is applicable for unimodal and uncorrelated uncertainties. The filter assumes white noise, propagation and measurement functions are differentiable, and that the uncertainty stays centered on the state estimate. The filter is the optimal linear filter under assumptions. The filter updates estimates by multiplying Gaussians and predicts estimates by adding Gaussians. Designing a filter is as much art as science. Design the state $X$, $P$, the process $F$, $Q$, the measurement $Z$, $R$, the measurement function $H$, and if the system has control inputs $U$, $G$.</p>
<p>This library supports various simple and extended filters. The implementation is independent from linear algebra backends. Arbitrary parameters can be added to the prediction and update stages to participate in gain-scheduling or linear parameter varying (LPV) systems. The default filter type is a generalized, customizable, and extended filter. The default type parameters implement a one-state, one-output, and double-precision floating-point type filter. The default update equation uses the Joseph form. Examples illustrate various usages and implementation tradeoffs. A standard formatter specialization is included for representation of the filter states. Filters with <code>state x output x input</code> dimensions as 1x1x1 and 1x1x0 (no input) are supported through vanilla C++. Higher dimension filters require a linear algebra backend. Customization points and type injections allow for implementation tradeoffs.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Filter</td><td>Exposition only. The deduced internal filter template parameter. Class template argument deduction (CTAD) figures out the filter type based on the declared configuration. See deduction guide. The internal implementation, filtering strategies, and presence of members vary based on the constructed, configured, declared, or deduced filter.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000023">Todo</a></b></dt><dd><p class="startdd">Make this class usable in constant expressions. </p>
<p class="interdd">Is this filter restricted to Newton's equations of motion? That is only a discretized continuous-time kinematic filter? How about non-Newtonian systems? </p>
<p class="interdd">Symmetrization support might be superfluous. How to confirm it is safe to remove? Optional? </p>
<p class="interdd">Would we want to support smoothers? </p>
<p class="interdd">Prepare support for larger dataset recording for graphing, metrics of large test data to facilitate tuning. </p>
<p class="interdd">Support filter generator from equation? Third party integration? </p>
<p class="interdd">Compare performance of general filter with its equivalent generated? </p>
<p class="interdd">Support ranges operator filter? </p>
<p class="interdd">Support mux pipes <a href="https://github.com/joboccara/pipes">https://github.com/joboccara/pipes</a> operator filter? </p>
<p class="interdd">Reproduce Ardupilot's inertial navigation EKF and comparison benchmarks in SITL (software in the loop simulation). </p>
<p class="interdd">Should we provide the operator[] for the vector characteristics regardless of implementation? And for the matrix ones too? It could simplify client code. </p>
<p class="interdd">Should we provide the operator[] for state directly on the filter? Is the state X always what the user would want? </p>
<p class="interdd">Support, test complex number filters? </p>
<p class="interdd">Use automatic (Eigen::AutoDiffScalar?), symbolic, numerical solvers to define the filter characteristics and simplify solving the dynamic system for non-mathematicians. </p>
<p class="interdd">Should we add back the call operator? How to resolve the update/predict ordering? And parameter ordering? </p>
<p class="interdd">Should we support the noise cross covariance <code>N = E[wvᵀ]</code> for correlated noise sources, with default to null? </p>
<p class="enddd">Can we implement Temporal Parallelization of Bayesian Smoothers, Simo Sarkka, Senior Member, IEEE, Angel F. Garc ıa-Fernandez, <a href="https://arxiv.org/pdf/1905.13002.pdf">https://arxiv.org/pdf/1905.13002.pdf</a> ? GPU implementation? Parallel implementation? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00126">126</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a4d295d2fd3d932f6991e80dd4f91fa90" name="a4d295d2fd3d932f6991e80dd4f91fa90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d295d2fd3d932f6991e80dd4f91fa90">&#9670;&#160;</a></span>estimate_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::estimate_uncertainty = Filter::estimate_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the estimated correlated variance matrix P. </p>
<p>Also known as Σ. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00154">154</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ae2e720099deb214d8bfad6d44a697e19" name="ae2e720099deb214d8bfad6d44a697e19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2e720099deb214d8bfad6d44a697e19">&#9670;&#160;</a></span>gain</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::gain = Filter::gain</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the gain matrix K. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00157">157</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a008ea306efec20b4270b64d5c7cc8684" name="a008ea306efec20b4270b64d5c7cc8684"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a008ea306efec20b4270b64d5c7cc8684">&#9670;&#160;</a></span>innovation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::innovation = Filter::innovation</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation column vector Y. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00160">160</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ab684f584665a0f2cbf636bdb9c389177" name="ab684f584665a0f2cbf636bdb9c389177"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab684f584665a0f2cbf636bdb9c389177">&#9670;&#160;</a></span>innovation_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::innovation_uncertainty = Filter::innovation_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation uncertainty matrix S. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00163">163</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ad7103b91efb16c1484dc4813170f331c" name="ad7103b91efb16c1484dc4813170f331c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7103b91efb16c1484dc4813170f331c">&#9670;&#160;</a></span>output</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::output = Filter::output</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation column vector Z. </p>
<p>Also known as Y or O. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00149">149</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a689ccbd268e26f7a6196e095d08e5d5e" name="a689ccbd268e26f7a6196e095d08e5d5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a689ccbd268e26f7a6196e095d08e5d5e">&#9670;&#160;</a></span>state</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::state = Filter::state</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state estimate column vector X. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00144">144</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa298812e1628d6497e98fd1778f10e78" name="aa298812e1628d6497e98fd1778f10e78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa298812e1628d6497e98fd1778f10e78">&#9670;&#160;</a></span>kalman() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<div class="memtemplate">
template&lt;typename... Arguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::kalman </td>
          <td>(</td>
          <td class="paramtype">Arguments...</td>          <td class="paramname"><span class="paramname"><em>arguments</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a Kalman filter from its declared configuration. </p>
<dl class="section see"><dt>See also</dt><dd>Deduction guide for details.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a19a22aa0c26048398d2edd106d71d708" name="a19a22aa0c26048398d2edd106d71d708"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19a22aa0c26048398d2edd106d71d708">&#9670;&#160;</a></span>kalman() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::kalman </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Filter &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructs a filter, not implemented. </p>

</div>
</div>
<a id="aea38ec45d4b4f93a279727a42a95156f" name="aea38ec45d4b4f93a279727a42a95156f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea38ec45d4b4f93a279727a42a95156f">&#9670;&#160;</a></span>kalman() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::kalman </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Filter &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructs a filter. </p>
<dl class="section warning"><dt>Warning</dt><dd>Some filter types have a known move memory safety defect.</dd></dl>
<p>Move constructor. Constructs the filter with the contents of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aabfe65228268bb473e8dc412caac073e" name="aabfe65228268bb473e8dc412caac073e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabfe65228268bb473e8dc412caac073e">&#9670;&#160;</a></span>~kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::~<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructs the Kalman filter. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7d3ade7f1c1da5927653caa7f099ba5f" name="a7d3ade7f1c1da5927653caa7f099ba5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d3ade7f1c1da5927653caa7f099ba5f">&#9670;&#160;</a></span>f() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<p>The state transition matrix F is of type <code>state_transition</code> and the function is of the form <code>state_transition(const state &amp;, const input ! &amp;, const PredictionTypes &amp;...)</code>. For non-linear system, or extended filter, F is the Jacobian of the state transition function: <code>F = ∂f/∂X = ! ∂fj/∂xi</code> that is each row i contains the derivatives of the state transition function for every element j in the state column vector X.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the copied state transition matrix F or the copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the state transition matrix F function on prediction steps. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a7edb970bed6637452bbcb538325fb2af" name="a7edb970bed6637452bbcb538325fb2af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7edb970bed6637452bbcb538325fb2af">&#9670;&#160;</a></span>f() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::f </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state transition matrix F. </p>
<dl class="section return"><dt>Returns</dt><dd>The state transition matrix F.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="ad0d25d20732129d098fb3471bfad1e4f" name="ad0d25d20732129d098fb3471bfad1e4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0d25d20732129d098fb3471bfad1e4f">&#9670;&#160;</a></span>g() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<p>The control transition matrix G is of type <code>input_control</code> and the function is of the form <code>input_control(const PredictionTypes &amp;...)</code>. This member function is not present when the filter has no input control.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the copied control transition matrix G or the copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the control transition matrix G on prediction steps. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a432c41f9b06ed9b51f84f7a72c06bde3" name="a432c41f9b06ed9b51f84f7a72c06bde3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a432c41f9b06ed9b51f84f7a72c06bde3">&#9670;&#160;</a></span>g() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::g </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control transition matrix G. </p>
<p>This member function is not present when the filter has no input control.</p>
<dl class="section return"><dt>Returns</dt><dd>The control transition matrix G.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000026">Todo</a></b></dt><dd>Do we still need the non-const flavor?</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a13f02f1873808a2a4c03eaa744c2b8f8" name="a13f02f1873808a2a4c03eaa744c2b8f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13f02f1873808a2a4c03eaa744c2b8f8">&#9670;&#160;</a></span>h() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation transition matrix H. </p>
<p>The observation transition matrix H is of type <code>output_model</code> and the function is of the form <code>output_model(const state &amp;, const UpdateTypes ! &amp;...)</code>. For non-linear system, or extended filter, H is the Jacobian of the state observation function: <code>H = ∂h/∂X = ∂hj/∂xi</code> that is each row i contains the derivatives of the state observation function for every element j in the state column vector X. This member function is not present when the filter has no output model.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the copied observation transition matrix H or the copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the observation, measurement transition matrix H on update steps. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the observation transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="af065281b32909b6eb9ea66922a67140b" name="af065281b32909b6eb9ea66922a67140b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af065281b32909b6eb9ea66922a67140b">&#9670;&#160;</a></span>h() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::h </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation transition matrix H. </p>
<p>This member function is not present when the filter has no output model.</p>
<dl class="section return"><dt>Returns</dt><dd>The observation, measurement transition matrix H.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="ae785ab07f5e0f994833ef9eea42a0172" name="ae785ab07f5e0f994833ef9eea42a0172"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae785ab07f5e0f994833ef9eea42a0172">&#9670;&#160;</a></span>k()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::k </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  const <a class="el" href="#ae2e720099deb214d8bfad6d44a697e19">gain</a> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the gain matrix K. </p>
<dl class="section return"><dt>Returns</dt><dd>The gain matrix K.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a93e57bf287eff66d4b4f680ce6b22387" name="a93e57bf287eff66d4b4f680ce6b22387"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93e57bf287eff66d4b4f680ce6b22387">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Filter &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=delete</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assigns a filter, not implemented. </p>

</div>
</div>
<a id="ac10982b357e8a659fdbdc5ba8108fde1" name="ac10982b357e8a659fdbdc5ba8108fde1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac10982b357e8a659fdbdc5ba8108fde1">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Filter &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment operator. </p>
<dl class="section warning"><dt>Warning</dt><dd>Some filter types have a known move memory safety defect.</dd></dl>
<p>Replaces the contents of the filter with those of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter). The other filter is in a valid but unspecified state afterwards.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa163aabe4065e11faf180e3c10499e0a" name="aa163aabe4065e11faf180e3c10499e0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa163aabe4065e11faf180e3c10499e0a">&#9670;&#160;</a></span>p() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the estimated covariance matrix P. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="ae010e42bcd9a38f9783bfd78922d1665" name="ae010e42bcd9a38f9783bfd78922d1665"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae010e42bcd9a38f9783bfd78922d1665">&#9670;&#160;</a></span>p() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::p </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the estimated covariance matrix P. </p>
<dl class="section return"><dt>Returns</dt><dd>The estimated correlated variance matrix P.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a0c60c21241e8e12d84a3832917fef235" name="a0c60c21241e8e12d84a3832917fef235"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c60c21241e8e12d84a3832917fef235">&#9670;&#160;</a></span>predict() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<div class="memtemplate">
template&lt;auto Position&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::predict </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the Nth prediction argument. </p>
<p>Convenience access to the last used prediction arguments.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">The</td><td>non-type template parameter index position of the prediction argument types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The prediction argument corresponding to the Nth position of the parameter pack of the tuple <code>PredictionTypes</code> class template type.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a54714ec34eba3646ef3913388c90d2ea" name="a54714ec34eba3646ef3913388c90d2ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54714ec34eba3646ef3913388c90d2ea">&#9670;&#160;</a></span>predict() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::predict </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>arguments</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Produces estimates of the state variables and uncertainties. </p>
<p>Also known as the propagation step. Implements the total probability theorem. Estimate the next state by suming the known probabilities.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>The prediction and input parameters of the filter, in that order. The arguments need to be compatible with the filter types. The prediction parameters convertible to the <code>PredictionTypes</code> template pack types are passed through for computations of prediction matrices. The control parameter pack types convertible to the <code>Input</code> template type. The prediction types are explicitly defined with the class definition.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000028">Todo</a></b></dt><dd><p class="startdd">Consider if returning the state column vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
<p class="enddd">Can the parameter pack of <code>PredictionTypes</code> be explicit in the method declaration for user clarity? </p>
</dd></dl>

</div>
</div>
<a id="a3f948a73fbe510d97c0edd103a2e8496" name="a3f948a73fbe510d97c0edd103a2e8496"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f948a73fbe510d97c0edd103a2e8496">&#9670;&#160;</a></span>q() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the process noise covariance matrix Q is of type <code>process_uncertainty</code> and the function is of the form <code>process_uncertainty(const state &amp;, const PredictionTypes ! &amp;...)</code>. The copied process noise covariance matrix Q or the copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the process noise covariance matrix Q on prediction steps. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="abd5f75dd30c0bf369c67dd7551410b24" name="abd5f75dd30c0bf369c67dd7551410b24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd5f75dd30c0bf369c67dd7551410b24">&#9670;&#160;</a></span>q() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::q </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the process noise covariance matrix Q. </p>
<dl class="section return"><dt>Returns</dt><dd>The process noise correlated variance matrix Q.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="af849d9c510f08a3bb8d8299139bb1b48" name="af849d9c510f08a3bb8d8299139bb1b48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af849d9c510f08a3bb8d8299139bb1b48">&#9670;&#160;</a></span>r() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the observation noise covariance matrix R is of type <code>output_uncertainty</code> and the function is of the form <code>output_uncertainty(const state &amp;, const output &amp;, const ! UpdateTypes &amp;...)</code>. The copied observation noise covariance matrix R or the copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called by the filter to compute the observation noise covariance matrix R on prediction steps. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a115988aa225c4e4ecf8954fbf40de679" name="a115988aa225c4e4ecf8954fbf40de679"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a115988aa225c4e4ecf8954fbf40de679">&#9670;&#160;</a></span>r() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::r </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation noise covariance matrix R. </p>
<p>The variance there is in each measurement.</p>
<dl class="section return"><dt>Returns</dt><dd>The observation noise correlated variance matrix R.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa5df535983dfb9efe819fbbbcc1f89a6" name="aa5df535983dfb9efe819fbbbcc1f89a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5df535983dfb9efe819fbbbcc1f89a6">&#9670;&#160;</a></span>s()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::s </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  const <a class="el" href="#ab684f584665a0f2cbf636bdb9c389177">innovation_uncertainty</a> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation uncertainty matrix S. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation uncertainty matrix S.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa708a663249b2edff7954ab797c6f264" name="aa708a663249b2edff7954ab797c6f264"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa708a663249b2edff7954ab797c6f264">&#9670;&#160;</a></span>u()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const auto &amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::u </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the last control column vector U. </p>
<p>This member function is not present when the filter has no input.</p>
<dl class="section return"><dt>Returns</dt><dd>The last control column vector U.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa57cbe8460a2b56e9b82de6720485d67" name="aa57cbe8460a2b56e9b82de6720485d67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa57cbe8460a2b56e9b82de6720485d67">&#9670;&#160;</a></span>update() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<div class="memtemplate">
template&lt;auto Position&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::update </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the Nth update argument. </p>
<p>Convenience access to the last used update arguments.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">The</td><td>non-type template parameter index position of the update argument types.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The update argument corresponding to the Nth position of the parameter pack of the tuple <code>UpdateTypes</code> class template type.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a4a85603ea16cb72f7b7fc3bfedaa90bd" name="a4a85603ea16cb72f7b7fc3bfedaa90bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a85603ea16cb72f7b7fc3bfedaa90bd">&#9670;&#160;</a></span>update() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::update </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>arguments</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the estimates with the outcome of a measurement. </p>
<p>Also known as the observation or correction step. Implements the Bayes' theorem. Combine one measurement and the prior estimate by applying the multiplicative law.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>The update and output parameters of the filter, in that order. The arguments need to be compatible with the filter types. The update parameters convertible to the <code>UpdateTypes</code> template pack types are passed through for computations of update matrices. The observation parameter pack types convertible to the <code>Output</code> template type. The update types are explicitly defined with the class definition.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000029">Todo</a></b></dt><dd><p class="startdd">Consider if returning the state column vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
<p class="enddd">Can the parameter pack of <code>UpdateTypes</code> be explicit in the method declaration for user clarity? </p>
</dd></dl>

</div>
</div>
<a id="ad71db64c384ae44f762968e1260b5288" name="ad71db64c384ae44f762968e1260b5288"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad71db64c384ae44f762968e1260b5288">&#9670;&#160;</a></span>x() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate column vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the state estimate column vector X. </td></tr>
    <tr><td class="paramname">values</td><td>The optional second and other copied initializers to set the state estimate column vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a6833f2b35051ed9d7583c9f1580cb468" name="a6833f2b35051ed9d7583c9f1580cb468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6833f2b35051ed9d7583c9f1580cb468">&#9670;&#160;</a></span>x() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::x </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state estimate column vector X. </p>
<dl class="section return"><dt>Returns</dt><dd>The state estimate column vector X.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Overloading the operator dot would have been nice had it existed. </dd></dl>

</div>
</div>
<a id="af5b5c43dcc898eab0391ecc90ff7b328" name="af5b5c43dcc898eab0391ecc90ff7b328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5b5c43dcc898eab0391ecc90ff7b328">&#9670;&#160;</a></span>y()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::y </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  const <a class="el" href="#a008ea306efec20b4270b64d5c7cc8684">innovation</a> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation column vector Y. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation column vector Y.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000027">Todo</a></b></dt><dd>Add measurement post-fit residual by default and example? </dd></dl>

</div>
</div>
<a id="af472b78373915354862192fad3409cf6" name="af472b78373915354862192fad3409cf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af472b78373915354862192fad3409cf6">&#9670;&#160;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::z </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  const <a class="el" href="#ad7103b91efb16c1484dc4813170f331c">output</a> &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the last observation column vector Z. </p>
<dl class="section return"><dt>Returns</dt><dd>The last observation column vector Z.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af6ca44cd2bb7fa8b3b260b2d09143103" name="af6ca44cd2bb7fa8b3b260b2d09143103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6ca44cd2bb7fa8b3b260b2d09143103">&#9670;&#160;</a></span>filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Filter <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Filter &gt;::filter</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encapsulates the implementation details of the filter. </p>
<p>Optionally exposes a variety of members and methods according to the selected implementation. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00135">135</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/github/workspace/include/fcarouge/<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
