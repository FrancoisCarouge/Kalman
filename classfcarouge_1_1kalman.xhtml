<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.3 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classfcarouge_1_1kalman.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="classfcarouge_1_1kalman-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Kalman filter.  
 <a href="classfcarouge_1_1kalman.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:a463765056b4c93f18c3673283502c9ee"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a463765056b4c93f18c3673283502c9ee">value_type</a> = State</td></tr>
<tr class="memdesc:a463765056b4c93f18c3673283502c9ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the filtered data elements.  <a href="classfcarouge_1_1kalman.xhtml#a463765056b4c93f18c3673283502c9ee">More...</a><br /></td></tr>
<tr class="separator:a463765056b4c93f18c3673283502c9ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ba9379cac37072f0afe18948917b045"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">state</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a15f8ae2111c2b7141eaf77bfc976eddc">implementation::state</a></td></tr>
<tr class="memdesc:a5ba9379cac37072f0afe18948917b045"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">More...</a><br /></td></tr>
<tr class="separator:a5ba9379cac37072f0afe18948917b045"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d458548471120dfda1b3f7d8fd2583b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7d458548471120dfda1b3f7d8fd2583b">output</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a8755deb8bc331fb6cd8b05f8ede7a089">implementation::output</a></td></tr>
<tr class="memdesc:a7d458548471120dfda1b3f7d8fd2583b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation vector Z.  <a href="classfcarouge_1_1kalman.xhtml#a7d458548471120dfda1b3f7d8fd2583b">More...</a><br /></td></tr>
<tr class="separator:a7d458548471120dfda1b3f7d8fd2583b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84b9242641a17d3ee45167fcca8c9e0c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a84b9242641a17d3ee45167fcca8c9e0c">input</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#ab2d5d99193ce38bbd98569819f0f0ffc">implementation::input</a></td></tr>
<tr class="memdesc:a84b9242641a17d3ee45167fcca8c9e0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control vector U.  <a href="classfcarouge_1_1kalman.xhtml#a84b9242641a17d3ee45167fcca8c9e0c">More...</a><br /></td></tr>
<tr class="separator:a84b9242641a17d3ee45167fcca8c9e0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a367e5fd4baedfc975da4239098330ecd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">estimate_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#aeeab0bf87147ab5eb761b65329fa7306">implementation::estimate_uncertainty</a></td></tr>
<tr class="memdesc:a367e5fd4baedfc975da4239098330ecd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the estimated correlated variance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">More...</a><br /></td></tr>
<tr class="separator:a367e5fd4baedfc975da4239098330ecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88deb126e932cc1dc5faef5248cd75a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">process_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a0696ec2114175e75b0329823b1c62c99">implementation::process_uncertainty</a></td></tr>
<tr class="memdesc:a88deb126e932cc1dc5faef5248cd75a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the process noise correlated variance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">More...</a><br /></td></tr>
<tr class="separator:a88deb126e932cc1dc5faef5248cd75a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d1e6ad3eda34e38dbd1c5e5d90bee92"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">output_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a0a25ddfd9d10e98bfcf2b1107626a74e">implementation::output_uncertainty</a></td></tr>
<tr class="memdesc:a9d1e6ad3eda34e38dbd1c5e5d90bee92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation noise correlated variance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">More...</a><br /></td></tr>
<tr class="separator:a9d1e6ad3eda34e38dbd1c5e5d90bee92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9cdb0287f8581899c14c42e5901d8f5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">state_transition</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#ad9dad30b5500893230d878bf632d2f4a">implementation::state_transition</a></td></tr>
<tr class="memdesc:af9cdb0287f8581899c14c42e5901d8f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">More...</a><br /></td></tr>
<tr class="separator:af9cdb0287f8581899c14c42e5901d8f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7430d4bf3df294fcadfbea5323c5b5a9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">output_model</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a40d8e17f21248972b00420a38c17d15d">implementation::output_model</a></td></tr>
<tr class="memdesc:a7430d4bf3df294fcadfbea5323c5b5a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">More...</a><br /></td></tr>
<tr class="separator:a7430d4bf3df294fcadfbea5323c5b5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fad5a467b8d8c91213115ae08b1ee88"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">input_control</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a9cf655d639b927c411afa2539025293e">implementation::input_control</a></td></tr>
<tr class="memdesc:a2fad5a467b8d8c91213115ae08b1ee88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">More...</a><br /></td></tr>
<tr class="separator:a2fad5a467b8d8c91213115ae08b1ee88"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Functions</div></td></tr>
<tr class="memitem:a3711c00c961692b20c398c21f83a11cc"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a3711c00c961692b20c398c21f83a11cc">kalman</a> ()=default</td></tr>
<tr class="memdesc:a3711c00c961692b20c398c21f83a11cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a Kalman filter without configuration.  <a href="classfcarouge_1_1kalman.xhtml#a3711c00c961692b20c398c21f83a11cc">More...</a><br /></td></tr>
<tr class="separator:a3711c00c961692b20c398c21f83a11cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdd41b063f863347987d886c49621e39"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#abdd41b063f863347987d886c49621e39">kalman</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other)=default</td></tr>
<tr class="memdesc:abdd41b063f863347987d886c49621e39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a filter.  <a href="classfcarouge_1_1kalman.xhtml#abdd41b063f863347987d886c49621e39">More...</a><br /></td></tr>
<tr class="separator:abdd41b063f863347987d886c49621e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c39c64ad83dcc6fa948d3b2c08e60aa"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2c39c64ad83dcc6fa948d3b2c08e60aa">kalman</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:a2c39c64ad83dcc6fa948d3b2c08e60aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a filter.  <a href="classfcarouge_1_1kalman.xhtml#a2c39c64ad83dcc6fa948d3b2c08e60aa">More...</a><br /></td></tr>
<tr class="separator:a2c39c64ad83dcc6fa948d3b2c08e60aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab897dd7335d76f19c25c57904ff2e6f6"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab897dd7335d76f19c25c57904ff2e6f6">operator=</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other)=default</td></tr>
<tr class="memdesc:ab897dd7335d76f19c25c57904ff2e6f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="classfcarouge_1_1kalman.xhtml#ab897dd7335d76f19c25c57904ff2e6f6">More...</a><br /></td></tr>
<tr class="separator:ab897dd7335d76f19c25c57904ff2e6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06bf5b11ad774195e61aea514e5b7057"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a06bf5b11ad774195e61aea514e5b7057">operator=</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:a06bf5b11ad774195e61aea514e5b7057"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment operator.  <a href="classfcarouge_1_1kalman.xhtml#a06bf5b11ad774195e61aea514e5b7057">More...</a><br /></td></tr>
<tr class="separator:a06bf5b11ad774195e61aea514e5b7057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af33cdb91db27c653f109a06c016f9cf7"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#af33cdb91db27c653f109a06c016f9cf7">~kalman</a> ()=default</td></tr>
<tr class="memdesc:af33cdb91db27c653f109a06c016f9cf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs the kalman filter.  <a href="classfcarouge_1_1kalman.xhtml#af33cdb91db27c653f109a06c016f9cf7">More...</a><br /></td></tr>
<tr class="separator:af33cdb91db27c653f109a06c016f9cf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Characteristics Member Functions</div></td></tr>
<tr class="memitem:afde73aa8d6b0d8d7794ca7f0220526cd"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">state</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#afde73aa8d6b0d8d7794ca7f0220526cd">x</a> () const</td></tr>
<tr class="memdesc:afde73aa8d6b0d8d7794ca7f0220526cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#afde73aa8d6b0d8d7794ca7f0220526cd">More...</a><br /></td></tr>
<tr class="separator:afde73aa8d6b0d8d7794ca7f0220526cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb35b3deb5e763d7da221a1fd68b640d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#acb35b3deb5e763d7da221a1fd68b640d">x</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:acb35b3deb5e763d7da221a1fd68b640d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#acb35b3deb5e763d7da221a1fd68b640d">More...</a><br /></td></tr>
<tr class="separator:acb35b3deb5e763d7da221a1fd68b640d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1c2cbe7e7da74b13752cdd4b901241"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a7d458548471120dfda1b3f7d8fd2583b">output</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a0f1c2cbe7e7da74b13752cdd4b901241">z</a> () const</td></tr>
<tr class="memdesc:a0f1c2cbe7e7da74b13752cdd4b901241"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation vector Z.  <a href="classfcarouge_1_1kalman.xhtml#a0f1c2cbe7e7da74b13752cdd4b901241">More...</a><br /></td></tr>
<tr class="separator:a0f1c2cbe7e7da74b13752cdd4b901241"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83bfa2849bb1debafbb1e2ae4c360864"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a84b9242641a17d3ee45167fcca8c9e0c">input</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a83bfa2849bb1debafbb1e2ae4c360864">u</a> () const</td></tr>
<tr class="memdesc:a83bfa2849bb1debafbb1e2ae4c360864"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control vector U.  <a href="classfcarouge_1_1kalman.xhtml#a83bfa2849bb1debafbb1e2ae4c360864">More...</a><br /></td></tr>
<tr class="separator:a83bfa2849bb1debafbb1e2ae4c360864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44c7e9f1008c20710e3da602c65c89de"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">estimate_uncertainty</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a44c7e9f1008c20710e3da602c65c89de">p</a> () const</td></tr>
<tr class="memdesc:a44c7e9f1008c20710e3da602c65c89de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a44c7e9f1008c20710e3da602c65c89de">More...</a><br /></td></tr>
<tr class="separator:a44c7e9f1008c20710e3da602c65c89de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72bcf8c51e2a64941314ab114d026b42"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a72bcf8c51e2a64941314ab114d026b42">p</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a72bcf8c51e2a64941314ab114d026b42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a72bcf8c51e2a64941314ab114d026b42">More...</a><br /></td></tr>
<tr class="separator:a72bcf8c51e2a64941314ab114d026b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3508a96580abaef536b25f5cc14dd9c"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">process_uncertainty</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ad3508a96580abaef536b25f5cc14dd9c">q</a> () const</td></tr>
<tr class="memdesc:ad3508a96580abaef536b25f5cc14dd9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#ad3508a96580abaef536b25f5cc14dd9c">More...</a><br /></td></tr>
<tr class="separator:ad3508a96580abaef536b25f5cc14dd9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66430f17480527d89070d7af2029edd9"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a66430f17480527d89070d7af2029edd9">q</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a66430f17480527d89070d7af2029edd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a66430f17480527d89070d7af2029edd9">More...</a><br /></td></tr>
<tr class="separator:a66430f17480527d89070d7af2029edd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18dc150030e892ae8ca8421833ee4462"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a18dc150030e892ae8ca8421833ee4462">q</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a18dc150030e892ae8ca8421833ee4462"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q function.  <a href="classfcarouge_1_1kalman.xhtml#a18dc150030e892ae8ca8421833ee4462">More...</a><br /></td></tr>
<tr class="separator:a18dc150030e892ae8ca8421833ee4462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84905bab5a2b4ed397bf33425afb5cf6"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">output_uncertainty</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a84905bab5a2b4ed397bf33425afb5cf6">r</a> () const</td></tr>
<tr class="memdesc:a84905bab5a2b4ed397bf33425afb5cf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a84905bab5a2b4ed397bf33425afb5cf6">More...</a><br /></td></tr>
<tr class="separator:a84905bab5a2b4ed397bf33425afb5cf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ac3ee0025e90abcc96734f703dad4b2"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a0ac3ee0025e90abcc96734f703dad4b2">r</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a0ac3ee0025e90abcc96734f703dad4b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a0ac3ee0025e90abcc96734f703dad4b2">More...</a><br /></td></tr>
<tr class="separator:a0ac3ee0025e90abcc96734f703dad4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e0e1a7d4c6779305807e9a3d645bc09"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a5e0e1a7d4c6779305807e9a3d645bc09">r</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a5e0e1a7d4c6779305807e9a3d645bc09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R function.  <a href="classfcarouge_1_1kalman.xhtml#a5e0e1a7d4c6779305807e9a3d645bc09">More...</a><br /></td></tr>
<tr class="separator:a5e0e1a7d4c6779305807e9a3d645bc09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91b5d8802b8a3f624221dae186f819c0"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">state_transition</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a91b5d8802b8a3f624221dae186f819c0">f</a> () const</td></tr>
<tr class="memdesc:a91b5d8802b8a3f624221dae186f819c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a91b5d8802b8a3f624221dae186f819c0">More...</a><br /></td></tr>
<tr class="separator:a91b5d8802b8a3f624221dae186f819c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63fba3b2ab5b6d43e0fc5572465e9fae"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a63fba3b2ab5b6d43e0fc5572465e9fae">f</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a63fba3b2ab5b6d43e0fc5572465e9fae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a63fba3b2ab5b6d43e0fc5572465e9fae">More...</a><br /></td></tr>
<tr class="separator:a63fba3b2ab5b6d43e0fc5572465e9fae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a1709483224135f031a24197387d6b6"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7a1709483224135f031a24197387d6b6">f</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a7a1709483224135f031a24197387d6b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F function.  <a href="classfcarouge_1_1kalman.xhtml#a7a1709483224135f031a24197387d6b6">More...</a><br /></td></tr>
<tr class="separator:a7a1709483224135f031a24197387d6b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25b78a2bba5233d0a62c7f0fcc86fc65"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">output_model</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a25b78a2bba5233d0a62c7f0fcc86fc65">h</a> () const</td></tr>
<tr class="memdesc:a25b78a2bba5233d0a62c7f0fcc86fc65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#a25b78a2bba5233d0a62c7f0fcc86fc65">More...</a><br /></td></tr>
<tr class="separator:a25b78a2bba5233d0a62c7f0fcc86fc65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dcf68b4aaae3099c50a0ed20008a9fe"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a8dcf68b4aaae3099c50a0ed20008a9fe">h</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a8dcf68b4aaae3099c50a0ed20008a9fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#a8dcf68b4aaae3099c50a0ed20008a9fe">More...</a><br /></td></tr>
<tr class="separator:a8dcf68b4aaae3099c50a0ed20008a9fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82e43f5836c311939b62dc07ec508922"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a82e43f5836c311939b62dc07ec508922">h</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a82e43f5836c311939b62dc07ec508922"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H function.  <a href="classfcarouge_1_1kalman.xhtml#a82e43f5836c311939b62dc07ec508922">More...</a><br /></td></tr>
<tr class="separator:a82e43f5836c311939b62dc07ec508922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27702301dba82053c689228a7a9cb657"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">input_control</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a27702301dba82053c689228a7a9cb657">g</a> () const</td></tr>
<tr class="memdesc:a27702301dba82053c689228a7a9cb657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a27702301dba82053c689228a7a9cb657">More...</a><br /></td></tr>
<tr class="separator:a27702301dba82053c689228a7a9cb657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad8a339e49e1163b0b03c0636137cca2"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aad8a339e49e1163b0b03c0636137cca2">g</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:aad8a339e49e1163b0b03c0636137cca2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#aad8a339e49e1163b0b03c0636137cca2">More...</a><br /></td></tr>
<tr class="separator:aad8a339e49e1163b0b03c0636137cca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17efe5f15e78bbaefa30d5b5a1094b74"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a17efe5f15e78bbaefa30d5b5a1094b74">g</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a17efe5f15e78bbaefa30d5b5a1094b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G function.  <a href="classfcarouge_1_1kalman.xhtml#a17efe5f15e78bbaefa30d5b5a1094b74">More...</a><br /></td></tr>
<tr class="separator:a17efe5f15e78bbaefa30d5b5a1094b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Filtering Member Functions</div></td></tr>
<tr class="memitem:a1e49b408cd795e92589a34f506813a6a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1e49b408cd795e92589a34f506813a6a">operator()</a> (const PredictionArguments &amp;...arguments, const auto &amp;...input_u, const auto &amp;...output_z)</td></tr>
<tr class="memdesc:a1e49b408cd795e92589a34f506813a6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a step of the filter.  <a href="classfcarouge_1_1kalman.xhtml#a1e49b408cd795e92589a34f506813a6a">More...</a><br /></td></tr>
<tr class="separator:a1e49b408cd795e92589a34f506813a6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0c0297d0d677737625e9fa99c2bb28f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#af0c0297d0d677737625e9fa99c2bb28f">update</a> (const auto &amp;...output_z)</td></tr>
<tr class="memdesc:af0c0297d0d677737625e9fa99c2bb28f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the estimates with the outcome of a measurement.  <a href="classfcarouge_1_1kalman.xhtml#af0c0297d0d677737625e9fa99c2bb28f">More...</a><br /></td></tr>
<tr class="separator:af0c0297d0d677737625e9fa99c2bb28f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd1393a459126fdd0fa1e276e2f7d0bc"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#acd1393a459126fdd0fa1e276e2f7d0bc">predict</a> (const PredictionArguments &amp;...arguments, const auto &amp;...input_u)</td></tr>
<tr class="memdesc:acd1393a459126fdd0fa1e276e2f7d0bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Produces estimates of the state variables and uncertainties.  <a href="classfcarouge_1_1kalman.xhtml#acd1393a459126fdd0fa1e276e2f7d0bc">More...</a><br /></td></tr>
<tr class="separator:acd1393a459126fdd0fa1e276e2f7d0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-types" name="pri-types"></a>
Private Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Types</div></td></tr>
<tr class="memitem:a2879383b3c018de9da9801d2082f9713"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2879383b3c018de9da9801d2082f9713">implementation</a> = <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml">internal::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;</td></tr>
<tr class="memdesc:a2879383b3c018de9da9801d2082f9713"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation details of the filter.  <a href="classfcarouge_1_1kalman.xhtml#a2879383b3c018de9da9801d2082f9713">More...</a><br /></td></tr>
<tr class="separator:a2879383b3c018de9da9801d2082f9713"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:a1acc8bf6f63e2dbab36e64c46ae0b455"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2879383b3c018de9da9801d2082f9713">implementation</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a></td></tr>
<tr class="memdesc:a1acc8bf6f63e2dbab36e64c46ae0b455"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates the implementation details of the filter.  <a href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">More...</a><br /></td></tr>
<tr class="separator:a1acc8bf6f63e2dbab36e64c46ae0b455"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type = double, typename State = Type, typename Output = State, typename Input = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt;<br />
class fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;</div><p >Kalman filter. </p>
<p >A Bayesian filter that uses multivariate Gaussians. Kalman filters update estimates by multiplying Gaussians and predict estimates by adding Gaussians. Design the state (x, P), the process (F, Q), the measurement (z, R), the measurement function H, and if the system has control inputs (u, B). Designing a filter is as much art as science. Kalman filters assume white noise.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Type</td><td>The type template parameter of the value type of the filter. </td></tr>
    <tr><td class="paramname">State</td><td>The type template parameter of the state vector x. State variables can be observed (measured), or hidden variables (infeered). This is the the mean of the multivariate Gaussian. </td></tr>
    <tr><td class="paramname">Output</td><td>The type template parameter of the measurement vector z. </td></tr>
    <tr><td class="paramname">Input</td><td>The type template parameter of the control u. </td></tr>
    <tr><td class="paramname">Transpose</td><td>The template template parameter of the matrix transpose functor. </td></tr>
    <tr><td class="paramname">Symmetrize</td><td>The template template parameter of the matrix symmetrization functor. </td></tr>
    <tr><td class="paramname">Divide</td><td>The template template parameter of the matrix division functor. </td></tr>
    <tr><td class="paramname">Identity</td><td>The template template parameter of the matrix identity functor. </td></tr>
    <tr><td class="paramname">PredictionArguments</td><td>The variadic type template parameter for additional prediction function parameters. Time, or a delta thereof, is often a prediction parameter. The parameters are propagated to the function objects used to compute the process noise Q, the state transition F, and the control transition G matrices.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This class could be usable in constant expressions if <code>std::function</code> could too. The polymorphic function wrapper was used in place of function pointers to enable default initialization from this class, captured member variables.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000003">Todo:</a></b></dt><dd><p class="startdd">Is this filter restricted to Newton's equations of motion? That is only a discretized continuous-time kinematic filter? How about non-Newtonian systems? </p>
<p class="interdd">Would it be beneficial to support <code>Type</code> and <code>value_type</code> prior to the <code>State</code> type template parameter? </p>
<p class="interdd">Would it be beneficial to support initialization list for characteristis? </p>
<p class="interdd">Symmetrization support might be superflous. How to confirm it is safe to remove? </p>
<p class="enddd">Would we want to support smoothers? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00103">103</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a367e5fd4baedfc975da4239098330ecd" name="a367e5fd4baedfc975da4239098330ecd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a367e5fd4baedfc975da4239098330ecd">&#9670;&nbsp;</a></span>estimate_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::estimate_uncertainty =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#aeeab0bf87147ab5eb761b65329fa7306">implementation::estimate_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the estimated correlated variance matrix P. </p>
<p >Also known as Σ. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a2">rocket_altitude.cpp</a>, and <a class="el" href="vehicule_location_8cpp-example.xhtml#a2">vehicule_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00137">137</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a2879383b3c018de9da9801d2082f9713" name="a2879383b3c018de9da9801d2082f9713"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2879383b3c018de9da9801d2082f9713">&#9670;&nbsp;</a></span>implementation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::implementation =  <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml">internal::kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments...&gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implementation details of the filter. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00110">110</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a84b9242641a17d3ee45167fcca8c9e0c" name="a84b9242641a17d3ee45167fcca8c9e0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84b9242641a17d3ee45167fcca8c9e0c">&#9670;&nbsp;</a></span>input</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::input =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#ab2d5d99193ce38bbd98569819f0f0ffc">implementation::input</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control vector U. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00132">132</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a2fad5a467b8d8c91213115ae08b1ee88" name="a2fad5a467b8d8c91213115ae08b1ee88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fad5a467b8d8c91213115ae08b1ee88">&#9670;&nbsp;</a></span>input_control</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::input_control =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a9cf655d639b927c411afa2539025293e">implementation::input_control</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control transition matrix G. </p>
<p >Also known as B. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a5">rocket_altitude.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a7d458548471120dfda1b3f7d8fd2583b" name="a7d458548471120dfda1b3f7d8fd2583b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d458548471120dfda1b3f7d8fd2583b">&#9670;&nbsp;</a></span>output</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::output =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a8755deb8bc331fb6cd8b05f8ede7a089">implementation::output</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation vector Z. </p>
<p >Also known as Y. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00129">129</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a7430d4bf3df294fcadfbea5323c5b5a9" name="a7430d4bf3df294fcadfbea5323c5b5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7430d4bf3df294fcadfbea5323c5b5a9">&#9670;&nbsp;</a></span>output_model</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::output_model =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a40d8e17f21248972b00420a38c17d15d">implementation::output_model</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation transition matrix H. </p>
<p >Also known as the measurement transition matrix or C. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="vehicule_location_8cpp-example.xhtml#a5">vehicule_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00153">153</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a9d1e6ad3eda34e38dbd1c5e5d90bee92" name="a9d1e6ad3eda34e38dbd1c5e5d90bee92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d1e6ad3eda34e38dbd1c5e5d90bee92">&#9670;&nbsp;</a></span>output_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::output_uncertainty =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a0a25ddfd9d10e98bfcf2b1107626a74e">implementation::output_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation noise correlated variance matrix R. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="vehicule_location_8cpp-example.xhtml#a6">vehicule_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00143">143</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a88deb126e932cc1dc5faef5248cd75a0" name="a88deb126e932cc1dc5faef5248cd75a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88deb126e932cc1dc5faef5248cd75a0">&#9670;&nbsp;</a></span>process_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::process_uncertainty =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a0696ec2114175e75b0329823b1c62c99">implementation::process_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the process noise correlated variance matrix Q. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a3">rocket_altitude.cpp</a>, and <a class="el" href="vehicule_location_8cpp-example.xhtml#a3">vehicule_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00140">140</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a5ba9379cac37072f0afe18948917b045" name="a5ba9379cac37072f0afe18948917b045"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ba9379cac37072f0afe18948917b045">&#9670;&nbsp;</a></span>state</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::state =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a15f8ae2111c2b7141eaf77bfc976eddc">implementation::state</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state estimate vector X. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00124">124</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="af9cdb0287f8581899c14c42e5901d8f5" name="af9cdb0287f8581899c14c42e5901d8f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9cdb0287f8581899c14c42e5901d8f5">&#9670;&nbsp;</a></span>state_transition</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::state_transition =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#ad9dad30b5500893230d878bf632d2f4a">implementation::state_transition</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state transition matrix F. </p>
<p >Also known as the fundamental matrix, Φ, or A. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a4">rocket_altitude.cpp</a>, and <a class="el" href="vehicule_location_8cpp-example.xhtml#a4">vehicule_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00148">148</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a463765056b4c93f18c3673283502c9ee" name="a463765056b4c93f18c3673283502c9ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a463765056b4c93f18c3673283502c9ee">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::value_type =  State</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the filtered data elements. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00121">121</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3711c00c961692b20c398c21f83a11cc" name="a3711c00c961692b20c398c21f83a11cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3711c00c961692b20c398c21f83a11cc">&#9670;&nbsp;</a></span>kalman() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::kalman </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a Kalman filter without configuration. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="abdd41b063f863347987d886c49621e39" name="abdd41b063f863347987d886c49621e39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdd41b063f863347987d886c49621e39">&#9670;&nbsp;</a></span>kalman() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::kalman </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructs a filter. </p>
<p >Constructs the filter with the copy of the contents of the <code>other</code> filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a2c39c64ad83dcc6fa948d3b2c08e60aa" name="a2c39c64ad83dcc6fa948d3b2c08e60aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c39c64ad83dcc6fa948d3b2c08e60aa">&#9670;&nbsp;</a></span>kalman() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::kalman </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructs a filter. </p>
<p >Move constructor. Constructs the filter with the contents of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="af33cdb91db27c653f109a06c016f9cf7" name="af33cdb91db27c653f109a06c016f9cf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af33cdb91db27c653f109a06c016f9cf7">&#9670;&nbsp;</a></span>~kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::~<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructs the kalman filter. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a91b5d8802b8a3f624221dae186f819c0" name="a91b5d8802b8a3f624221dae186f819c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91b5d8802b8a3f624221dae186f819c0">&#9670;&nbsp;</a></span>f() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">::state_transition</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state transition matrix F. </p>
<dl class="section return"><dt>Returns</dt><dd>The state transition matrix F.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00613">613</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  614</span>{</div>
<div class="line"><span class="lineno">  615</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a38eb1cb214c8119eb33abab5cd952d7b">f</a>;</div>
<div class="line"><span class="lineno">  616</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1acc8bf6f63e2dbab36e64c46ae0b455"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">fcarouge::kalman::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00485">kalman.hpp:485</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a38eb1cb214c8119eb33abab5cd952d7b"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a38eb1cb214c8119eb33abab5cd952d7b">fcarouge::internal::kalman::f</a></div><div class="ttdeci">state_transition f</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00122">kalman.hpp:122</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7a1709483224135f031a24197387d6b6" name="a7a1709483224135f031a24197387d6b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a1709483224135f031a24197387d6b6">&#9670;&nbsp;</a></span>f() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F function. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00350">350</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  353</span>  {</div>
<div class="line"><span class="lineno">  354</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a5de3662dc7198c5cec86f743c6015aa7">transition_state_f</a> = value;</div>
<div class="line"><span class="lineno">  355</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a5de3662dc7198c5cec86f743c6015aa7"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a5de3662dc7198c5cec86f743c6015aa7">fcarouge::internal::kalman::transition_state_f</a></div><div class="ttdeci">std::function&lt; state_transition(const PredictionArguments &amp;...)&gt; transition_state_f</div><div class="ttdoc">Compute state transition F matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00150">kalman.hpp:150</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00150">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::transition_state_f</a>.</p>

</div>
</div>
<a id="a63fba3b2ab5b6d43e0fc5572465e9fae" name="a63fba3b2ab5b6d43e0fc5572465e9fae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63fba3b2ab5b6d43e0fc5572465e9fae">&#9670;&nbsp;</a></span>f() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00626">626</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  627</span>{</div>
<div class="line"><span class="lineno">  628</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a38eb1cb214c8119eb33abab5cd952d7b">f</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">state_transition</a>{ value, values... };</div>
<div class="line"><span class="lineno">  629</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af9cdb0287f8581899c14c42e5901d8f5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af9cdb0287f8581899c14c42e5901d8f5">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00148">kalman.hpp:148</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a27702301dba82053c689228a7a9cb657" name="a27702301dba82053c689228a7a9cb657"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27702301dba82053c689228a7a9cb657">&#9670;&nbsp;</a></span>g() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">::input_control</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::g</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control transition matrix G. </p>
<dl class="section return"><dt>Returns</dt><dd>The control transition matrix G.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00669">669</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  670</span>{</div>
<div class="line"><span class="lineno">  671</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#af67df6bd81ca269314ef740d50d33e5f">g</a>;</div>
<div class="line"><span class="lineno">  672</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_af67df6bd81ca269314ef740d50d33e5f"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#af67df6bd81ca269314ef740d50d33e5f">fcarouge::internal::kalman::g</a></div><div class="ttdeci">input_control g</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00123">kalman.hpp:123</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a17efe5f15e78bbaefa30d5b5a1094b74" name="a17efe5f15e78bbaefa30d5b5a1094b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17efe5f15e78bbaefa30d5b5a1094b74">&#9670;&nbsp;</a></span>g() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G function. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00398">398</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  401</span>  {</div>
<div class="line"><span class="lineno">  402</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a9a66a8ec4bc3b44f1baf393b6942e381">transition_control_g</a> = value;</div>
<div class="line"><span class="lineno">  403</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a9a66a8ec4bc3b44f1baf393b6942e381"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a9a66a8ec4bc3b44f1baf393b6942e381">fcarouge::internal::kalman::transition_control_g</a></div><div class="ttdeci">std::function&lt; input_control(const PredictionArguments &amp;...)&gt; transition_control_g</div><div class="ttdoc">Compute control transition G matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00164">kalman.hpp:164</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00164">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::transition_control_g</a>.</p>

</div>
</div>
<a id="aad8a339e49e1163b0b03c0636137cca2" name="aad8a339e49e1163b0b03c0636137cca2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad8a339e49e1163b0b03c0636137cca2">&#9670;&nbsp;</a></span>g() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00682">682</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  683</span>{</div>
<div class="line"><span class="lineno">  684</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#af67df6bd81ca269314ef740d50d33e5f">g</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">input_control</a>{ value, values... };</div>
<div class="line"><span class="lineno">  685</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a2fad5a467b8d8c91213115ae08b1ee88"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a2fad5a467b8d8c91213115ae08b1ee88">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00158">kalman.hpp:158</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a25b78a2bba5233d0a62c7f0fcc86fc65" name="a25b78a2bba5233d0a62c7f0fcc86fc65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25b78a2bba5233d0a62c7f0fcc86fc65">&#9670;&nbsp;</a></span>h() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">::output_model</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::h</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation transition matrix H. </p>
<dl class="section return"><dt>Returns</dt><dd>The observation, measurement transition matrix H.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00641">641</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  642</span>{</div>
<div class="line"><span class="lineno">  643</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a3bfec506273dd8b71a17ddb04e6b6cab">h</a>;</div>
<div class="line"><span class="lineno">  644</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a3bfec506273dd8b71a17ddb04e6b6cab"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a3bfec506273dd8b71a17ddb04e6b6cab">fcarouge::internal::kalman::h</a></div><div class="ttdeci">output_model h</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00121">kalman.hpp:121</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a82e43f5836c311939b62dc07ec508922" name="a82e43f5836c311939b62dc07ec508922"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82e43f5836c311939b62dc07ec508922">&#9670;&nbsp;</a></span>h() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H function. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00374">374</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  377</span>  {</div>
<div class="line"><span class="lineno">  378</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#abef60d4ed5157623ad7fe001d9d67cc6">transition_observation_h</a> = value;</div>
<div class="line"><span class="lineno">  379</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_abef60d4ed5157623ad7fe001d9d67cc6"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#abef60d4ed5157623ad7fe001d9d67cc6">fcarouge::internal::kalman::transition_observation_h</a></div><div class="ttdeci">std::function&lt; output_model()&gt; transition_observation_h</div><div class="ttdoc">Compute observation transition H matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00133">kalman.hpp:133</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00133">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::transition_observation_h</a>.</p>

</div>
</div>
<a id="a8dcf68b4aaae3099c50a0ed20008a9fe" name="a8dcf68b4aaae3099c50a0ed20008a9fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dcf68b4aaae3099c50a0ed20008a9fe">&#9670;&nbsp;</a></span>h() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00654">654</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  655</span>{</div>
<div class="line"><span class="lineno">  656</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a3bfec506273dd8b71a17ddb04e6b6cab">h</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">output_model</a>{ value, values... };</div>
<div class="line"><span class="lineno">  657</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a7430d4bf3df294fcadfbea5323c5b5a9"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a7430d4bf3df294fcadfbea5323c5b5a9">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00153">kalman.hpp:153</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1e49b408cd795e92589a34f506813a6a" name="a1e49b408cd795e92589a34f506813a6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e49b408cd795e92589a34f506813a6a">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const PredictionArguments &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>input_u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>output_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a step of the filter. </p>
<p >Predicts and updates the estimates per prediction arguments, control input, and measurement output.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>Optional prediction parameters passed through for computations of prediction matrices. </td></tr>
    <tr><td class="paramname">input_u</td><td>Optional control parameters. Types must be compatible with the <code>Input</code> types. The parameter pack types must always be explicitely defined per the </td></tr>
    <tr><td class="paramname">output_z</td><td>Observation parameters. Types must be compatible with the <code>output</code> type. The parameter pack types are always deduced per the greedy matching rule.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Called as <code>k(...);</code> with prediction values and output values when the filter has no input parameters. The input type list is explicitely empty. Otherwise can be called as <code>k.template operator()&lt;input1_t, input2_t, ...&gt;(...);</code> with prediction values, input values, and output values. The input type list being explicitely specified. A lambda can come in handy to reduce the verbose call `const auto kf{ <a href="const auto
&amp;...args">&amp;k</a> { k.template operator()&lt;input1_t, input2_t, ...&gt;(args...); } };<code>then called as</code>kf(...);`.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000006">Todo:</a></b></dt><dd>Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00437">437</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  440</span>  {</div>
<div class="line"><span class="lineno">  441</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman.xhtml#ab86860dc9f2992f0fb3c6b71e980c187">predict</a>(arguments..., input_u...);</div>
<div class="line"><span class="lineno">  442</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman.xhtml#a549f84cd3dc8cbb3fdefd52aef3c35cc">update</a>(output_z...);</div>
<div class="line"><span class="lineno">  443</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a549f84cd3dc8cbb3fdefd52aef3c35cc"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a549f84cd3dc8cbb3fdefd52aef3c35cc">fcarouge::internal::kalman::update</a></div><div class="ttdeci">constexpr void update(const auto &amp;...output_z)</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00181">kalman.hpp:181</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_ab86860dc9f2992f0fb3c6b71e980c187"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#ab86860dc9f2992f0fb3c6b71e980c187">fcarouge::internal::kalman::predict</a></div><div class="ttdeci">constexpr void predict(const PredictionArguments &amp;...arguments, const auto &amp;...input_u)</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00189">kalman.hpp:189</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00189">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::predict()</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00181">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::update()</a>.</p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman_a1e49b408cd795e92589a34f506813a6a_cgraph.svg" width="360" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab897dd7335d76f19c25c57904ff2e6f6" name="ab897dd7335d76f19c25c57904ff2e6f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab897dd7335d76f19c25c57904ff2e6f6">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>
<p >Destroys or copy-assigns the contents with a copy of the contents of the other filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a06bf5b11ad774195e61aea514e5b7057" name="a06bf5b11ad774195e61aea514e5b7057"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06bf5b11ad774195e61aea514e5b7057">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment operator. </p>
<p >Replaces the contents of the filter with those of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter). The other filter is in a valid but unspecified state afterwards.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a44c7e9f1008c20710e3da602c65c89de" name="a44c7e9f1008c20710e3da602c65c89de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44c7e9f1008c20710e3da602c65c89de">&#9670;&nbsp;</a></span>p() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">::estimate_uncertainty</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::p</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the estimated covariance matrix P. </p>
<dl class="section return"><dt>Returns</dt><dd>The estimated correlated variance matrix P.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00528">528</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  529</span>{</div>
<div class="line"><span class="lineno">  530</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a96369239684b9408a98d0b6cf4d7ee6d">p</a>;</div>
<div class="line"><span class="lineno">  531</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a96369239684b9408a98d0b6cf4d7ee6d"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a96369239684b9408a98d0b6cf4d7ee6d">fcarouge::internal::kalman::p</a></div><div class="ttdeci">estimate_uncertainty p</div><div class="ttdoc">The estimate uncertainty, covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00117">kalman.hpp:117</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a72bcf8c51e2a64941314ab114d026b42" name="a72bcf8c51e2a64941314ab114d026b42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72bcf8c51e2a64941314ab114d026b42">&#9670;&nbsp;</a></span>p() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00541">541</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  542</span>{</div>
<div class="line"><span class="lineno">  543</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a96369239684b9408a98d0b6cf4d7ee6d">p</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">estimate_uncertainty</a>{ value, values... };</div>
<div class="line"><span class="lineno">  544</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a367e5fd4baedfc975da4239098330ecd"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a367e5fd4baedfc975da4239098330ecd">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00137">kalman.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acd1393a459126fdd0fa1e276e2f7d0bc" name="acd1393a459126fdd0fa1e276e2f7d0bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd1393a459126fdd0fa1e276e2f7d0bc">&#9670;&nbsp;</a></span>predict()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::predict </td>
          <td>(</td>
          <td class="paramtype">const PredictionArguments &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>input_u</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Produces estimates of the state variables and uncertainties. </p>
<p >Implements the total probability theorem.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>Optional prediction parameters passed through for computations of prediction matrices. </td></tr>
    <tr><td class="paramname">input_u</td><td>Optional control parameters. Types must be compatible with the <code>Input</code> types. The parameter pack types are always deduced per the greedy matching rule.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000008">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients. </p>
<p class="enddd">Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00708">708</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  710</span>{</div>
<div class="line"><span class="lineno">  711</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman.xhtml#ab86860dc9f2992f0fb3c6b71e980c187">predict</a>(arguments..., input_u...);</div>
<div class="line"><span class="lineno">  712</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad3508a96580abaef536b25f5cc14dd9c" name="ad3508a96580abaef536b25f5cc14dd9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3508a96580abaef536b25f5cc14dd9c">&#9670;&nbsp;</a></span>q() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">::process_uncertainty</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::q</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the process noise covariance matrix Q. </p>
<dl class="section return"><dt>Returns</dt><dd>The process noise correlated variance matrix Q.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00556">556</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  557</span>{</div>
<div class="line"><span class="lineno">  558</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#afd1da894df4e15d533ff3557665976cf">q</a>;</div>
<div class="line"><span class="lineno">  559</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_afd1da894df4e15d533ff3557665976cf"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#afd1da894df4e15d533ff3557665976cf">fcarouge::internal::kalman::q</a></div><div class="ttdeci">process_uncertainty q</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00119">kalman.hpp:119</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a18dc150030e892ae8ca8421833ee4462" name="a18dc150030e892ae8ca8421833ee4462"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18dc150030e892ae8ca8421833ee4462">&#9670;&nbsp;</a></span>q() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q function. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00299">299</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  302</span>  {</div>
<div class="line"><span class="lineno">  303</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a9a544930b1a04f11123f9cb61b79556e">noise_process_q</a> = value;</div>
<div class="line"><span class="lineno">  304</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a9a544930b1a04f11123f9cb61b79556e"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a9a544930b1a04f11123f9cb61b79556e">fcarouge::internal::kalman::noise_process_q</a></div><div class="ttdeci">std::function&lt; process_uncertainty(const PredictionArguments &amp;...)&gt; noise_process_q</div><div class="ttdoc">Compute process noise Q matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00157">kalman.hpp:157</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00157">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::noise_process_q</a>.</p>

</div>
</div>
<a id="a66430f17480527d89070d7af2029edd9" name="a66430f17480527d89070d7af2029edd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66430f17480527d89070d7af2029edd9">&#9670;&nbsp;</a></span>q() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000004">Todo:</a></b></dt><dd>Don't we need to reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00570">570</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  571</span>{</div>
<div class="line"><span class="lineno">  572</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#afd1da894df4e15d533ff3557665976cf">q</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">process_uncertainty</a>{ value, values... };</div>
<div class="line"><span class="lineno">  573</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a88deb126e932cc1dc5faef5248cd75a0"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a88deb126e932cc1dc5faef5248cd75a0">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00140">kalman.hpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a84905bab5a2b4ed397bf33425afb5cf6" name="a84905bab5a2b4ed397bf33425afb5cf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84905bab5a2b4ed397bf33425afb5cf6">&#9670;&nbsp;</a></span>r() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">::output_uncertainty</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::r</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation noise covariance matrix R. </p>
<p >The variance there is in each measurement.</p>
<dl class="section return"><dt>Returns</dt><dd>The observation noise correlated variance matrix R.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00585">585</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  586</span>{</div>
<div class="line"><span class="lineno">  587</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#ae6cb3405e455350e066756ba6d412442">r</a>;</div>
<div class="line"><span class="lineno">  588</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_ae6cb3405e455350e066756ba6d412442"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#ae6cb3405e455350e066756ba6d412442">fcarouge::internal::kalman::r</a></div><div class="ttdeci">output_uncertainty r</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00120">kalman.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e0e1a7d4c6779305807e9a3d645bc09" name="a5e0e1a7d4c6779305807e9a3d645bc09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e0e1a7d4c6779305807e9a3d645bc09">&#9670;&nbsp;</a></span>r() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R function. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00326">326</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  329</span>  {</div>
<div class="line"><span class="lineno">  330</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a67cfd73334ae1202616e8e24c9b5c6d9">noise_observation_r</a> = value;</div>
<div class="line"><span class="lineno">  331</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a67cfd73334ae1202616e8e24c9b5c6d9"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a67cfd73334ae1202616e8e24c9b5c6d9">fcarouge::internal::kalman::noise_observation_r</a></div><div class="ttdeci">std::function&lt; output_uncertainty()&gt; noise_observation_r</div><div class="ttdoc">Compute observation noise R matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00138">kalman.hpp:138</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l00485">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</a>, and <a class="el" href="internal_2kalman_8hpp_source.xhtml#l00138">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::noise_observation_r</a>.</p>

</div>
</div>
<a id="a0ac3ee0025e90abcc96734f703dad4b2" name="a0ac3ee0025e90abcc96734f703dad4b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ac3ee0025e90abcc96734f703dad4b2">&#9670;&nbsp;</a></span>r() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00598">598</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  599</span>{</div>
<div class="line"><span class="lineno">  600</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#ae6cb3405e455350e066756ba6d412442">r</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">output_uncertainty</a>{ value, values... };</div>
<div class="line"><span class="lineno">  601</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9d1e6ad3eda34e38dbd1c5e5d90bee92"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9d1e6ad3eda34e38dbd1c5e5d90bee92">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00143">kalman.hpp:143</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a83bfa2849bb1debafbb1e2ae4c360864" name="a83bfa2849bb1debafbb1e2ae4c360864"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83bfa2849bb1debafbb1e2ae4c360864">&#9670;&nbsp;</a></span>u()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a84b9242641a17d3ee45167fcca8c9e0c">input</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::u </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control vector U. </p>
<dl class="section return"><dt>Returns</dt><dd>The control vector U.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="af0c0297d0d677737625e9fa99c2bb28f" name="af0c0297d0d677737625e9fa99c2bb28f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0c0297d0d677737625e9fa99c2bb28f">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::update </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>output_z</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the estimates with the outcome of a measurement. </p>
<p >Implements the Bayes' theorem. Combine one measurement and the prior estimate.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">output_z</td><td>Observation parameters. Types must be compatible with the <code>output</code> type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000007">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients. </p>
<p class="enddd">Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00695">695</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  696</span>{</div>
<div class="line"><span class="lineno">  697</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman.xhtml#a549f84cd3dc8cbb3fdefd52aef3c35cc">update</a>(output_z...);</div>
<div class="line"><span class="lineno">  698</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="afde73aa8d6b0d8d7794ca7f0220526cd" name="afde73aa8d6b0d8d7794ca7f0220526cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afde73aa8d6b0d8d7794ca7f0220526cd">&#9670;&nbsp;</a></span>x() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments... &gt;<a class="el" href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">::state</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::x</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state estimate vector X. </p>
<dl class="section return"><dt>Returns</dt><dd>The state estimate vector X.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00500">500</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  501</span>{</div>
<div class="line"><span class="lineno">  502</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a3c2fb73364094e21919a0f165a1ba926">x</a>;</div>
<div class="line"><span class="lineno">  503</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml_a3c2fb73364094e21919a0f165a1ba926"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml#a3c2fb73364094e21919a0f165a1ba926">fcarouge::internal::kalman::x</a></div><div class="ttdeci">state x</div><div class="ttdoc">The state estimate vector x.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00112">kalman.hpp:112</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acb35b3deb5e763d7da221a1fd68b640d" name="acb35b3deb5e763d7da221a1fd68b640d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb35b3deb5e763d7da221a1fd68b640d">&#9670;&nbsp;</a></span>x() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , template&lt; typename &gt; typename Transpose, template&lt; typename &gt; typename Symmetrize, template&lt; typename, typename &gt; typename Divide, template&lt; typename &gt; typename Identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000005">Todo:</a></b></dt><dd>Consider if a fluent interface would be preferrable? In addition to constructors? Same question for all characteristics set methods. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00513">513</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  514</span>{</div>
<div class="line"><span class="lineno">  515</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a1acc8bf6f63e2dbab36e64c46ae0b455">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman.xhtml#a3c2fb73364094e21919a0f165a1ba926">x</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">state</a>{ value, values... };</div>
<div class="line"><span class="lineno">  516</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a5ba9379cac37072f0afe18948917b045"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a5ba9379cac37072f0afe18948917b045">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00124">kalman.hpp:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f1c2cbe7e7da74b13752cdd4b901241" name="a0f1c2cbe7e7da74b13752cdd4b901241"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f1c2cbe7e7da74b13752cdd4b901241">&#9670;&nbsp;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml#a7d458548471120dfda1b3f7d8fd2583b">output</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation vector Z. </p>
<dl class="section return"><dt>Returns</dt><dd>The observation vector Z.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a1acc8bf6f63e2dbab36e64c46ae0b455" name="a1acc8bf6f63e2dbab36e64c46ae0b455"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1acc8bf6f63e2dbab36e64c46ae0b455">&#9670;&nbsp;</a></span>filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, typename State  = Type, typename Output  = State, typename Input  = State, template&lt; typename &gt; typename Transpose = internal::transpose, template&lt; typename &gt; typename Symmetrize = internal::symmetrize, template&lt; typename, typename &gt; typename Divide = internal::divide, template&lt; typename &gt; typename Identity = internal::identity, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2879383b3c018de9da9801d2082f9713">implementation</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::filter</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encapsulates the implementation details of the filter. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00485">485</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="kalman_8hpp_source.xhtml#l00350">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::f()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00398">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::g()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00374">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::h()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00437">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::operator()()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00299">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::q()</a>, and <a class="el" href="kalman_8hpp_source.xhtml#l00326">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, PredictionArguments &gt;::r()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/fcarouge/<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a></li>
    <li class="footer">Generated on Mon May 9 2022 03:57:39 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.3 </li>
  </ul>
</div>
</body>
</html>
