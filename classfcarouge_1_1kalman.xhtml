<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classfcarouge_1_1kalman.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="classfcarouge_1_1kalman-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Kalman filter.  
 <a href="classfcarouge_1_1kalman.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:a1102f87212b368e4e55bcd5d637a600c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> = typename implementation::state</td></tr>
<tr class="memdesc:a1102f87212b368e4e55bcd5d637a600c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">More...</a><br /></td></tr>
<tr class="separator:a1102f87212b368e4e55bcd5d637a600c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fd585072f9799aa546943934e1a38e1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a> = typename implementation::output</td></tr>
<tr class="memdesc:a7fd585072f9799aa546943934e1a38e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation vector Z.  <a href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">More...</a><br /></td></tr>
<tr class="separator:a7fd585072f9799aa546943934e1a38e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca54b5a1f438d4c6299ac36035450d3c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a> = typename implementation::input</td></tr>
<tr class="memdesc:aca54b5a1f438d4c6299ac36035450d3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control vector U.  <a href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">More...</a><br /></td></tr>
<tr class="separator:aca54b5a1f438d4c6299ac36035450d3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15928894f06259752d02d9ee26b2e47e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> = typename implementation::estimate_uncertainty</td></tr>
<tr class="memdesc:a15928894f06259752d02d9ee26b2e47e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the estimated correlated variance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">More...</a><br /></td></tr>
<tr class="separator:a15928894f06259752d02d9ee26b2e47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95e201e1563f135b128edbf2c9793e56"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> = typename implementation::process_uncertainty</td></tr>
<tr class="memdesc:a95e201e1563f135b128edbf2c9793e56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the process noise correlated variance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">More...</a><br /></td></tr>
<tr class="separator:a95e201e1563f135b128edbf2c9793e56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fac97289314ad4018774b6afbd73716"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> = typename implementation::output_uncertainty</td></tr>
<tr class="memdesc:a9fac97289314ad4018774b6afbd73716"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation noise correlated variance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">More...</a><br /></td></tr>
<tr class="separator:a9fac97289314ad4018774b6afbd73716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab763d09902667e195848fa899e310beb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> = typename implementation::state_transition</td></tr>
<tr class="memdesc:ab763d09902667e195848fa899e310beb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">More...</a><br /></td></tr>
<tr class="separator:ab763d09902667e195848fa899e310beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1642332d5ad9d1e135bbe5220961de64"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> = typename implementation::output_model</td></tr>
<tr class="memdesc:a1642332d5ad9d1e135bbe5220961de64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">More...</a><br /></td></tr>
<tr class="separator:a1642332d5ad9d1e135bbe5220961de64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59c62d02fbc8be939e05a135b0cec3b8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> = typename implementation::input_control</td></tr>
<tr class="memdesc:a59c62d02fbc8be939e05a135b0cec3b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">More...</a><br /></td></tr>
<tr class="separator:a59c62d02fbc8be939e05a135b0cec3b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1eeee2aae7756cb1a24350ff802de2a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a> = typename implementation::gain</td></tr>
<tr class="memdesc:ad1eeee2aae7756cb1a24350ff802de2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the gain matrix K.  <a href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">More...</a><br /></td></tr>
<tr class="separator:ad1eeee2aae7756cb1a24350ff802de2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a222414fb9c93edb378a0156aa278a811"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a> = typename implementation::innovation</td></tr>
<tr class="memdesc:a222414fb9c93edb378a0156aa278a811"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation vector Y.  <a href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">More...</a><br /></td></tr>
<tr class="separator:a222414fb9c93edb378a0156aa278a811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab485e684ce0723c3d6de5dec389c88a6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a> = typename implementation::innovation_uncertainty</td></tr>
<tr class="memdesc:ab485e684ce0723c3d6de5dec389c88a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation uncertainty matrix S.  <a href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">More...</a><br /></td></tr>
<tr class="separator:ab485e684ce0723c3d6de5dec389c88a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Functions</div></td></tr>
<tr class="memitem:a59a9e100ebc62a6d4db11a7e65a06b12"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a59a9e100ebc62a6d4db11a7e65a06b12">kalman</a> ()=default</td></tr>
<tr class="memdesc:a59a9e100ebc62a6d4db11a7e65a06b12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a Kalman filter without configuration.  <a href="classfcarouge_1_1kalman.xhtml#a59a9e100ebc62a6d4db11a7e65a06b12">More...</a><br /></td></tr>
<tr class="separator:a59a9e100ebc62a6d4db11a7e65a06b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3064ce3ec5d541ddb849a7b530b5124"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aa3064ce3ec5d541ddb849a7b530b5124">kalman</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other)=default</td></tr>
<tr class="memdesc:aa3064ce3ec5d541ddb849a7b530b5124"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a filter.  <a href="classfcarouge_1_1kalman.xhtml#aa3064ce3ec5d541ddb849a7b530b5124">More...</a><br /></td></tr>
<tr class="separator:aa3064ce3ec5d541ddb849a7b530b5124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97c4057f94bf097d2075c2b019a1a9e5"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a97c4057f94bf097d2075c2b019a1a9e5">kalman</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:a97c4057f94bf097d2075c2b019a1a9e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a filter.  <a href="classfcarouge_1_1kalman.xhtml#a97c4057f94bf097d2075c2b019a1a9e5">More...</a><br /></td></tr>
<tr class="separator:a97c4057f94bf097d2075c2b019a1a9e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae5a09664832ca35039c426a4a15cc6"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a4ae5a09664832ca35039c426a4a15cc6">operator=</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td></tr>
<tr class="memdesc:a4ae5a09664832ca35039c426a4a15cc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="classfcarouge_1_1kalman.xhtml#a4ae5a09664832ca35039c426a4a15cc6">More...</a><br /></td></tr>
<tr class="separator:a4ae5a09664832ca35039c426a4a15cc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2f0430be3a57809a6bdca479c341954"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aa2f0430be3a57809a6bdca479c341954">operator=</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td></tr>
<tr class="memdesc:aa2f0430be3a57809a6bdca479c341954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment operator.  <a href="classfcarouge_1_1kalman.xhtml#aa2f0430be3a57809a6bdca479c341954">More...</a><br /></td></tr>
<tr class="separator:aa2f0430be3a57809a6bdca479c341954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefcc6608c7aa96cd7ea0ab658fd5da54"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aefcc6608c7aa96cd7ea0ab658fd5da54">~kalman</a> ()=default</td></tr>
<tr class="memdesc:aefcc6608c7aa96cd7ea0ab658fd5da54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs the kalman filter.  <a href="classfcarouge_1_1kalman.xhtml#aefcc6608c7aa96cd7ea0ab658fd5da54">More...</a><br /></td></tr>
<tr class="separator:aefcc6608c7aa96cd7ea0ab658fd5da54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Characteristics Member Functions</div></td></tr>
<tr class="memitem:a7da73fc2bef3808cb47836bf9e8208e5"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7da73fc2bef3808cb47836bf9e8208e5">x</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a></td></tr>
<tr class="memdesc:a7da73fc2bef3808cb47836bf9e8208e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a7da73fc2bef3808cb47836bf9e8208e5">More...</a><br /></td></tr>
<tr class="separator:a7da73fc2bef3808cb47836bf9e8208e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f45fec5e2a499c7874350f27ff16959"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7f45fec5e2a499c7874350f27ff16959">x</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;value)</td></tr>
<tr class="memdesc:a7f45fec5e2a499c7874350f27ff16959"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a7f45fec5e2a499c7874350f27ff16959">More...</a><br /></td></tr>
<tr class="separator:a7f45fec5e2a499c7874350f27ff16959"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c655b621eaaea59e65cce6abe12dbd7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a0c655b621eaaea59e65cce6abe12dbd7">x</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a0c655b621eaaea59e65cce6abe12dbd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a0c655b621eaaea59e65cce6abe12dbd7">More...</a><br /></td></tr>
<tr class="separator:a0c655b621eaaea59e65cce6abe12dbd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a232d3cdfe6af3eed0cfe3bbfc1a6a51b"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">x</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a232d3cdfe6af3eed0cfe3bbfc1a6a51b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">More...</a><br /></td></tr>
<tr class="separator:a232d3cdfe6af3eed0cfe3bbfc1a6a51b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04f87358de723f8ae31cd0098b54feeb"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a04f87358de723f8ae31cd0098b54feeb">x</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a04f87358de723f8ae31cd0098b54feeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman.xhtml#a04f87358de723f8ae31cd0098b54feeb">More...</a><br /></td></tr>
<tr class="separator:a04f87358de723f8ae31cd0098b54feeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaa0de7e5f1ad089a9d7842add690431"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#abaa0de7e5f1ad089a9d7842add690431">z</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a></td></tr>
<tr class="memdesc:abaa0de7e5f1ad089a9d7842add690431"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last observation vector Z.  <a href="classfcarouge_1_1kalman.xhtml#abaa0de7e5f1ad089a9d7842add690431">More...</a><br /></td></tr>
<tr class="separator:abaa0de7e5f1ad089a9d7842add690431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7552965d826e59f1f337ba2220999643"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7552965d826e59f1f337ba2220999643">u</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a></td></tr>
<tr class="memdesc:a7552965d826e59f1f337ba2220999643"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last control vector U.  <a href="classfcarouge_1_1kalman.xhtml#a7552965d826e59f1f337ba2220999643">More...</a><br /></td></tr>
<tr class="separator:a7552965d826e59f1f337ba2220999643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a868e7283042616c9fd32ea86745c3ec4"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a868e7283042616c9fd32ea86745c3ec4">p</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a></td></tr>
<tr class="memdesc:a868e7283042616c9fd32ea86745c3ec4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a868e7283042616c9fd32ea86745c3ec4">More...</a><br /></td></tr>
<tr class="separator:a868e7283042616c9fd32ea86745c3ec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a922687019e99df6169eb09ddaa396bd7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a922687019e99df6169eb09ddaa396bd7">p</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a922687019e99df6169eb09ddaa396bd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a922687019e99df6169eb09ddaa396bd7">More...</a><br /></td></tr>
<tr class="separator:a922687019e99df6169eb09ddaa396bd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5cb329547421eabc8bb91f2c16329b7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ac5cb329547421eabc8bb91f2c16329b7">p</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:ac5cb329547421eabc8bb91f2c16329b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#ac5cb329547421eabc8bb91f2c16329b7">More...</a><br /></td></tr>
<tr class="separator:ac5cb329547421eabc8bb91f2c16329b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c7a9c929365a87872d95b62a4d159c5"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a7c7a9c929365a87872d95b62a4d159c5">p</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a7c7a9c929365a87872d95b62a4d159c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a7c7a9c929365a87872d95b62a4d159c5">More...</a><br /></td></tr>
<tr class="separator:a7c7a9c929365a87872d95b62a4d159c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b285cd67a50650112fc13f7caccee07"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a4b285cd67a50650112fc13f7caccee07">p</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a4b285cd67a50650112fc13f7caccee07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman.xhtml#a4b285cd67a50650112fc13f7caccee07">More...</a><br /></td></tr>
<tr class="separator:a4b285cd67a50650112fc13f7caccee07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a080eaccb34518fef7cc0c54df8f73256"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a080eaccb34518fef7cc0c54df8f73256">q</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a></td></tr>
<tr class="memdesc:a080eaccb34518fef7cc0c54df8f73256"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a080eaccb34518fef7cc0c54df8f73256">More...</a><br /></td></tr>
<tr class="separator:a080eaccb34518fef7cc0c54df8f73256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e4f8a0a73353e11ddebbd1b8d1d82f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a83e4f8a0a73353e11ddebbd1b8d1d82f">q</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a83e4f8a0a73353e11ddebbd1b8d1d82f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a83e4f8a0a73353e11ddebbd1b8d1d82f">More...</a><br /></td></tr>
<tr class="separator:a83e4f8a0a73353e11ddebbd1b8d1d82f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e5dbe4814f6b42a296c23498010d37f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a3e5dbe4814f6b42a296c23498010d37f">q</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a3e5dbe4814f6b42a296c23498010d37f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a3e5dbe4814f6b42a296c23498010d37f">More...</a><br /></td></tr>
<tr class="separator:a3e5dbe4814f6b42a296c23498010d37f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af613ee5f0bf4d914c3b551c1f0c56243"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#af613ee5f0bf4d914c3b551c1f0c56243">q</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:af613ee5f0bf4d914c3b551c1f0c56243"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#af613ee5f0bf4d914c3b551c1f0c56243">More...</a><br /></td></tr>
<tr class="separator:af613ee5f0bf4d914c3b551c1f0c56243"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ff65c799a4c81478238546c6c1346c5"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2ff65c799a4c81478238546c6c1346c5">q</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a2ff65c799a4c81478238546c6c1346c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman.xhtml#a2ff65c799a4c81478238546c6c1346c5">More...</a><br /></td></tr>
<tr class="separator:a2ff65c799a4c81478238546c6c1346c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f0875f7b0284b9350529018e6a27af"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a33f0875f7b0284b9350529018e6a27af">q</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a33f0875f7b0284b9350529018e6a27af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q function.  <a href="classfcarouge_1_1kalman.xhtml#a33f0875f7b0284b9350529018e6a27af">More...</a><br /></td></tr>
<tr class="separator:a33f0875f7b0284b9350529018e6a27af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb341c2ac1843c8027c02d480f37891"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a6bb341c2ac1843c8027c02d480f37891">q</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a6bb341c2ac1843c8027c02d480f37891"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q function.  <a href="classfcarouge_1_1kalman.xhtml#a6bb341c2ac1843c8027c02d480f37891">More...</a><br /></td></tr>
<tr class="separator:a6bb341c2ac1843c8027c02d480f37891"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a313170cbaab37277331127b200168da2"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a313170cbaab37277331127b200168da2">r</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a></td></tr>
<tr class="memdesc:a313170cbaab37277331127b200168da2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a313170cbaab37277331127b200168da2">More...</a><br /></td></tr>
<tr class="separator:a313170cbaab37277331127b200168da2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2817f91f637370aea02b56fbf076fa01"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2817f91f637370aea02b56fbf076fa01">r</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a2817f91f637370aea02b56fbf076fa01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a2817f91f637370aea02b56fbf076fa01">More...</a><br /></td></tr>
<tr class="separator:a2817f91f637370aea02b56fbf076fa01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0619da7600a0124f811314fd2021815"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aa0619da7600a0124f811314fd2021815">r</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:aa0619da7600a0124f811314fd2021815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#aa0619da7600a0124f811314fd2021815">More...</a><br /></td></tr>
<tr class="separator:aa0619da7600a0124f811314fd2021815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a527f0da68c4138bad2438b63fb1f58d5"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a527f0da68c4138bad2438b63fb1f58d5">r</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a527f0da68c4138bad2438b63fb1f58d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#a527f0da68c4138bad2438b63fb1f58d5">More...</a><br /></td></tr>
<tr class="separator:a527f0da68c4138bad2438b63fb1f58d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6500c205da750d018f4f8f05dba3a17"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#af6500c205da750d018f4f8f05dba3a17">r</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:af6500c205da750d018f4f8f05dba3a17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman.xhtml#af6500c205da750d018f4f8f05dba3a17">More...</a><br /></td></tr>
<tr class="separator:af6500c205da750d018f4f8f05dba3a17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9085a5ff6f7f9a868f177afb6859ccab"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9085a5ff6f7f9a868f177afb6859ccab">r</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a9085a5ff6f7f9a868f177afb6859ccab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R function.  <a href="classfcarouge_1_1kalman.xhtml#a9085a5ff6f7f9a868f177afb6859ccab">More...</a><br /></td></tr>
<tr class="separator:a9085a5ff6f7f9a868f177afb6859ccab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7ad017f47c9bdea9dc4410caac3f516"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab7ad017f47c9bdea9dc4410caac3f516">r</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:ab7ad017f47c9bdea9dc4410caac3f516"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R function.  <a href="classfcarouge_1_1kalman.xhtml#ab7ad017f47c9bdea9dc4410caac3f516">More...</a><br /></td></tr>
<tr class="separator:ab7ad017f47c9bdea9dc4410caac3f516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f9048640ddd90cd1169f739ed787aa8"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9f9048640ddd90cd1169f739ed787aa8">f</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a></td></tr>
<tr class="memdesc:a9f9048640ddd90cd1169f739ed787aa8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a9f9048640ddd90cd1169f739ed787aa8">More...</a><br /></td></tr>
<tr class="separator:a9f9048640ddd90cd1169f739ed787aa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a36196d86b79b19e6456eb09fedd369"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a0a36196d86b79b19e6456eb09fedd369">f</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;value)</td></tr>
<tr class="memdesc:a0a36196d86b79b19e6456eb09fedd369"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a0a36196d86b79b19e6456eb09fedd369">More...</a><br /></td></tr>
<tr class="separator:a0a36196d86b79b19e6456eb09fedd369"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a353d4448d3be51931e658b14bea01f2e"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a353d4448d3be51931e658b14bea01f2e">f</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a353d4448d3be51931e658b14bea01f2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a353d4448d3be51931e658b14bea01f2e">More...</a><br /></td></tr>
<tr class="separator:a353d4448d3be51931e658b14bea01f2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12b929c9339de8b90bfcdb64d4a43b9f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a12b929c9339de8b90bfcdb64d4a43b9f">f</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a12b929c9339de8b90bfcdb64d4a43b9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a12b929c9339de8b90bfcdb64d4a43b9f">More...</a><br /></td></tr>
<tr class="separator:a12b929c9339de8b90bfcdb64d4a43b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08b65bcb4971e1c62186a3ad74792b77"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a08b65bcb4971e1c62186a3ad74792b77">f</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a08b65bcb4971e1c62186a3ad74792b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman.xhtml#a08b65bcb4971e1c62186a3ad74792b77">More...</a><br /></td></tr>
<tr class="separator:a08b65bcb4971e1c62186a3ad74792b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0867cdc0eb2634c60f6ff580f8ced54c"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a0867cdc0eb2634c60f6ff580f8ced54c">f</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a0867cdc0eb2634c60f6ff580f8ced54c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F function.  <a href="classfcarouge_1_1kalman.xhtml#a0867cdc0eb2634c60f6ff580f8ced54c">More...</a><br /></td></tr>
<tr class="separator:a0867cdc0eb2634c60f6ff580f8ced54c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04e79c76b38977011c643a2abdf822b9"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a04e79c76b38977011c643a2abdf822b9">f</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a04e79c76b38977011c643a2abdf822b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F function.  <a href="classfcarouge_1_1kalman.xhtml#a04e79c76b38977011c643a2abdf822b9">More...</a><br /></td></tr>
<tr class="separator:a04e79c76b38977011c643a2abdf822b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1b7bdfd0003fada764bdff943d4b844"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aa1b7bdfd0003fada764bdff943d4b844">h</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a></td></tr>
<tr class="memdesc:aa1b7bdfd0003fada764bdff943d4b844"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#aa1b7bdfd0003fada764bdff943d4b844">More...</a><br /></td></tr>
<tr class="separator:aa1b7bdfd0003fada764bdff943d4b844"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f7ba705650fe606d346969b4542461"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ae4f7ba705650fe606d346969b4542461">h</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;value)</td></tr>
<tr class="memdesc:ae4f7ba705650fe606d346969b4542461"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#ae4f7ba705650fe606d346969b4542461">More...</a><br /></td></tr>
<tr class="separator:ae4f7ba705650fe606d346969b4542461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3890f39ad42f502ced221c523589fb5"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ae3890f39ad42f502ced221c523589fb5">h</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:ae3890f39ad42f502ced221c523589fb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#ae3890f39ad42f502ced221c523589fb5">More...</a><br /></td></tr>
<tr class="separator:ae3890f39ad42f502ced221c523589fb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1066ada451a1c7567532a9b1e5d4e7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aea1066ada451a1c7567532a9b1e5d4e7">h</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:aea1066ada451a1c7567532a9b1e5d4e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#aea1066ada451a1c7567532a9b1e5d4e7">More...</a><br /></td></tr>
<tr class="separator:aea1066ada451a1c7567532a9b1e5d4e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27858579a85494808867e330e494e00f"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a27858579a85494808867e330e494e00f">h</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a27858579a85494808867e330e494e00f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H.  <a href="classfcarouge_1_1kalman.xhtml#a27858579a85494808867e330e494e00f">More...</a><br /></td></tr>
<tr class="separator:a27858579a85494808867e330e494e00f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab61b4e18f7d84884be30714fc798abff"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab61b4e18f7d84884be30714fc798abff">h</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:ab61b4e18f7d84884be30714fc798abff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H function.  <a href="classfcarouge_1_1kalman.xhtml#ab61b4e18f7d84884be30714fc798abff">More...</a><br /></td></tr>
<tr class="separator:ab61b4e18f7d84884be30714fc798abff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4759de1fd24b2ca223cde81d2c43113"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aa4759de1fd24b2ca223cde81d2c43113">h</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:aa4759de1fd24b2ca223cde81d2c43113"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H function.  <a href="classfcarouge_1_1kalman.xhtml#aa4759de1fd24b2ca223cde81d2c43113">More...</a><br /></td></tr>
<tr class="separator:aa4759de1fd24b2ca223cde81d2c43113"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a149f2679e5030db829b2916baa69009f"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a149f2679e5030db829b2916baa69009f">g</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a></td></tr>
<tr class="memdesc:a149f2679e5030db829b2916baa69009f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a149f2679e5030db829b2916baa69009f">More...</a><br /></td></tr>
<tr class="separator:a149f2679e5030db829b2916baa69009f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ebbd1e5efadf03c81583516ba1272c"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ac6ebbd1e5efadf03c81583516ba1272c">g</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;value)</td></tr>
<tr class="memdesc:ac6ebbd1e5efadf03c81583516ba1272c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#ac6ebbd1e5efadf03c81583516ba1272c">More...</a><br /></td></tr>
<tr class="separator:ac6ebbd1e5efadf03c81583516ba1272c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34e8f0ca78055ab821fe459887fc3d49"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a34e8f0ca78055ab821fe459887fc3d49">g</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a34e8f0ca78055ab821fe459887fc3d49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a34e8f0ca78055ab821fe459887fc3d49">More...</a><br /></td></tr>
<tr class="separator:a34e8f0ca78055ab821fe459887fc3d49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a078ec9389c2496b3fabff75660ae7f7b"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a078ec9389c2496b3fabff75660ae7f7b">g</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a078ec9389c2496b3fabff75660ae7f7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a078ec9389c2496b3fabff75660ae7f7b">More...</a><br /></td></tr>
<tr class="separator:a078ec9389c2496b3fabff75660ae7f7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9376bea14746f52a50858c9325dcf1ef"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9376bea14746f52a50858c9325dcf1ef">g</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a9376bea14746f52a50858c9325dcf1ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman.xhtml#a9376bea14746f52a50858c9325dcf1ef">More...</a><br /></td></tr>
<tr class="separator:a9376bea14746f52a50858c9325dcf1ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb799e8ced902d8aaff9325a612bc1c5"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#adb799e8ced902d8aaff9325a612bc1c5">g</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:adb799e8ced902d8aaff9325a612bc1c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G function.  <a href="classfcarouge_1_1kalman.xhtml#adb799e8ced902d8aaff9325a612bc1c5">More...</a><br /></td></tr>
<tr class="separator:adb799e8ced902d8aaff9325a612bc1c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86bee746cff3d08347157b36a05a7a1a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a86bee746cff3d08347157b36a05a7a1a">g</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a86bee746cff3d08347157b36a05a7a1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G function.  <a href="classfcarouge_1_1kalman.xhtml#a86bee746cff3d08347157b36a05a7a1a">More...</a><br /></td></tr>
<tr class="separator:a86bee746cff3d08347157b36a05a7a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be5fe520d542131af481d239c5a924c"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9be5fe520d542131af481d239c5a924c">k</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a></td></tr>
<tr class="memdesc:a9be5fe520d542131af481d239c5a924c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the gain matrix K.  <a href="classfcarouge_1_1kalman.xhtml#a9be5fe520d542131af481d239c5a924c">More...</a><br /></td></tr>
<tr class="separator:a9be5fe520d542131af481d239c5a924c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a111c882bc52c97a207789cc5db6aacf3"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a111c882bc52c97a207789cc5db6aacf3">y</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a></td></tr>
<tr class="memdesc:a111c882bc52c97a207789cc5db6aacf3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation vector Y.  <a href="classfcarouge_1_1kalman.xhtml#a111c882bc52c97a207789cc5db6aacf3">More...</a><br /></td></tr>
<tr class="separator:a111c882bc52c97a207789cc5db6aacf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba7c68ea0f157085f5710f35797d499"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a2ba7c68ea0f157085f5710f35797d499">s</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a></td></tr>
<tr class="memdesc:a2ba7c68ea0f157085f5710f35797d499"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation uncertainty matrix S.  <a href="classfcarouge_1_1kalman.xhtml#a2ba7c68ea0f157085f5710f35797d499">More...</a><br /></td></tr>
<tr class="separator:a2ba7c68ea0f157085f5710f35797d499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5157efe03fa59171da02dc6dcce0b2cd"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a5157efe03fa59171da02dc6dcce0b2cd">transition</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a5157efe03fa59171da02dc6dcce0b2cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the extended state transition function f(x).  <a href="classfcarouge_1_1kalman.xhtml#a5157efe03fa59171da02dc6dcce0b2cd">More...</a><br /></td></tr>
<tr class="separator:a5157efe03fa59171da02dc6dcce0b2cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a193c41ece11420b7eb0573fe0428efa7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a193c41ece11420b7eb0573fe0428efa7">transition</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a193c41ece11420b7eb0573fe0428efa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the extended state transition function f(x).  <a href="classfcarouge_1_1kalman.xhtml#a193c41ece11420b7eb0573fe0428efa7">More...</a><br /></td></tr>
<tr class="separator:a193c41ece11420b7eb0573fe0428efa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaabe5997ea40e19a88811ef477895d7"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#afaabe5997ea40e19a88811ef477895d7">observation</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:afaabe5997ea40e19a88811ef477895d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the extended state observation function h(x).  <a href="classfcarouge_1_1kalman.xhtml#afaabe5997ea40e19a88811ef477895d7">More...</a><br /></td></tr>
<tr class="separator:afaabe5997ea40e19a88811ef477895d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf36b1b1209a66a74c86b27681eb28dc"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aaf36b1b1209a66a74c86b27681eb28dc">observation</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:aaf36b1b1209a66a74c86b27681eb28dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the extended state observation function h(x).  <a href="classfcarouge_1_1kalman.xhtml#aaf36b1b1209a66a74c86b27681eb28dc">More...</a><br /></td></tr>
<tr class="separator:aaf36b1b1209a66a74c86b27681eb28dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Filtering Member Functions</div></td></tr>
<tr class="memitem:aab1dba08047eb5eb08dfbc8095ea1861"><td class="memTemplParams" colspan="2">template&lt;typename... InputTypes&gt; </td></tr>
<tr class="memitem:aab1dba08047eb5eb08dfbc8095ea1861"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#aab1dba08047eb5eb08dfbc8095ea1861">operator()</a> (const auto &amp;...arguments)</td></tr>
<tr class="memdesc:aab1dba08047eb5eb08dfbc8095ea1861"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a step of the filter.  <a href="classfcarouge_1_1kalman.xhtml#aab1dba08047eb5eb08dfbc8095ea1861">More...</a><br /></td></tr>
<tr class="separator:aab1dba08047eb5eb08dfbc8095ea1861"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71b11bb6c9a898533dfd86ce6eef5c20"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a71b11bb6c9a898533dfd86ce6eef5c20">update</a> (const auto &amp;...arguments)</td></tr>
<tr class="memdesc:a71b11bb6c9a898533dfd86ce6eef5c20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the estimates with the outcome of a measurement.  <a href="classfcarouge_1_1kalman.xhtml#a71b11bb6c9a898533dfd86ce6eef5c20">More...</a><br /></td></tr>
<tr class="separator:a71b11bb6c9a898533dfd86ce6eef5c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a326b305473fba0a1efc17660c94eb199"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a326b305473fba0a1efc17660c94eb199">predict</a> (const auto &amp;...arguments)</td></tr>
<tr class="memdesc:a326b305473fba0a1efc17660c94eb199"><td class="mdescLeft">&#160;</td><td class="mdescRight">Produces estimates of the state variables and uncertainties.  <a href="classfcarouge_1_1kalman.xhtml#a326b305473fba0a1efc17660c94eb199">More...</a><br /></td></tr>
<tr class="separator:a326b305473fba0a1efc17660c94eb199"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-types" name="pri-types"></a>
Private Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Types</div></td></tr>
<tr class="memitem:ab36b602d354fad0d0d0aa93abcdd9f01"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a> = internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, <a class="el" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t</a>&lt; UpdateTypes &gt;, <a class="el" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t</a>&lt; PredictionTypes &gt; &gt;</td></tr>
<tr class="memdesc:ab36b602d354fad0d0d0aa93abcdd9f01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation details of the filter.  <a href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">More...</a><br /></td></tr>
<tr class="separator:ab36b602d354fad0d0d0aa93abcdd9f01"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:a642727d695ea4a1fee490ff7dd6ad7f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a></td></tr>
<tr class="memdesc:a642727d695ea4a1fee490ff7dd6ad7f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates the implementation details of the filter.  <a href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">More...</a><br /></td></tr>
<tr class="separator:a642727d695ea4a1fee490ff7dd6ad7f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename State = double, typename Output = State, typename Input = State, typename Transpose = std::identity, typename Symmetrize = std::identity, typename Divide = std::divides&lt;void&gt;, typename Identity = identity_matrix, typename UpdateTypes = internal::empty_pack_t, typename PredictionTypes = internal::empty_pack_t&gt;<br />
class fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;</div><p >Kalman filter. </p>
<p >A Bayesian filter that uses multivariate Gaussians. Applicable for unimodal and uncorrelated uncertainties. Kalman filters assume white noise, propagation and measurement functions are differentiable, and that the uncertainty stays centered on the state estimate. The filter updates estimates by multiplying Gaussians and predicts estimates by adding Gaussians. Design the state (X, P), the process (F, Q), the measurement (Z, R), the measurement function H, and if the system has control inputs (U, B). Designing a filter is as much art as science.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">State</td><td>The type template parameter of the state vector X. State variables can be observed (measured), or hidden variables (inferred). This is the the mean of the multivariate Gaussian. </td></tr>
    <tr><td class="paramname">Output</td><td>The type template parameter of the measurement vector Z. </td></tr>
    <tr><td class="paramname">Input</td><td>The type template parameter of the control U. </td></tr>
    <tr><td class="paramname">Transpose</td><td>The customization point object template parameter of the matrix transpose functor. </td></tr>
    <tr><td class="paramname">Symmetrize</td><td>The customization point object template parameter of the matrix symmetrization functor. </td></tr>
    <tr><td class="paramname">Divide</td><td>The customization point object template parameter of the matrix division functor. </td></tr>
    <tr><td class="paramname">Identity</td><td>The customization point object template parameter of the matrix identity functor. </td></tr>
    <tr><td class="paramname">UpdateTypes</td><td>The additional update function parameter types passed in through a tuple-like parameter type, composing zero or more types. Parameters such as delta times, variances, or linearized values. The parameters are propagated to the function objects used to compute the state observation H and the observation noise R matrices. The parameters are also propagated to the state observation function object h. </td></tr>
    <tr><td class="paramname">PredictionTypes</td><td>The additional prediction function parameter types passed in through a tuple-like parameter type, composing zero or more types. Parameters such as delta times, variances, or linearized values. The parameters are propagated to the function objects used to compute the process noise Q, the state transition F, and the control transition G matrices. The parameters are also propagated to the state transition function object f.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This class could be usable in constant expressions if <code>std::function</code> could too. The polymorphic function wrapper was used in place of function pointers to enable default initialization from this class, captured member variables.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000013">Todo:</a></b></dt><dd><p class="startdd">Is this filter restricted to Newton's equations of motion? That is only a discretized continuous-time kinematic filter? How about non-Newtonian systems? </p>
<p class="interdd">Would it be beneficial to support initialization list for characteristics? </p>
<p class="interdd">Symmetrization support might be superfluous. How to confirm it is safe to remove? </p>
<p class="interdd">Would we want to support smoothers? </p>
<p class="interdd">How to add or associate constraints on the types and operation to support compilation and semantics? </p>
<p class="interdd">Which constructors to support? </p>
<p class="interdd">Is the Kalman filter a recursive state estimation, confirm terminology? </p>
<p class="interdd">Prepare support for std::format? </p>
<p class="interdd">Prepare support for larger dataset recording for graphing, metrics of large test data to facilitate tuning. </p>
<p class="interdd">Support filter generator? Integration? Reflection in C++... </p>
<p class="interdd">Compare performance of general filter with its equivalent generated? </p>
<p class="interdd">Support ranges operator filter? </p>
<p class="interdd">Support mux pipes <a href="https://github.com/joboccara/pipes">https://github.com/joboccara/pipes</a> operator filter? </p>
<p class="interdd">Reproduce Ardupilot's inertial navigation EKF and comparison benchmarks in SITL (software in the loop simulation). </p>
<p class="interdd">Should we provide the operator[] for the vector characteristics regardless of implementation? And for the matrix ones too? It could simplify client code. </p>
<p class="interdd">Should we provide the operator[] for state directly on the filter? Is the state X always what the user would want? </p>
<p class="interdd">Consider if a fluent interface would be preferable for characteristics? </p>
<p class="interdd">Consider additional constructors? </p>
<p class="interdd">Consider additional characteristics method overloads? </p>
<p class="interdd">A clear or reset member equivalent may be useful for real-time re-initializations but to what default? </p>
<p class="enddd">Could the Input be void by default? Or empty? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a15928894f06259752d02d9ee26b2e47e" name="a15928894f06259752d02d9ee26b2e47e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15928894f06259752d02d9ee26b2e47e">&#9670;&nbsp;</a></span>estimate_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> =  typename implementation::estimate_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the estimated correlated variance matrix P. </p>
<p >Also known as Σ. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ardupilot_soaring_8cpp-example.xhtml#a2">ardupilot_soaring.cpp</a>, <a class="el" href="rocket_altitude_8cpp-example.xhtml#a2">rocket_altitude.cpp</a>, and <a class="el" href="vehicle_location_8cpp-example.xhtml#a2">vehicle_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00193">193</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ad1eeee2aae7756cb1a24350ff802de2a" name="ad1eeee2aae7756cb1a24350ff802de2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1eeee2aae7756cb1a24350ff802de2a">&#9670;&nbsp;</a></span>gain</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a> =  typename implementation::gain</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the gain matrix K. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00217">217</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ab36b602d354fad0d0d0aa93abcdd9f01" name="ab36b602d354fad0d0d0aa93abcdd9f01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab36b602d354fad0d0d0aa93abcdd9f01">&#9670;&nbsp;</a></span>implementation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a> =  internal::kalman&lt;State, Output, Input, Transpose, Symmetrize, Divide, Identity, <a class="el" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t</a>&lt;UpdateTypes&gt;, <a class="el" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t</a>&lt;PredictionTypes&gt; &gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implementation details of the filter. </p>
<p >The internal implementation unpacks the parameter packs from tuple-like types which allows for multiple parameter pack deductions. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00168">168</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a222414fb9c93edb378a0156aa278a811" name="a222414fb9c93edb378a0156aa278a811"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a222414fb9c93edb378a0156aa278a811">&#9670;&nbsp;</a></span>innovation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a> =  typename implementation::innovation</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation vector Y. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00220">220</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ab485e684ce0723c3d6de5dec389c88a6" name="ab485e684ce0723c3d6de5dec389c88a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab485e684ce0723c3d6de5dec389c88a6">&#9670;&nbsp;</a></span>innovation_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a> =  typename implementation::innovation_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation uncertainty matrix S. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00223">223</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="aca54b5a1f438d4c6299ac36035450d3c" name="aca54b5a1f438d4c6299ac36035450d3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca54b5a1f438d4c6299ac36035450d3c">&#9670;&nbsp;</a></span>input</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a> =  typename implementation::input</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control vector U. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a5">rocket_altitude.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00188">188</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a59c62d02fbc8be939e05a135b0cec3b8" name="a59c62d02fbc8be939e05a135b0cec3b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59c62d02fbc8be939e05a135b0cec3b8">&#9670;&nbsp;</a></span>input_control</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> =  typename implementation::input_control</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control transition matrix G. </p>
<p >Also known as B. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a7">rocket_altitude.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00214">214</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a7fd585072f9799aa546943934e1a38e1" name="a7fd585072f9799aa546943934e1a38e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fd585072f9799aa546943934e1a38e1">&#9670;&nbsp;</a></span>output</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a> =  typename implementation::output</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation vector Z. </p>
<p >Also known as Y or O. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ardupilot_soaring_8cpp-example.xhtml#a5">ardupilot_soaring.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00185">185</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a1642332d5ad9d1e135bbe5220961de64" name="a1642332d5ad9d1e135bbe5220961de64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1642332d5ad9d1e135bbe5220961de64">&#9670;&nbsp;</a></span>output_model</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> =  typename implementation::output_model</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation transition matrix H. </p>
<p >Also known as the measurement transition matrix or C. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ardupilot_soaring_8cpp-example.xhtml#a6">ardupilot_soaring.cpp</a>, and <a class="el" href="vehicle_location_8cpp-example.xhtml#a5">vehicle_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00209">209</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a9fac97289314ad4018774b6afbd73716" name="a9fac97289314ad4018774b6afbd73716"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fac97289314ad4018774b6afbd73716">&#9670;&nbsp;</a></span>output_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> =  typename implementation::output_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation noise correlated variance matrix R. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="vehicle_location_8cpp-example.xhtml#a6">vehicle_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00199">199</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a95e201e1563f135b128edbf2c9793e56" name="a95e201e1563f135b128edbf2c9793e56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95e201e1563f135b128edbf2c9793e56">&#9670;&nbsp;</a></span>process_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> =  typename implementation::process_uncertainty</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the process noise correlated variance matrix Q. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ardupilot_soaring_8cpp-example.xhtml#a4">ardupilot_soaring.cpp</a>, <a class="el" href="rocket_altitude_8cpp-example.xhtml#a4">rocket_altitude.cpp</a>, and <a class="el" href="vehicle_location_8cpp-example.xhtml#a3">vehicle_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00196">196</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a1102f87212b368e4e55bcd5d637a600c" name="a1102f87212b368e4e55bcd5d637a600c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1102f87212b368e4e55bcd5d637a600c">&#9670;&nbsp;</a></span>state</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> =  typename implementation::state</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state estimate vector X. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ardupilot_soaring_8cpp-example.xhtml#a3">ardupilot_soaring.cpp</a>, and <a class="el" href="rocket_altitude_8cpp-example.xhtml#a3">rocket_altitude.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00180">180</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ab763d09902667e195848fa899e310beb" name="ab763d09902667e195848fa899e310beb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab763d09902667e195848fa899e310beb">&#9670;&nbsp;</a></span>state_transition</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> =  typename implementation::state_transition</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state transition matrix F. </p>
<p >Also known as the fundamental matrix, propagation, Φ, or A. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="rocket_altitude_8cpp-example.xhtml#a6">rocket_altitude.cpp</a>, and <a class="el" href="vehicle_location_8cpp-example.xhtml#a4">vehicle_location.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00204">204</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a59a9e100ebc62a6d4db11a7e65a06b12" name="a59a9e100ebc62a6d4db11a7e65a06b12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59a9e100ebc62a6d4db11a7e65a06b12">&#9670;&nbsp;</a></span>kalman() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a Kalman filter without configuration. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa3064ce3ec5d541ddb849a7b530b5124" name="aa3064ce3ec5d541ddb849a7b530b5124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3064ce3ec5d541ddb849a7b530b5124">&#9670;&nbsp;</a></span>kalman() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructs a filter. </p>
<p >Constructs the filter with the copy of the contents of the <code>other</code> filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a97c4057f94bf097d2075c2b019a1a9e5" name="a97c4057f94bf097d2075c2b019a1a9e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97c4057f94bf097d2075c2b019a1a9e5">&#9670;&nbsp;</a></span>kalman() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructs a filter. </p>
<p >Move constructor. Constructs the filter with the contents of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aefcc6608c7aa96cd7ea0ab658fd5da54" name="aefcc6608c7aa96cd7ea0ab658fd5da54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefcc6608c7aa96cd7ea0ab658fd5da54">&#9670;&nbsp;</a></span>~kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::~<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructs the kalman filter. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9f9048640ddd90cd1169f739ed787aa8" name="a9f9048640ddd90cd1169f739ed787aa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f9048640ddd90cd1169f739ed787aa8">&#9670;&nbsp;</a></span>f() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state transition matrix F. </p>
<dl class="section return"><dt>Returns</dt><dd>The state transition matrix F.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00651">651</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00652" name="l00652"></a><span class="lineno">  652</span>  {</div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f;</div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a642727d695ea4a1fee490ff7dd6ad7f8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">fcarouge::kalman::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01156">kalman.hpp:1156</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a04e79c76b38977011c643a2abdf822b9" name="a04e79c76b38977011c643a2abdf822b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04e79c76b38977011c643a2abdf822b9">&#9670;&nbsp;</a></span>f() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F function. </p>
<p >For non-linear system, or extended filter, F is the Jacobian of the state transition function: <code>F = ∂f/∂X = ∂fj/∂xi</code> that is each row i contains the derivatives of the state transition function for every element j in the state vector X.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the state transition matrix F function on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00743">743</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00746" name="l00746"></a><span class="lineno">  746</span>  {</div>
<div class="line"><a id="l00747" name="l00747"></a><span class="lineno">  747</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_state_f = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00748" name="l00748"></a><span class="lineno">  748</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a08b65bcb4971e1c62186a3ad74792b77" name="a08b65bcb4971e1c62186a3ad74792b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08b65bcb4971e1c62186a3ad74792b77">&#9670;&nbsp;</a></span>f() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the state transition matrix F. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00699">699</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00702" name="l00702"></a><span class="lineno">  702</span>  {</div>
<div class="line"><a id="l00703" name="l00703"></a><span class="lineno">  703</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(</div>
<div class="line"><a id="l00704" name="l00704"></a><span class="lineno">  704</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00705" name="l00705"></a><span class="lineno">  705</span>                          std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab763d09902667e195848fa899e310beb"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00204">kalman.hpp:204</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a0867cdc0eb2634c60f6ff580f8ced54c" name="a0867cdc0eb2634c60f6ff580f8ced54c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0867cdc0eb2634c60f6ff580f8ced54c">&#9670;&nbsp;</a></span>f() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F function. </p>
<p >For non-linear system, or extended filter, F is the Jacobian of the state transition function: <code>F = ∂f/∂X = ∂fj/∂xi</code> that is each row i contains the derivatives of the state transition function for every element j in the state vector X.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the state transition matrix F function on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00722">722</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00725" name="l00725"></a><span class="lineno">  725</span>  {</div>
<div class="line"><a id="l00726" name="l00726"></a><span class="lineno">  726</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_state_f = callable;</div>
<div class="line"><a id="l00727" name="l00727"></a><span class="lineno">  727</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a12b929c9339de8b90bfcdb64d4a43b9f" name="a12b929c9339de8b90bfcdb64d4a43b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12b929c9339de8b90bfcdb64d4a43b9f">&#9670;&nbsp;</a></span>f() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the state transition matrix F. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00684">684</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span>  {</div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a>{ value, values... });</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a0a36196d86b79b19e6456eb09fedd369" name="a0a36196d86b79b19e6456eb09fedd369"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a36196d86b79b19e6456eb09fedd369">&#9670;&nbsp;</a></span>f() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00661">661</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span>  {</div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = value;</div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a353d4448d3be51931e658b14bea01f2e" name="a353d4448d3be51931e658b14bea01f2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a353d4448d3be51931e658b14bea01f2e">&#9670;&nbsp;</a></span>f() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00671">671</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>  {</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(value);</div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a149f2679e5030db829b2916baa69009f" name="a149f2679e5030db829b2916baa69009f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a149f2679e5030db829b2916baa69009f">&#9670;&nbsp;</a></span>g() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control transition matrix G. </p>
<dl class="section return"><dt>Returns</dt><dd>The control transition matrix G.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00863">863</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00864" name="l00864"></a><span class="lineno">  864</span>  {</div>
<div class="line"><a id="l00865" name="l00865"></a><span class="lineno">  865</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g;</div>
<div class="line"><a id="l00866" name="l00866"></a><span class="lineno">  866</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a86bee746cff3d08347157b36a05a7a1a" name="a86bee746cff3d08347157b36a05a7a1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86bee746cff3d08347157b36a05a7a1a">&#9670;&nbsp;</a></span>g() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the control transition matrix G on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00947">947</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span>  {</div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_control_g = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a9376bea14746f52a50858c9325dcf1ef" name="a9376bea14746f52a50858c9325dcf1ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9376bea14746f52a50858c9325dcf1ef">&#9670;&nbsp;</a></span>g() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the control transition matrix G. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00912">912</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span>  {</div>
<div class="line"><a id="l00917" name="l00917"></a><span class="lineno">  917</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g =</div>
<div class="line"><a id="l00918" name="l00918"></a><span class="lineno">  918</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00919" name="l00919"></a><span class="lineno">  919</span>                                 std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00920" name="l00920"></a><span class="lineno">  920</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a59c62d02fbc8be939e05a135b0cec3b8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00214">kalman.hpp:214</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="adb799e8ced902d8aaff9325a612bc1c5" name="adb799e8ced902d8aaff9325a612bc1c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb799e8ced902d8aaff9325a612bc1c5">&#9670;&nbsp;</a></span>g() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the control transition matrix G on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00931">931</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>  {</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_control_g = callable;</div>
<div class="line"><a id="l00936" name="l00936"></a><span class="lineno">  936</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a078ec9389c2496b3fabff75660ae7f7b" name="a078ec9389c2496b3fabff75660ae7f7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a078ec9389c2496b3fabff75660ae7f7b">&#9670;&nbsp;</a></span>g() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the control transition matrix G. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00896">896</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00900" name="l00900"></a><span class="lineno">  900</span>  {</div>
<div class="line"><a id="l00901" name="l00901"></a><span class="lineno">  901</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a>{ value, values... });</div>
<div class="line"><a id="l00902" name="l00902"></a><span class="lineno">  902</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ac6ebbd1e5efadf03c81583516ba1272c" name="ac6ebbd1e5efadf03c81583516ba1272c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ebbd1e5efadf03c81583516ba1272c">&#9670;&nbsp;</a></span>g() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00873">873</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>  {</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = value;</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a34e8f0ca78055ab821fe459887fc3d49" name="a34e8f0ca78055ab821fe459887fc3d49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34e8f0ca78055ab821fe459887fc3d49">&#9670;&nbsp;</a></span>g() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00883">883</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00884" name="l00884"></a><span class="lineno">  884</span>  {</div>
<div class="line"><a id="l00885" name="l00885"></a><span class="lineno">  885</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = std::move(value);</div>
<div class="line"><a id="l00886" name="l00886"></a><span class="lineno">  886</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aa1b7bdfd0003fada764bdff943d4b844" name="aa1b7bdfd0003fada764bdff943d4b844"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1b7bdfd0003fada764bdff943d4b844">&#9670;&nbsp;</a></span>h() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation transition matrix H. </p>
<dl class="section return"><dt>Returns</dt><dd>The observation, measurement transition matrix H.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00757">757</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00758" name="l00758"></a><span class="lineno">  758</span>  {</div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h;</div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aa4759de1fd24b2ca223cde81d2c43113" name="aa4759de1fd24b2ca223cde81d2c43113"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4759de1fd24b2ca223cde81d2c43113">&#9670;&nbsp;</a></span>h() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H function. </p>
<p >For non-linear system, or extended filter, H is the Jacobian of the state observation function: <code>H = ∂h/∂X = ∂hj/∂xi</code> that is each row i contains the derivatives of the state observation function for every element j in the state vector X.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the observation, measurement transition matrix H on update steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00849">849</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00852" name="l00852"></a><span class="lineno">  852</span>  {</div>
<div class="line"><a id="l00853" name="l00853"></a><span class="lineno">  853</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation_state_h = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00854" name="l00854"></a><span class="lineno">  854</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a27858579a85494808867e330e494e00f" name="a27858579a85494808867e330e494e00f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27858579a85494808867e330e494e00f">&#9670;&nbsp;</a></span>h() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the observation, measurement transition matrix H. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the observation, measurement transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00805">805</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00808" name="l00808"></a><span class="lineno">  808</span>  {</div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h =</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span>                                std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1642332d5ad9d1e135bbe5220961de64"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00209">kalman.hpp:209</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ab61b4e18f7d84884be30714fc798abff" name="ab61b4e18f7d84884be30714fc798abff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab61b4e18f7d84884be30714fc798abff">&#9670;&nbsp;</a></span>h() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H function. </p>
<p >For non-linear system, or extended filter, H is the Jacobian of the state observation function: <code>H = ∂h/∂X = ∂hj/∂xi</code> that is each row i contains the derivatives of the state observation function for every element j in the state vector X.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the observation, measurement transition matrix H on update steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00828">828</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00831" name="l00831"></a><span class="lineno">  831</span>  {</div>
<div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation_state_h = callable;</div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aea1066ada451a1c7567532a9b1e5d4e7" name="aea1066ada451a1c7567532a9b1e5d4e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1066ada451a1c7567532a9b1e5d4e7">&#9670;&nbsp;</a></span>h() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the observation, measurement transition matrix H. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the observation, measurement transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00790">790</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00793" name="l00793"></a><span class="lineno">  793</span>  {</div>
<div class="line"><a id="l00794" name="l00794"></a><span class="lineno">  794</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a>{ value, values... });</div>
<div class="line"><a id="l00795" name="l00795"></a><span class="lineno">  795</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ae4f7ba705650fe606d346969b4542461" name="ae4f7ba705650fe606d346969b4542461"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4f7ba705650fe606d346969b4542461">&#9670;&nbsp;</a></span>h() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied observation transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00767">767</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span>  {</div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = value;</div>
<div class="line"><a id="l00770" name="l00770"></a><span class="lineno">  770</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ae3890f39ad42f502ced221c523589fb5" name="ae3890f39ad42f502ced221c523589fb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3890f39ad42f502ced221c523589fb5">&#9670;&nbsp;</a></span>h() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved observation transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00777">777</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span>  {</div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = std::move(value);</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a9be5fe520d542131af481d239c5a924c" name="a9be5fe520d542131af481d239c5a924c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9be5fe520d542131af481d239c5a924c">&#9670;&nbsp;</a></span>k()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::k </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the gain matrix K. </p>
<dl class="section return"><dt>Returns</dt><dd>The gain matrix K.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00961">961</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00962" name="l00962"></a><span class="lineno">  962</span>  {</div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.k;</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aaf36b1b1209a66a74c86b27681eb28dc" name="aaf36b1b1209a66a74c86b27681eb28dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf36b1b1209a66a74c86b27681eb28dc">&#9670;&nbsp;</a></span>observation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::observation </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the extended state observation function h(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called to compute the observation Z on update steps. The default function <code>h(x) = H * X</code> is suitable for linear systems. For non-linear system, or extended filter, the client implements a linearization of the observation function hand the state observation H matrix is the Jacobian of the state observation function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000020">Todo:</a></b></dt><dd>Help the user with callable type definition, visibility. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01057">1057</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>  {</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="afaabe5997ea40e19a88811ef477895d7" name="afaabe5997ea40e19a88811ef477895d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaabe5997ea40e19a88811ef477895d7">&#9670;&nbsp;</a></span>observation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::observation </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the extended state observation function h(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called to compute the observation Z on update steps. The default function <code>h(x) = H * X</code> is suitable for linear systems. For non-linear system, or extended filter, the client implements a linearization of the observation function hand the state observation H matrix is the Jacobian of the state observation function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000019">Todo:</a></b></dt><dd>Help the user with callable type definition, visibility. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01039">1039</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>  {</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation = callable;</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aab1dba08047eb5eb08dfbc8095ea1861" name="aab1dba08047eb5eb08dfbc8095ea1861"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab1dba08047eb5eb08dfbc8095ea1861">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<div class="memtemplate">
template&lt;typename... InputTypes&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a step of the filter. </p>
<p >Predicts and updates the estimates per prediction arguments, control input, and measurement output.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>The prediction, update, input, and output parameters of the filter, in that order. The arguments need to be compatible with the filter types. The prediction parameters convertible to the <code>PredictionTypes</code> template pack types are passed through for computations of prediction matrices. The update parameters convertible to the <code>UpdateTypes</code> template pack types are passed through for computations of update matrices. The control parameter pack types convertible to the <code>Input</code> template type. The observation parameter pack types convertible to the <code>Output</code> template type. The update and prediction types are explicitly defined with the class definition and the observation parameter pack types are always deduced per the greedy matching rule. However the control parameter pack types must always be explicitly defined per the fair matching rule.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Called as <code>k(...);</code> with prediction values and output values when the filter has no input parameters. The input type list is explicitly empty. Otherwise can be called as <code>k.template operator()&lt;input1_t, input2_t, ...&gt;(...);</code> with prediction values, input values, and output values. The input type list being explicitly specified per the fair matching rule. A lambda can come in handy to reduce the verbose call `const auto kf{ <a href="const auto
&amp;...args">&amp;k</a> { k.template operator()&lt;input1_t, input2_t, ...&gt;(args...); } };<code>then called as</code>kf(...);`.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000021">Todo:</a></b></dt><dd><p class="startdd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
<p class="interdd">Understand why the implementation cannot be moved out of the class. </p>
<p class="enddd">What should be the order of the parameters? Update first? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01101">1101</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01102" name="l01102"></a><span class="lineno"> 1102</span>  {</div>
<div class="line"><a id="l01103" name="l01103"></a><span class="lineno"> 1103</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.template operator()&lt;InputTypes...&gt;(arguments...);</div>
<div class="line"><a id="l01104" name="l01104"></a><span class="lineno"> 1104</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a4ae5a09664832ca35039c426a4a15cc6" name="a4ae5a09664832ca35039c426a4a15cc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ae5a09664832ca35039c426a4a15cc6">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>
<p >Destroys or copy-assigns the contents with a copy of the contents of the other filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="aa2f0430be3a57809a6bdca479c341954" name="aa2f0430be3a57809a6bdca479c341954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2f0430be3a57809a6bdca479c341954">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment operator. </p>
<p >Replaces the contents of the filter with those of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter). The other filter is in a valid but unspecified state afterwards.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a868e7283042616c9fd32ea86745c3ec4" name="a868e7283042616c9fd32ea86745c3ec4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a868e7283042616c9fd32ea86745c3ec4">&#9670;&nbsp;</a></span>p() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the estimated covariance matrix P. </p>
<dl class="section return"><dt>Returns</dt><dd>The estimated correlated variance matrix P.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00390">390</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  {</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p;</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a4b285cd67a50650112fc13f7caccee07" name="a4b285cd67a50650112fc13f7caccee07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b285cd67a50650112fc13f7caccee07">&#9670;&nbsp;</a></span>p() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the estimated covariance matrix P. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00436">436</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>  {</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a15928894f06259752d02d9ee26b2e47e"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00193">kalman.hpp:193</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a7c7a9c929365a87872d95b62a4d159c5" name="a7c7a9c929365a87872d95b62a4d159c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c7a9c929365a87872d95b62a4d159c5">&#9670;&nbsp;</a></span>p() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the estimated covariance matrix P. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00423">423</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>  {</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a922687019e99df6169eb09ddaa396bd7" name="a922687019e99df6169eb09ddaa396bd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a922687019e99df6169eb09ddaa396bd7">&#9670;&nbsp;</a></span>p() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00400">400</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  {</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = value;</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ac5cb329547421eabc8bb91f2c16329b7" name="ac5cb329547421eabc8bb91f2c16329b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5cb329547421eabc8bb91f2c16329b7">&#9670;&nbsp;</a></span>p() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00410">410</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>  {</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(value);</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a326b305473fba0a1efc17660c94eb199" name="a326b305473fba0a1efc17660c94eb199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a326b305473fba0a1efc17660c94eb199">&#9670;&nbsp;</a></span>predict()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::predict </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Produces estimates of the state variables and uncertainties. </p>
<p >Implements the total probability theorem.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>The prediction and input parameters of the filter, in that order. The arguments need to be compatible with the filter types. The prediction parameters convertible to the <code>PredictionTypes</code> template pack types are passed through for computations of prediction matrices. The control parameter pack types convertible to the <code>Input</code> template type. The prediction types are explicitly defined with the class definition.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000023">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients? </p>
<p class="enddd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01144">1144</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01145" name="l01145"></a><span class="lineno"> 1145</span>  {</div>
<div class="line"><a id="l01146" name="l01146"></a><span class="lineno"> 1146</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.predict(arguments...);</div>
<div class="line"><a id="l01147" name="l01147"></a><span class="lineno"> 1147</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a080eaccb34518fef7cc0c54df8f73256" name="a080eaccb34518fef7cc0c54df8f73256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a080eaccb34518fef7cc0c54df8f73256">&#9670;&nbsp;</a></span>q() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the process noise covariance matrix Q. </p>
<dl class="section return"><dt>Returns</dt><dd>The process noise correlated variance matrix Q.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00450">450</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>  {</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q;</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a6bb341c2ac1843c8027c02d480f37891" name="a6bb341c2ac1843c8027c02d480f37891"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb341c2ac1843c8027c02d480f37891">&#9670;&nbsp;</a></span>q() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the process noise covariance matrix Q on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00536">536</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span>  {</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_process_q = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a2ff65c799a4c81478238546c6c1346c5" name="a2ff65c799a4c81478238546c6c1346c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ff65c799a4c81478238546c6c1346c5">&#9670;&nbsp;</a></span>q() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the process noise covariance matrix Q. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers used to set the process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000014">Todo:</a></b></dt><dd>Reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00500">500</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>  {</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>                             std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a95e201e1563f135b128edbf2c9793e56"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00196">kalman.hpp:196</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a33f0875f7b0284b9350529018e6a27af" name="a33f0875f7b0284b9350529018e6a27af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33f0875f7b0284b9350529018e6a27af">&#9670;&nbsp;</a></span>q() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the process noise covariance matrix Q on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000015">Todo:</a></b></dt><dd>Understand why Clang Tidy doesn't find the out-of-line definition. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00520">520</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span>  {</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_process_q = callable;</div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="af613ee5f0bf4d914c3b551c1f0c56243" name="af613ee5f0bf4d914c3b551c1f0c56243"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af613ee5f0bf4d914c3b551c1f0c56243">&#9670;&nbsp;</a></span>q() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the process noise covariance matrix Q. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00483">483</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>  {</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a83e4f8a0a73353e11ddebbd1b8d1d82f" name="a83e4f8a0a73353e11ddebbd1b8d1d82f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e4f8a0a73353e11ddebbd1b8d1d82f">&#9670;&nbsp;</a></span>q() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00460">460</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>  {</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = value;</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a3e5dbe4814f6b42a296c23498010d37f" name="a3e5dbe4814f6b42a296c23498010d37f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e5dbe4814f6b42a296c23498010d37f">&#9670;&nbsp;</a></span>q() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00470">470</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>  {</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(value);</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a313170cbaab37277331127b200168da2" name="a313170cbaab37277331127b200168da2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a313170cbaab37277331127b200168da2">&#9670;&nbsp;</a></span>r() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation noise covariance matrix R. </p>
<p >The variance there is in each measurement.</p>
<dl class="section return"><dt>Returns</dt><dd>The observation noise correlated variance matrix R.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00553">553</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span>  {</div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r;</div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="ab7ad017f47c9bdea9dc4410caac3f516" name="ab7ad017f47c9bdea9dc4410caac3f516"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7ad017f47c9bdea9dc4410caac3f516">&#9670;&nbsp;</a></span>r() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called by the filter to compute the observation noise covariance matrix R on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00637">637</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span>  {</div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_observation_r = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="af6500c205da750d018f4f8f05dba3a17" name="af6500c205da750d018f4f8f05dba3a17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6500c205da750d018f4f8f05dba3a17">&#9670;&nbsp;</a></span>r() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the observation noise covariance matrix R. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00601">601</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>  {</div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(</div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span>                            std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9fac97289314ad4018774b6afbd73716"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00199">kalman.hpp:199</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a9085a5ff6f7f9a868f177afb6859ccab" name="a9085a5ff6f7f9a868f177afb6859ccab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9085a5ff6f7f9a868f177afb6859ccab">&#9670;&nbsp;</a></span>r() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called by the filter to compute the observation noise covariance matrix R on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000016">Todo:</a></b></dt><dd>Understand why Clang Tidy doesn't find the out-of-line definition. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00621">621</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>  {</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno">  625</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_observation_r = callable;</div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a527f0da68c4138bad2438b63fb1f58d5" name="a527f0da68c4138bad2438b63fb1f58d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a527f0da68c4138bad2438b63fb1f58d5">&#9670;&nbsp;</a></span>r() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the observation noise covariance matrix R. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00586">586</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span>  {</div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a2817f91f637370aea02b56fbf076fa01" name="a2817f91f637370aea02b56fbf076fa01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2817f91f637370aea02b56fbf076fa01">&#9670;&nbsp;</a></span>r() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00563">563</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>  {</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = value;</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="aa0619da7600a0124f811314fd2021815" name="aa0619da7600a0124f811314fd2021815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0619da7600a0124f811314fd2021815">&#9670;&nbsp;</a></span>r() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00573">573</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>  {</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(value);</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a2ba7c68ea0f157085f5710f35797d499" name="a2ba7c68ea0f157085f5710f35797d499"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ba7c68ea0f157085f5710f35797d499">&#9670;&nbsp;</a></span>s()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::s </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation uncertainty matrix S. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation uncertainty matrix S.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00985">985</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>  {</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.s;</div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno">  988</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a193c41ece11420b7eb0573fe0428efa7" name="a193c41ece11420b7eb0573fe0428efa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a193c41ece11420b7eb0573fe0428efa7">&#9670;&nbsp;</a></span>transition() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::transition </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the extended state transition function f(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called to compute the next state X on prediction steps. The default function <code>f(x) = F * X</code> is suitable for linear systems. For non-linear system, or extended filter, implement a linearization of the transition function f and the state transition F matrix is the Jacobian of the state transition function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000018">Todo:</a></b></dt><dd>Help the user with callable type definition, visibility. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01021">1021</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>  {</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a5157efe03fa59171da02dc6dcce0b2cd" name="a5157efe03fa59171da02dc6dcce0b2cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5157efe03fa59171da02dc6dcce0b2cd">&#9670;&nbsp;</a></span>transition() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::transition </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the extended state transition function f(x). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called to compute the next state X on prediction steps. The default function <code>f(x) = F * X</code> is suitable for linear systems. For non-linear system, or extended filter, implement a linearization of the transition function f and the state transition F matrix is the Jacobian of the state transition function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000017">Todo:</a></b></dt><dd>Help the user with callable type definition, visibility. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01003">1003</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span>  {</div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition = callable;</div>
<div class="line"><a id="l01006" name="l01006"></a><span class="lineno"> 1006</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a7552965d826e59f1f337ba2220999643" name="a7552965d826e59f1f337ba2220999643"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7552965d826e59f1f337ba2220999643">&#9670;&nbsp;</a></span>u()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::u </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the last control vector U. </p>
<dl class="section return"><dt>Returns</dt><dd>The last control vector U.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00378">378</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  {</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.u;</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a71b11bb6c9a898533dfd86ce6eef5c20" name="a71b11bb6c9a898533dfd86ce6eef5c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71b11bb6c9a898533dfd86ce6eef5c20">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::update </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the estimates with the outcome of a measurement. </p>
<p >Implements the Bayes' theorem. Combine one measurement and the prior estimate.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>The update and output parameters of the filter, in that order. The arguments need to be compatible with the filter types. The update parameters convertible to the <code>UpdateTypes</code> template pack types are passed through for computations of update matrices. The observation parameter pack types convertible to the <code>Output</code> template type. The update types are explicitly defined with the class definition.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000022">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients? </p>
<p class="enddd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01123">1123</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span>  {</div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.update(arguments...);</div>
<div class="line"><a id="l01126" name="l01126"></a><span class="lineno"> 1126</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a7da73fc2bef3808cb47836bf9e8208e5" name="a7da73fc2bef3808cb47836bf9e8208e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7da73fc2bef3808cb47836bf9e8208e5">&#9670;&nbsp;</a></span>x() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state estimate vector X. </p>
<dl class="section return"><dt>Returns</dt><dd>The state estimate vector X.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00307">307</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  {</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x;</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a04f87358de723f8ae31cd0098b54feeb" name="a04f87358de723f8ae31cd0098b54feeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04f87358de723f8ae31cd0098b54feeb">&#9670;&nbsp;</a></span>x() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the state estimate vector X. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00353">353</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>  {</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>                                std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>  }</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1102f87212b368e4e55bcd5d637a600c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00180">kalman.hpp:180</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a232d3cdfe6af3eed0cfe3bbfc1a6a51b" name="a232d3cdfe6af3eed0cfe3bbfc1a6a51b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">&#9670;&nbsp;</a></span>x() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the state estimate vector X. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00340">340</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  {</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a>{ value, values... });</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a7f45fec5e2a499c7874350f27ff16959" name="a7f45fec5e2a499c7874350f27ff16959"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f45fec5e2a499c7874350f27ff16959">&#9670;&nbsp;</a></span>x() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00317">317</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  {</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = value;</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a0c655b621eaaea59e65cce6abe12dbd7" name="a0c655b621eaaea59e65cce6abe12dbd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c655b621eaaea59e65cce6abe12dbd7">&#9670;&nbsp;</a></span>x() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00327">327</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  {</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(value);</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="a111c882bc52c97a207789cc5db6aacf3" name="a111c882bc52c97a207789cc5db6aacf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a111c882bc52c97a207789cc5db6aacf3">&#9670;&nbsp;</a></span>y()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation vector Y. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation vector Y.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00973">973</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span>  {</div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.y;</div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<a id="abaa0de7e5f1ad089a9d7842add690431" name="abaa0de7e5f1ad089a9d7842add690431"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaa0de7e5f1ad089a9d7842add690431">&#9670;&nbsp;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a>
  </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the last observation vector Z. </p>
<dl class="section return"><dt>Returns</dt><dd>The last observation vector Z.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00366">366</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  {</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.z;</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="kalman_8hpp_source.xhtml#l01156">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a642727d695ea4a1fee490ff7dd6ad7f8" name="a642727d695ea4a1fee490ff7dd6ad7f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a642727d695ea4a1fee490ff7dd6ad7f8">&#9670;&nbsp;</a></span>filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename State  = double, typename Output  = State, typename Input  = State, typename Transpose  = std::identity, typename Symmetrize  = std::identity, typename Divide  = std::divides&lt;void&gt;, typename Identity  = identity_matrix, typename UpdateTypes  = internal::empty_pack_t, typename PredictionTypes  = internal::empty_pack_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::filter</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encapsulates the implementation details of the filter. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01156">1156</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="kalman_8hpp_source.xhtml#l00651">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::f()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00863">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::g()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00757">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::h()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00961">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::k()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l01039">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::observation()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l01101">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::operator()()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00390">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::p()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l01144">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::predict()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00450">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::q()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00553">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::r()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00985">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::s()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l01003">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::transition()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00378">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::u()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l01123">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::update()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00307">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::x()</a>, <a class="el" href="kalman_8hpp_source.xhtml#l00973">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::y()</a>, and <a class="el" href="kalman_8hpp_source.xhtml#l00366">fcarouge::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, UpdateTypes, PredictionTypes &gt;::z()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/fcarouge/<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a></li>
    <li class="footer">Generated on Sun Jul 24 2022 01:26:11 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
