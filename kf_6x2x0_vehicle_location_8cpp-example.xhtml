<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: kf_6x2x0_vehicle_location.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kf_6x2x0_vehicle_location_8cpp-example.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kf_6x2x0_vehicle_location.cpp</div></div>
</div><!--header-->
<div class="contents">
<p >Estimating the Vehicle Location.</p>
<p >Estimating the Vehicle Location</p><dl class="section copyright"><dt>Copyright</dt><dd>This example is transcribed from KalmanFilter.NET copyright Alex Becker.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a href="https://www.kalmanfilter.net/multiExamples.html#ex9">https://www.kalmanfilter.net/multiExamples.html#ex9</a></dd></dl>
<p>In this example, we would like to estimate the location of the vehicle in the XY plane. The vehicle has an onboard location sensor that reports X and Y coordinates of the system. We assume constant acceleration dynamics. In this example we don't have a control variable u since we don't have control input. Let us assume a vehicle moving in a straight line in the X direction with a constant velocity. After traveling 400 meters the vehicle turns right, with a turning radius of 300 meters. During the turning maneuver, the vehicle experiences acceleration due to the circular motion (an angular acceleration). The measurements period: Δt = 1s (constant). The random acceleration standard deviation: σa = 0.2 m.s^-2.</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="eigen_2kalman_8hpp.xhtml">fcarouge/eigen/kalman.hpp</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1eigen_1_1sample.xhtml">fcarouge::eigen::sample</a> {</div>
<div class="line"><span class="keyword">namespace </span>{</div>
<div class="line">[[maybe_unused]] <span class="keyword">auto</span> <a id="a0" name="a0"></a><a class="code hl_variable" href="namespacefcarouge_1_1eigen_1_1sample_1_1anonymous__namespace_02kf__6x2x0__vehicle__location_8cpp_03.xhtml#acdca372528c3bc5b53990e4b08602fdc">kf_6x2x0_vehicle_location</a>{[] {</div>
<div class="line">  <span class="comment">// A 6x2x0 filter, constant acceleration dynamic model, no control.</span></div>
<div class="line">  <span class="keyword">using </span><a id="a1" name="a1"></a><a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#acaa4803bfeb8c1cef9285fd03d3c3df4">kalman</a> = kalman&lt;vector&lt;double, 6&gt;, vector&lt;double, 2&gt;&gt;;</div>
<div class="line"> </div>
<div class="line">  <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#acaa4803bfeb8c1cef9285fd03d3c3df4">kalman</a> filter;</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Initialization</span></div>
<div class="line">  <span class="comment">// The state is chosen to be the position, velocity, acceleration in the XY</span></div>
<div class="line">  <span class="comment">// plane: [px, vx, ax, py, vy, ay]. We don&#39;t know the vehicle location; we</span></div>
<div class="line">  <span class="comment">// will set initial position, velocity and acceleration to 0.</span></div>
<div class="line">  filter.x(0., 0., 0., 0., 0., 0.);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Since our initial state vector is a guess, we will set a very high estimate</span></div>
<div class="line">  <span class="comment">// uncertainty. The high estimate uncertainty results in a high Kalman Gain,</span></div>
<div class="line">  <span class="comment">// giving a high weight to the measurement.</span></div>
<div class="line">  filter.p(<a id="a2" name="a2"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a444186ec5bf2e0967fa0bd4e6b864e56">kalman::estimate_uncertainty</a>{{500, 0, 0, 0, 0, 0},</div>
<div class="line">                                        {0, 500, 0, 0, 0, 0},</div>
<div class="line">                                        {0, 0, 500, 0, 0, 0},</div>
<div class="line">                                        {0, 0, 0, 500, 0, 0},</div>
<div class="line">                                        {0, 0, 0, 0, 500, 0},</div>
<div class="line">                                        {0, 0, 0, 0, 0, 500}});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Prediction</span></div>
<div class="line">  <span class="comment">// The process noise matrix Q would be:</span></div>
<div class="line">  <a id="a3" name="a3"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ae228a7a82db4f6cdc07e335a791caf1a">kalman::process_uncertainty</a> q{</div>
<div class="line">      {0.25, 0.5, 0.5, 0, 0, 0}, {0.5, 1, 1, 0, 0, 0}, {0.5, 1, 1, 0, 0, 0},</div>
<div class="line">      {0, 0, 0, 0.25, 0.5, 0.5}, {0, 0, 0, 0.5, 1, 1}, {0, 0, 0, 0.5, 1, 1}};</div>
<div class="line">  q *= 0.2 * 0.2;</div>
<div class="line">  filter.q(std::move(q));</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The state transition matrix F would be:</span></div>
<div class="line">  filter.f(<a id="a4" name="a4"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af4ef6641423a0338e73f9281952f77b3">kalman::state_transition</a>{{1, 1, 0.5, 0, 0, 0},</div>
<div class="line">                                    {0, 1, 1, 0, 0, 0},</div>
<div class="line">                                    {0, 0, 1, 0, 0, 0},</div>
<div class="line">                                    {0, 0, 0, 1, 1, 0.5},</div>
<div class="line">                                    {0, 0, 0, 0, 1, 1},</div>
<div class="line">                                    {0, 0, 0, 0, 0, 1}});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Now we can predict the next state based on the initialization values.</span></div>
<div class="line">  filter.predict();</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Measure and Update</span></div>
<div class="line">  <span class="comment">// The dimension of zn is 2x1 and the dimension of xn is 6x1. Therefore the</span></div>
<div class="line">  <span class="comment">// dimension of the observation matrix H shall be 2x6.</span></div>
<div class="line">  filter.h(<a id="a5" name="a5"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a3c7352e9fb6d828f8d32836d95c257cf">kalman::output_model</a>{{1, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0}});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Assume that the x and y measurements are uncorrelated, i.e. error in the x</span></div>
<div class="line">  <span class="comment">// coordinate measurement doesn&#39;t depend on the error in the y coordinate</span></div>
<div class="line">  <span class="comment">// measurement. In real-life applications, the measurement uncertainty can</span></div>
<div class="line">  <span class="comment">// differ between measurements. In many systems the measurement uncertainty</span></div>
<div class="line">  <span class="comment">// depends on the measurement SNR (signal-to-noise ratio), angle between</span></div>
<div class="line">  <span class="comment">// sensor (or sensors) and target, signal frequency and many other parameters.</span></div>
<div class="line">  <span class="comment">// For the sake of the example simplicity, we will assume a constant</span></div>
<div class="line">  <span class="comment">// measurement uncertainty: R1 = R2...Rn-1 = Rn = R The measurement error</span></div>
<div class="line">  <span class="comment">// standard deviation: σxm = σym = 3m. The variance 9.</span></div>
<div class="line">  filter.r(<a id="a6" name="a6"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af13cf1e1e05b428b557a9c443478a0da">kalman::output_uncertainty</a>{{9, 0}, {0, 9}});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The measurement values: z1 = [-393.66, 300.4]</span></div>
<div class="line">  filter.update(-393.66, 300.4);</div>
<div class="line">  filter.predict();</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// And so on, run a step of the filter, predicting and updating, every</span></div>
<div class="line">  <span class="comment">// measurements period: Δt = 1s (constant, built-in).</span></div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> step{[&amp;filter](<span class="keywordtype">double</span> position_x, <span class="keywordtype">double</span> position_y) {</div>
<div class="line">    filter.update(position_x, position_y);</div>
<div class="line">    filter.predict();</div>
<div class="line">  }};</div>
<div class="line"> </div>
<div class="line">  step(-375.93, 301.78);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Verify the example estimated state at 0.1% accuracy.</span></div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -277.8) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 148.3) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[2] / 94.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[3] / 249.8) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[4] / -85.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[5] / -63.6) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  step(-351.04, 295.1);</div>
<div class="line">  step(-328.96, 305.19);</div>
<div class="line">  step(-299.35, 301.06);</div>
<div class="line">  step(-273.36, 302.05);</div>
<div class="line">  step(-245.89, 300);</div>
<div class="line">  step(-222.58, 303.57);</div>
<div class="line">  step(-198.03, 296.33);</div>
<div class="line">  step(-174.17, 297.65);</div>
<div class="line">  step(-146.32, 297.41);</div>
<div class="line">  step(-123.72, 299.61);</div>
<div class="line">  step(-103.47, 299.6);</div>
<div class="line">  step(-78.23, 302.39);</div>
<div class="line">  step(-52.63, 295.04);</div>
<div class="line">  step(-23.34, 300.09);</div>
<div class="line">  step(25.96, 294.72);</div>
<div class="line">  step(49.72, 298.61);</div>
<div class="line">  step(76.94, 294.64);</div>
<div class="line">  step(95.38, 284.88);</div>
<div class="line">  step(119.83, 272.82);</div>
<div class="line">  step(144.01, 264.93);</div>
<div class="line">  step(161.84, 251.46);</div>
<div class="line">  step(180.56, 241.27);</div>
<div class="line">  step(201.42, 222.98);</div>
<div class="line">  step(222.62, 203.73);</div>
<div class="line">  step(239.4, 184.1);</div>
<div class="line">  step(252.51, 166.12);</div>
<div class="line">  step(266.26, 138.71);</div>
<div class="line">  step(271.75, 119.71);</div>
<div class="line">  step(277.4, 100.41);</div>
<div class="line">  step(294.12, 79.76);</div>
<div class="line">  step(301.23, 50.62);</div>
<div class="line">  step(291.8, 32.99);</div>
<div class="line">  step(299.89, 2.14);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / 298.5) &lt; 0.006 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / -1.65) &lt; 0.006 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[2] / -1.9) &lt; 0.006 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[3] / -22.5) &lt; 0.006 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[4] / -26.1) &lt; 0.006 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[5] / -0.64) &lt; 0.006 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.6% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 11.25) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 4.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 2) / 0.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 2.4) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(2, 2) / 0.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(3, 3) / 11.25) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;At this point, the position uncertainty px = py = 5, which means &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;that the standard deviation of the prediction is square root of 5m.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// As you can see, the Kalman Filter tracks the vehicle quite well. However,</span></div>
<div class="line">  <span class="comment">// when the vehicle starts the turning maneuver, the estimates are not so</span></div>
<div class="line">  <span class="comment">// accurate. After a while, the Kalman Filter accuracy improves. While the</span></div>
<div class="line">  <span class="comment">// vehicle travels along the straight line, the acceleration is constant and</span></div>
<div class="line">  <span class="comment">// equal to zero. However, during the turn maneuver, the vehicle experiences</span></div>
<div class="line">  <span class="comment">// acceleration due to the circular motion - the angular acceleration.</span></div>
<div class="line">  <span class="comment">// Although the angular acceleration is constant, the angular acceleration</span></div>
<div class="line">  <span class="comment">// projection on the x and y axes is not constant, therefore ax and ay are not</span></div>
<div class="line">  <span class="comment">// constant. Our Kalman Filter is designed for a constant acceleration model.</span></div>
<div class="line">  <span class="comment">// Nevertheless, it succeeds in tracking maneuvering vehicle due to a properly</span></div>
<div class="line">  <span class="comment">// chosen σa parameter. I would like to encourage the readers to implement</span></div>
<div class="line">  <span class="comment">// this example in software and see how different values of σa of R influence</span></div>
<div class="line">  <span class="comment">// the actual Kalman Filter accuracy, Kalman Gain convergence, and estimation</span></div>
<div class="line">  <span class="comment">// uncertainty.</span></div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()};</div>
<div class="line"> </div>
<div class="line">} <span class="comment">// namespace</span></div>
<div class="line">} <span class="comment">// namespace fcarouge::eigen::sample</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a3c7352e9fb6d828f8d32836d95c257cf"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a3c7352e9fb6d828f8d32836d95c257cf">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00257">kalman.hpp:257</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a444186ec5bf2e0967fa0bd4e6b864e56"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a444186ec5bf2e0967fa0bd4e6b864e56">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00241">kalman.hpp:241</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae228a7a82db4f6cdc07e335a791caf1a"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae228a7a82db4f6cdc07e335a791caf1a">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00244">kalman.hpp:244</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af13cf1e1e05b428b557a9c443478a0da"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af13cf1e1e05b428b557a9c443478a0da">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00247">kalman.hpp:247</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af4ef6641423a0338e73f9281952f77b3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af4ef6641423a0338e73f9281952f77b3">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00252">kalman.hpp:252</a></div></div>
<div class="ttc" id="aeigen_2kalman_8hpp_xhtml"><div class="ttname"><a href="eigen_2kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">Kalman operation for Eigen 3 types.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_1_1sample_1_1anonymous__namespace_02kf__6x2x0__vehicle__location_8cpp_03_xhtml_acdca372528c3bc5b53990e4b08602fdc"><div class="ttname"><a href="namespacefcarouge_1_1eigen_1_1sample_1_1anonymous__namespace_02kf__6x2x0__vehicle__location_8cpp_03.xhtml#acdca372528c3bc5b53990e4b08602fdc">fcarouge::eigen::sample::anonymous_namespace{kf_6x2x0_vehicle_location.cpp}::kf_6x2x0_vehicle_location</a></div><div class="ttdeci">auto kf_6x2x0_vehicle_location</div><div class="ttdef"><b>Definition:</b> <a href="kf__6x2x0__vehicle__location_8cpp_source.xhtml#l00027">kf_6x2x0_vehicle_location.cpp:27</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1eigen_1_1sample.xhtml">fcarouge::eigen::sample</a></div><div class="ttdef"><b>Definition:</b> <a href="ekf__4x1x0__soaring_8cpp_source.xhtml#l00006">ekf_4x1x0_soaring.cpp:6</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_acaa4803bfeb8c1cef9285fd03d3c3df4"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#acaa4803bfeb8c1cef9285fd03d3c3df4">fcarouge::eigen::kalman</a></div><div class="ttdeci">fcarouge::kalman&lt; State, Output, Input, transpose, divide, identity_matrix, UpdateTypes, PredictionTypes &gt; kalman</div><div class="ttdoc">Eigen-based Kalman filter.</div><div class="ttdef"><b>Definition:</b> <a href="eigen_2kalman_8hpp_source.xhtml#l00082">kalman.hpp:83</a></div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu Oct 20 2022 04:49:22 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
