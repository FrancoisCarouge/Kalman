<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::test::anonymous_namespace{eigen_initialization.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::test::anonymous_namespace{eigen_initialization.cpp} Namespace Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a303fc28c1f0d25034be22be1666a2fec"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto Size&gt; </td></tr>
<tr class="memitem:a303fc28c1f0d25034be22be1666a2fec"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a303fc28c1f0d25034be22be1666a2fec">vector</a> = Eigen::Vector&lt; Type, Size &gt;</td></tr>
<tr class="separator:a303fc28c1f0d25034be22be1666a2fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778d05129b0c49afddba132effcd412e"><td class="memTemplParams" colspan="2">template&lt;typename Type , auto RowSize, auto ColumnSize&gt; </td></tr>
<tr class="memitem:a778d05129b0c49afddba132effcd412e"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix</a> = Eigen::Matrix&lt; Type, RowSize, ColumnSize &gt;</td></tr>
<tr class="separator:a778d05129b0c49afddba132effcd412e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a991d530609aef3e10f6b455c79ffbc3d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a991d530609aef3e10f6b455c79ffbc3d">defaults543</a></td></tr>
<tr class="separator:a991d530609aef3e10f6b455c79ffbc3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa5d89d767ab85f6b030848ca0b7183"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a1fa5d89d767ab85f6b030848ca0b7183">defaults54</a></td></tr>
<tr class="separator:a1fa5d89d767ab85f6b030848ca0b7183"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ebadc8b8c8a56900a05ae40620cdc6d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a7ebadc8b8c8a56900a05ae40620cdc6d">defaults143</a></td></tr>
<tr class="separator:a7ebadc8b8c8a56900a05ae40620cdc6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bee717e0ee1900581eb442a6eda7bf3"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a1bee717e0ee1900581eb442a6eda7bf3">defaults513</a></td></tr>
<tr class="separator:a1bee717e0ee1900581eb442a6eda7bf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0143751961127719a363bf55a9d8a1e5"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a0143751961127719a363bf55a9d8a1e5">defaults541</a></td></tr>
<tr class="separator:a0143751961127719a363bf55a9d8a1e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a364cc76ccc9e880d7a31a8c4d0457c80"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a364cc76ccc9e880d7a31a8c4d0457c80">defaults511</a></td></tr>
<tr class="separator:a364cc76ccc9e880d7a31a8c4d0457c80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58a71bfb2c59642fa2d863c0d6ff1ce8"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a58a71bfb2c59642fa2d863c0d6ff1ce8">defaults141</a></td></tr>
<tr class="separator:a58a71bfb2c59642fa2d863c0d6ff1ce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d409e8814f1ff95ca98965a5aab2bd"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#aa4d409e8814f1ff95ca98965a5aab2bd">defaults113</a></td></tr>
<tr class="separator:aa4d409e8814f1ff95ca98965a5aab2bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a778d05129b0c49afddba132effcd412e" name="a778d05129b0c49afddba132effcd412e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a778d05129b0c49afddba132effcd412e">&#9670;&nbsp;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto RowSize, auto ColumnSize&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::matrix = typedef Eigen::Matrix&lt;Type, RowSize, ColumnSize&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a303fc28c1f0d25034be22be1666a2fec" name="a303fc28c1f0d25034be22be1666a2fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a303fc28c1f0d25034be22be1666a2fec">&#9670;&nbsp;</a></span>vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , auto Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::vector = typedef Eigen::Vector&lt;Type, Size&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="aa4d409e8814f1ff95ca98965a5aab2bd" name="aa4d409e8814f1ff95ca98965a5aab2bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4d409e8814f1ff95ca98965a5aab2bd">&#9670;&nbsp;</a></span>defaults113</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults113</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, double, vector&lt;double, 3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;double, 3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x3{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 1, 3&gt;::Identity</a>()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == i1x3);</div>
<div class="line">  assert(filter.h() == 1);</div>
<div class="line">  assert(filter.k() == 1);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
<div class="ttc" id="anamespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03_xhtml_a778d05129b0c49afddba132effcd412e"><div class="ttname"><a href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::matrix</a></div><div class="ttdeci">Eigen::Matrix&lt; Type, RowSize, ColumnSize &gt; matrix</div><div class="ttdef"><b>Definition:</b> <a href="eigen__initialization_8cpp_source.xhtml#l00051">eigen_initialization.cpp:51</a></div></div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000014">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00264">264</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a58a71bfb2c59642fa2d863c0d6ff1ce8" name="a58a71bfb2c59642fa2d863c0d6ff1ce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58a71bfb2c59642fa2d863c0d6ff1ce8">&#9670;&nbsp;</a></span>defaults141</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults141</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, vector&lt;double, 4&gt;, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;double, 4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x1{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 4, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x4{matrix&lt;double, 1, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;double, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;double, 4, 4&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == 1);</div>
<div class="line">  assert(filter.h() == i4x1);</div>
<div class="line">  assert(filter.k() == i1x4);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000013">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single state and input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a7ebadc8b8c8a56900a05ae40620cdc6d" name="a7ebadc8b8c8a56900a05ae40620cdc6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ebadc8b8c8a56900a05ae40620cdc6d">&#9670;&nbsp;</a></span>defaults143</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults143</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, vector&lt;double, 4&gt;, vector&lt;double, 3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;double, 3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 4, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x1{matrix&lt;double, 4, 1&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x3{matrix&lt;double, 1, 3&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x4{matrix&lt;double, 1, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;double, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;double, 4, 4&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == i1x3);</div>
<div class="line">  assert(filter.h() == i4x1);</div>
<div class="line">  assert(filter.k() == i1x4);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000007">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single state edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a364cc76ccc9e880d7a31a8c4d0457c80" name="a364cc76ccc9e880d7a31a8c4d0457c80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a364cc76ccc9e880d7a31a8c4d0457c80">&#9670;&nbsp;</a></span>defaults511</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults511</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;double, 5&gt;, double, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x5{matrix&lt;double, 1, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 5, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;double, 5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;double, 5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;double, 5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x1);</div>
<div class="line">  assert(filter.h() == i1x5);</div>
<div class="line">  assert(filter.k() == i5x1);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000012">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single output and input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a1bee717e0ee1900581eb442a6eda7bf3" name="a1bee717e0ee1900581eb442a6eda7bf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bee717e0ee1900581eb442a6eda7bf3">&#9670;&nbsp;</a></span>defaults513</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults513</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;double, 5&gt;, double, vector&lt;double, 3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;double, 3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 1, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x3{matrix&lt;double, 5, 3&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{matrix&lt;double, 5, 1&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;double, 5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;double, 5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;double, 5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x3);</div>
<div class="line">  assert(filter.h() == i1x5);</div>
<div class="line">  assert(filter.k() == i5x1);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000009">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single output edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00147">147</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a1fa5d89d767ab85f6b030848ca0b7183" name="a1fa5d89d767ab85f6b030848ca0b7183"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fa5d89d767ab85f6b030848ca0b7183">&#9670;&nbsp;</a></span>defaults54</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults54</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;double, 5&gt;, vector&lt;double, 4&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;double, 4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 4, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x4{matrix&lt;double, 5, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;double, 5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;double, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;double, 4, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;double, 5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;double, 5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.h() == i4x5);</div>
<div class="line">  assert(filter.k() == i5x4);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000005">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, no input. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a0143751961127719a363bf55a9d8a1e5" name="a0143751961127719a363bf55a9d8a1e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0143751961127719a363bf55a9d8a1e5">&#9670;&nbsp;</a></span>defaults541</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults541</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;double, 5&gt;, vector&lt;double, 4&gt;, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;double, 4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a778d05129b0c49afddba132effcd412e">matrix&lt;double, 4, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{matrix&lt;double, 5, 1&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x4{matrix&lt;double, 5, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;double, 5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;double, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;double, 4, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;double, 5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;double, 5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x1);</div>
<div class="line">  assert(filter.h() == i4x5);</div>
<div class="line">  assert(filter.k() == i5x4);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000011">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00177">177</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a991d530609aef3e10f6b455c79ffbc3d" name="a991d530609aef3e10f6b455c79ffbc3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a991d530609aef3e10f6b455c79ffbc3d">&#9670;&nbsp;</a></span>defaults543</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::defaults543</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="test"><dt><b><a class="el" href="test.xhtml#_test000004">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml">anonymous_namespace{eigen_initialization.cpp}</a></li>
    <li class="footer">Generated on Sun Nov 20 2022 23:51:27 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
