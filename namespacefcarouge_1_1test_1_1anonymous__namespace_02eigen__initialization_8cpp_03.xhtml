<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::test::anonymous_namespace{eigen_initialization.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.2.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::test::anonymous_namespace{eigen_initialization.cpp} Namespace Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a4e3ab7c694973102e7c5272559277794"><td class="memTemplParams" colspan="2">template&lt;auto Size&gt; </td></tr>
<tr class="memitem:a4e3ab7c694973102e7c5272559277794"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a4e3ab7c694973102e7c5272559277794">vector</a> = Eigen::Vector&lt; double, Size &gt;</td></tr>
<tr class="separator:a4e3ab7c694973102e7c5272559277794"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3e5b3ff8809e6c91d631846978e3748"><td class="memTemplParams" colspan="2">template&lt;auto Row, auto Column&gt; </td></tr>
<tr class="memitem:ac3e5b3ff8809e6c91d631846978e3748"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix</a> = Eigen::Matrix&lt; double, Row, Column &gt;</td></tr>
<tr class="separator:ac3e5b3ff8809e6c91d631846978e3748"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a1e9e5ac7c1d48dc8314d842df871a821"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a1e9e5ac7c1d48dc8314d842df871a821">kalman543</a></td></tr>
<tr class="separator:a1e9e5ac7c1d48dc8314d842df871a821"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1092b6610d73a3fa7ee2b374060427f8"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a1092b6610d73a3fa7ee2b374060427f8">kalman54</a></td></tr>
<tr class="separator:a1092b6610d73a3fa7ee2b374060427f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a162c2eba497cb5500879448a051df5ef"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a162c2eba497cb5500879448a051df5ef">kalman143</a></td></tr>
<tr class="separator:a162c2eba497cb5500879448a051df5ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2393d12521f9f367f84152249fd528"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#aeb2393d12521f9f367f84152249fd528">kalman513</a></td></tr>
<tr class="separator:aeb2393d12521f9f367f84152249fd528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeefaa840d02eaeb158891aab2e4fdca"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#aaeefaa840d02eaeb158891aab2e4fdca">kalman541</a></td></tr>
<tr class="separator:aaeefaa840d02eaeb158891aab2e4fdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac03084763746ab37c5552d66a8501099"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac03084763746ab37c5552d66a8501099">kalman511</a></td></tr>
<tr class="separator:ac03084763746ab37c5552d66a8501099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cab8707dadaf3dfcba6768b47ab308c"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#a3cab8707dadaf3dfcba6768b47ab308c">kalman141</a></td></tr>
<tr class="separator:a3cab8707dadaf3dfcba6768b47ab308c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2367a0e31dae657282581cae39b9e5e"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#af2367a0e31dae657282581cae39b9e5e">kalman113</a></td></tr>
<tr class="separator:af2367a0e31dae657282581cae39b9e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ac3e5b3ff8809e6c91d631846978e3748" name="ac3e5b3ff8809e6c91d631846978e3748"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3e5b3ff8809e6c91d631846978e3748">&#9670;&nbsp;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto Row, auto Column&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::matrix = typedef Eigen::Matrix&lt;double, Row, Column&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a4e3ab7c694973102e7c5272559277794" name="a4e3ab7c694973102e7c5272559277794"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e3ab7c694973102e7c5272559277794">&#9670;&nbsp;</a></span>vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::vector = typedef Eigen::Vector&lt;double, Size&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="af2367a0e31dae657282581cae39b9e5e" name="af2367a0e31dae657282581cae39b9e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2367a0e31dae657282581cae39b9e5e">&#9670;&nbsp;</a></span>kalman113</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman113</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, double, vector&lt;3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x3{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;1, 3&gt;::Identity</a>()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == i1x3);</div>
<div class="line">  assert(filter.h() == 1);</div>
<div class="line">  assert(filter.k() == 1);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
<div class="ttc" id="anamespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03_xhtml_ac3e5b3ff8809e6c91d631846978e3748"><div class="ttname"><a href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::matrix</a></div><div class="ttdeci">Eigen::Matrix&lt; double, Row, Column &gt; matrix</div><div class="ttdef"><b>Definition:</b> <a href="eigen__initialization_8cpp_source.xhtml#l00051">eigen_initialization.cpp:51</a></div></div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000011">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00263">263</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a3cab8707dadaf3dfcba6768b47ab308c" name="a3cab8707dadaf3dfcba6768b47ab308c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cab8707dadaf3dfcba6768b47ab308c">&#9670;&nbsp;</a></span>kalman141</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman141</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, vector&lt;4&gt;, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x1{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;4, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x4{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;1, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;4, 4&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == 1);</div>
<div class="line">  assert(filter.h() == i4x1);</div>
<div class="line">  assert(filter.k() == i1x4);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
<div class="ttc" id="anamespacefcarouge_xhtml_aecf517c1ef8729e9ddbd3d6de12e31f7"><div class="ttname"><a href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">fcarouge::matrix</a></div><div class="ttdeci">quotient&lt; Row, Column &gt; matrix</div><div class="ttdoc">The matrix type satisfying X * Row = Column.</div><div class="ttdef"><b>Definition:</b> <a href="utility_8hpp_source.xhtml#l00086">utility.hpp:86</a></div></div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000010">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single state and input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a162c2eba497cb5500879448a051df5ef" name="a162c2eba497cb5500879448a051df5ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a162c2eba497cb5500879448a051df5ef">&#9670;&nbsp;</a></span>kalman143</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman143</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;double, vector&lt;4&gt;, vector&lt;3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;4, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x1{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;4, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x3{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;1, 3&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x4{matrix&lt;1, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;4, 4&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == 1);</div>
<div class="line">  assert(filter.g() == i1x3);</div>
<div class="line">  assert(filter.h() == i4x1);</div>
<div class="line">  assert(filter.k() == i1x4);</div>
<div class="line">  assert(filter.p() == 1);</div>
<div class="line">  assert(filter.q() == 0 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == 0 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000006">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single state edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="ac03084763746ab37c5552d66a8501099" name="ac03084763746ab37c5552d66a8501099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac03084763746ab37c5552d66a8501099">&#9670;&nbsp;</a></span>kalman511</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman511</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;5&gt;, double, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x5{matrix&lt;1, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;5, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x1);</div>
<div class="line">  assert(filter.h() == i1x5);</div>
<div class="line">  assert(filter.k() == i5x1);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000009">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single output and input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00208">208</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="aeb2393d12521f9f367f84152249fd528" name="aeb2393d12521f9f367f84152249fd528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb2393d12521f9f367f84152249fd528">&#9670;&nbsp;</a></span>kalman513</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman513</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;5&gt;, double, vector&lt;3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i1x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;1, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x3{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 3&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x3);</div>
<div class="line">  assert(filter.h() == i1x5);</div>
<div class="line">  assert(filter.k() == i5x1);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == 0 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == 1);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == 0);</div>
<div class="line">  assert(filter.z() == 0);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000007">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single output edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a1092b6610d73a3fa7ee2b374060427f8" name="a1092b6610d73a3fa7ee2b374060427f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1092b6610d73a3fa7ee2b374060427f8">&#9670;&nbsp;</a></span>kalman54</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman54</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;5&gt;, vector&lt;4&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;4, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x4{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;4, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.h() == i4x5);</div>
<div class="line">  assert(filter.k() == i5x4);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000005">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, no input. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00087">87</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="aaeefaa840d02eaeb158891aab2e4fdca" name="aaeefaa840d02eaeb158891aab2e4fdca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeefaa840d02eaeb158891aab2e4fdca">&#9670;&nbsp;</a></span>kalman541</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman541</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;5&gt;, vector&lt;4&gt;, <span class="keywordtype">double</span>&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{matrix&lt;4, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x5{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;4, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x1{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 1&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x4{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;4, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x1);</div>
<div class="line">  assert(filter.h() == i4x5);</div>
<div class="line">  assert(filter.k() == i5x4);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == 0 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000008">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters, single input edge case. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
<a id="a1e9e5ac7c1d48dc8314d842df871a821" name="a1e9e5ac7c1d48dc8314d842df871a821"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e9e5ac7c1d48dc8314d842df871a821">&#9670;&nbsp;</a></span>kalman543</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::test::anonymous_namespace{eigen_initialization.cpp}::kalman543</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{[] {</div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;vector&lt;5&gt;, vector&lt;4&gt;, vector&lt;3&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z3x1{vector&lt;3&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x4{<a class="code hl_typedef" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml#ac3e5b3ff8809e6c91d631846978e3748">matrix&lt;4, 4&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i4x5{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;4, 5&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x3{<a class="code hl_typedef" href="namespacefcarouge.xhtml#aecf517c1ef8729e9ddbd3d6de12e31f7">matrix&lt;5, 3&gt;::Identity</a>()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x4{matrix&lt;5, 4&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> i5x5{matrix&lt;5, 5&gt;::Identity()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x1{vector&lt;4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z4x4{matrix&lt;4, 4&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x1{vector&lt;5&gt;::Zero()};</div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> z5x5{matrix&lt;5, 5&gt;::Zero()};</div>
<div class="line"> </div>
<div class="line">  assert(filter.f() == i5x5);</div>
<div class="line">  assert(filter.g() == i5x3);</div>
<div class="line">  assert(filter.h() == i4x5);</div>
<div class="line">  assert(filter.k() == i5x4);</div>
<div class="line">  assert(filter.p() == i5x5);</div>
<div class="line">  assert(filter.q() == z5x5 &amp;&amp; <span class="stringliteral">&quot;No process noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.r() == z4x4 &amp;&amp; <span class="stringliteral">&quot;No observation noise by default.&quot;</span>);</div>
<div class="line">  assert(filter.s() == i4x4);</div>
<div class="line">  assert(filter.u() == z3x1 &amp;&amp; <span class="stringliteral">&quot;No initial control.&quot;</span>);</div>
<div class="line">  assert(filter.x() == z5x1 &amp;&amp; <span class="stringliteral">&quot;Origin state.&quot;</span>);</div>
<div class="line">  assert(filter.y() == z4x1);</div>
<div class="line">  assert(filter.z() == z4x1);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()}</div>
</div><!-- fragment --><dl class="test"><dt><b><a class="el" href="test.xhtml#_test000004">Test:</a></b></dt><dd>Verifies default values are initialized for multi-dimension filters. </dd></dl>

<p class="definition">Definition at line <a class="el" href="eigen__initialization_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="eigen__initialization_8cpp_source.xhtml">eigen_initialization.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1test_1_1anonymous__namespace_02eigen__initialization_8cpp_03.xhtml">anonymous_namespace{eigen_initialization.cpp}</a></li>
    <li class="footer">Generated on Sun Feb 12 2023 20:46:12 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
