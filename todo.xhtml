<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: Todo List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('todo.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div><div class="header">
  <div class="headertitle"><div class="title">Todo List </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt>Member <a class="el" href="structfcarouge_1_1eigen_1_1internal_1_1divide.xhtml#a37a63ff235f1dba2aa6408d834f051e5">fcarouge::eigen::internal::divide::operator()</a>  (const auto &amp;numerator, const auto &amp;denominator) const -&gt; typename Eigen::Matrix&lt; typename std::decay_t&lt; decltype(numerator)&gt;::Scalar, std::decay_t&lt; decltype(numerator)&gt;::RowsAtCompileTime, std::decay_t&lt; decltype(denominator)&gt;::RowsAtCompileTime &gt;</dt>
<dd><a class="anchor" id="_todo000002"></a>Why compilation fails if we specify the return type in the body of the function?  </dd>
<dt>Member <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#af26346d4c53333bff5636d953aaa1562">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::update</a>  (const auto &amp;...output_z)</dt>
<dd><p class="startdd"><a class="anchor" id="_todo000003"></a>Do we want to allow the client to view the gain k? And the residual y? </p>
<p class="interdd"></p>
<p class="enddd">Do we want to store i - k * h in a temporary result for reuse?  </p>
</dd>
<dt>Member <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml#a881469cc203c78686835d8c20d016c10">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::x</a>  </dt>
<dd><a class="anchor" id="_todo000001"></a>Is there a simpler, more portable way to get a zero initialization?  </dd>
<dt>Class <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;</a>  </dt>
<dd><p class="startdd"><a class="anchor" id="_todo000004"></a>Is this filter restricted to Newton's equations of motion? That is only a discretized continuous-time kinematic filter? How about non-Newtonian systems? </p>
<p class="interdd"></p>
<p class="interdd">Would it be beneficial to support <code>Type</code> and <code>value_type</code> prior to the <code>State</code> type template parameter? </p>
<p class="interdd"></p>
<p class="interdd">Would it be beneficial to support initialization list for characteristis? </p>
<p class="interdd"></p>
<p class="interdd">Symmetrization support might be superflous. How to confirm it is safe to remove? </p>
<p class="interdd"></p>
<p class="interdd">Would we want to support smoothers? </p>
<p class="interdd"></p>
<p class="interdd">How to add or associate constraints on the types and operation to support compilation and semantics? </p>
<p class="interdd"></p>
<p class="interdd">Which constructors to support? </p>
<p class="interdd"></p>
<p class="enddd">Is the Kalman filter a recursive state estimation?  </p>
</dd>
<dt>Member <a class="el" href="classfcarouge_1_1kalman.xhtml#a82be0bedc54ec91ad3e21de6f3039bc8">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::operator()</a>  (const PredictionArguments &amp;...arguments, const auto &amp;...input_u, const auto &amp;...output_z)</dt>
<dd><a class="anchor" id="_todo000007"></a>Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable?  </dd>
<dt>Member <a class="el" href="classfcarouge_1_1kalman.xhtml#aa57af6d47ba33e9c02639ee317eb5ee1">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::predict</a>  (const PredictionArguments &amp;...arguments, const auto &amp;...input_u)</dt>
<dd><p class="startdd"><a class="anchor" id="_todo000009"></a>Consider whether this method needs to exist or if the operator() is sufficient for all clients. </p>
<p class="interdd"></p>
<p class="enddd">Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable?  </p>
</dd>
<dt>Member <a class="el" href="classfcarouge_1_1kalman.xhtml#ad70adacbbc4958c2295b2ed621a4e542">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::q</a>  (const auto &amp;value, const auto &amp;...values)</dt>
<dd><a class="anchor" id="_todo000005"></a>Don't we need to reset functions or values when the other is set?  </dd>
<dt>Member <a class="el" href="classfcarouge_1_1kalman.xhtml#ad61561db60647bf2b7f54ff372ba1e70">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::update</a>  (const auto &amp;...output_z)</dt>
<dd><p class="startdd"><a class="anchor" id="_todo000008"></a>Consider whether this method needs to exist or if the operator() is sufficient for all clients. </p>
<p class="interdd"></p>
<p class="enddd">Consider if returning the state vector X would be preferrable? And if it would be compatible with an ES-EKF implementation? Or if a fluent interface would be preferrable?  </p>
</dd>
<dt>Member <a class="el" href="classfcarouge_1_1kalman.xhtml#aa4efb19b9d90e6c3514e8b03d9f3abb3">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, Multiply, PredictionArguments &gt;::x</a>  (const auto &amp;value, const auto &amp;...values)</dt>
<dd><a class="anchor" id="_todo000006"></a>Consider if a fluent interface would be preferrable? In addition to constructors? Same question for all characteristics set methods. </dd>
</dl>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sat May 21 2022 21:15:35 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
