<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: include/fcarouge/internal/kalman.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('internal_2kalman_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kalman.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="internal_2kalman_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*_  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> | |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> | &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> |  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> | . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> |_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter for C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_INTERNAL_KALMAN_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_INTERNAL_KALMAN_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1internal.xhtml">fcarouge::internal</a></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>{</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="keyword">struct </span><a class="code hl_typedef" href="namespacefcarouge.xhtml#ae1d712e36360de9746e1c1424870bbb3">identity_matrix</a> {</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator()() const noexcept</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  {</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <span class="keywordflow">return</span> Type{ 1 };</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  }</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>};</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Transpose,</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>          <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide, <span class="keyword">typename</span> Identity,</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>          <span class="keyword">typename</span> UpdateArguments, <span class="keyword">typename</span> PredictionArguments&gt;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="keyword">struct </span><a class="code hl_typedef" href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a41a6a60c1495641760e4ac1dfffca2b8">kalman</a> {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>};</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Transpose,</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>          <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide, <span class="keyword">typename</span> Identity,</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>          <span class="keyword">typename</span>... UpdateArguments, <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="keyword">struct </span><a class="code hl_typedef" href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a41a6a60c1495641760e4ac1dfffca2b8">kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>              std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>              std::tuple&lt;PredictionArguments...&gt;&gt; {</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keyword">using</span> state = State;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keyword">using</span> output = Output;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  <span class="keyword">using</span> input = Input;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  <span class="keyword">using</span> estimate_uncertainty =</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, State, State&gt;&gt;;</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keyword">using</span> process_uncertainty =</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, State, State&gt;&gt;;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">using</span> output_uncertainty =</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, Output, Output&gt;&gt;;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="keyword">using</span> state_transition =</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, State, State&gt;&gt;;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <span class="keyword">using</span> output_model =</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, Output, State&gt;&gt;;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="keyword">using</span> input_control =</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>      std::decay_t&lt;std::invoke_result_t&lt;Divide, State, Input&gt;&gt;;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="keyword">using</span> gain = std::decay_t&lt;std::invoke_result_t&lt;Transpose, output_model&gt;&gt;;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  <span class="keyword">using</span> innovation = output;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keyword">using</span> innovation_uncertainty = output_uncertainty;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  state x{ 0 * Identity().template operator()&lt;state&gt;() };</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  estimate_uncertainty p{</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    Identity().template operator()&lt;estimate_uncertainty&gt;()</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  };</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  process_uncertainty q{</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    0 * Identity().template operator()&lt;process_uncertainty&gt;()</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  };</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  output_uncertainty r{ 0 *</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>                        Identity().template operator()&lt;output_uncertainty&gt;() };</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  output_model h{ Identity().template operator()&lt;output_model&gt;() };</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  state_transition f{ Identity().template operator()&lt;state_transition&gt;() };</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  input_control g{ Identity().template operator()&lt;input_control&gt;() };</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  gain k{ Identity().template operator()&lt;gain&gt;() };</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  innovation y{ 0 * Identity().template operator()&lt;innovation&gt;() };</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  innovation_uncertainty s{</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    Identity().template operator()&lt;innovation_uncertainty&gt;()</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  };</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  output z{ 0 * Identity().template operator()&lt;output&gt;() };</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  input u{ 0 * Identity().template operator()&lt;input&gt;() };</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  std::function&lt;output_model(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> UpdateArguments &amp;...)&gt;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>      observation_state_h{</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>        [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x,</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>               <span class="keyword">const</span> UpdateArguments &amp;...arguments) -&gt; output_model {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>          <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(x);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>          (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>          <span class="keywordflow">return</span> h;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>        }</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>      };</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  std::function&lt;output_uncertainty(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> output &amp;,</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>                                   <span class="keyword">const</span> UpdateArguments &amp;...)&gt;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>      noise_observation_r{</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>        [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x, <span class="keyword">const</span> output &amp;z,</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>               <span class="keyword">const</span> UpdateArguments &amp;...arguments) -&gt; output_uncertainty {</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>          <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(x);</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>          <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(z);</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>          (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>          <span class="keywordflow">return</span> r;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>        }</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>      };</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  std::function&lt;state_transition(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> PredictionArguments &amp;...,</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>                                 <span class="keyword">const</span> input &amp;)&gt;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>      transition_state_f{ [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x,</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>                                 <span class="keyword">const</span> PredictionArguments &amp;...arguments,</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>                                 <span class="keyword">const</span> input &amp;u) -&gt; state_transition {</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>        <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(x);</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>        (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>        <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(u);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>        <span class="keywordflow">return</span> f;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>      } };</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  std::function&lt;process_uncertainty(<span class="keyword">const</span> state &amp;,</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>                                    <span class="keyword">const</span> PredictionArguments &amp;...)&gt;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>      noise_process_q{</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>        [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x,</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>               <span class="keyword">const</span> PredictionArguments &amp;...arguments) -&gt; process_uncertainty {</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>          <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(x);</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>          (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>          <span class="keywordflow">return</span> q;</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>        }</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>      };</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  std::function&lt;input_control(<span class="keyword">const</span> PredictionArguments &amp;...)&gt;</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>      transition_control_g{</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>        [<span class="keyword">this</span>](<span class="keyword">const</span> PredictionArguments &amp;...arguments) -&gt; input_control {</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>          (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>          <span class="keywordflow">return</span> g;</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>        }</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>      };</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  std::function&lt;state(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> PredictionArguments &amp;...)&gt;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>      transition{ [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x,</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>                         <span class="keyword">const</span> PredictionArguments &amp;...arguments) -&gt; state {</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>        (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>        <span class="keywordflow">return</span> f * x;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>      } };</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  std::function&lt;output(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> UpdateArguments &amp;...arguments)&gt;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>      observation{ [<span class="keyword">this</span>](<span class="keyword">const</span> state &amp;x,</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>                          <span class="keyword">const</span> UpdateArguments &amp;...arguments) -&gt; output {</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>        (<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(arguments), ...);</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>        <span class="keywordflow">return</span> h * x;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>      } };</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  Transpose <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  Divide <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af4a0f022ca9724e0e5e4a24732781365">divide</a>;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  Symmetrize <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af67bfce173c998d182c8d40f8dccf65c">symmetrize</a>;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  Identity identity;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> update(<span class="keyword">const</span> UpdateArguments &amp;...arguments,</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>                               <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z)</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  {</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>    <span class="keyword">const</span> <span class="keyword">auto</span> i{ identity.template operator()&lt;estimate_uncertainty&gt;() };</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>    z = output{ output_z... };</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    h = observation_state_h(x, arguments...); <span class="comment">// x, z, args?</span></div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    r = noise_observation_r(x, z, arguments...);</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    s = h * p * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(h) + r;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    k = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af4a0f022ca9724e0e5e4a24732781365">divide</a>(p * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(h), s);</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>    y = z - observation(x, arguments...);</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>    x = x + k * y;</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>    p = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af67bfce173c998d182c8d40f8dccf65c">symmetrize</a>(estimate_uncertainty{</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>        (i - k * h) * p * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(i - k * h) + k * r * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(k) });</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  }</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments,</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>                                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u)</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  {</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>    u = input{ input_u... };</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>    f = transition_state_f(x, arguments..., u); <span class="comment">// x, u, args?</span></div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    q = noise_process_q(x, arguments...); <span class="comment">// x, u, args?</span></div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>    g = transition_control_g(arguments...); <span class="comment">// extend?</span></div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>    x = f * x + g * u;</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>    p = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af67bfce173c998d182c8d40f8dccf65c">symmetrize</a>(estimate_uncertainty{ f * p * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(f) + q });</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  }</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments)</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  {</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    f = transition_state_f(x, arguments..., input{});</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>    q = noise_process_q(x, arguments...);</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>    x = transition(x, arguments...);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    p = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#af67bfce173c998d182c8d40f8dccf65c">symmetrize</a>(estimate_uncertainty{ f * p * <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">transpose</a>(f) + q });</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  }</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>};</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>} <span class="comment">// namespace fcarouge::internal</span></div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_INTERNAL_KALMAN_HPP</span></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_1_1internal_xhtml_a41a6a60c1495641760e4ac1dfffca2b8"><div class="ttname"><a href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a41a6a60c1495641760e4ac1dfffca2b8">fcarouge::eigen::internal::kalman</a></div><div class="ttdeci">fcarouge::kalman&lt; Type, std::conditional_t&lt; State==1, Type, Eigen::Vector&lt; Type, State &gt; &gt;, std::conditional_t&lt; Output==1, Type, Eigen::Vector&lt; Type, Output &gt; &gt;, std::conditional_t&lt; Input==1, Type, Eigen::Vector&lt; Type, Input &gt; &gt;, transpose, symmetrize, divide, identity_matrix, UpdateArguments, PredictionArguments &gt; kalman</div><div class="ttdef"><b>Definition:</b> <a href="eigen_8hpp_source.xhtml#l00250">eigen.hpp:254</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_aee16b54624e2726129560ae810e805ec"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#aee16b54624e2726129560ae810e805ec">fcarouge::eigen::transpose</a></div><div class="ttdeci">internal::transpose transpose</div><div class="ttdoc">Function object for performing Eigen matrix transposition.</div><div class="ttdef"><b>Definition:</b> <a href="kalman__eigen_8hpp_source.xhtml#l00053">kalman_eigen.hpp:53</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_af4a0f022ca9724e0e5e4a24732781365"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#af4a0f022ca9724e0e5e4a24732781365">fcarouge::eigen::divide</a></div><div class="ttdeci">internal::divide divide</div><div class="ttdoc">Function object for performing Eigen matrix division.</div><div class="ttdef"><b>Definition:</b> <a href="kalman__eigen_8hpp_source.xhtml#l00059">kalman_eigen.hpp:59</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_af67bfce173c998d182c8d40f8dccf65c"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#af67bfce173c998d182c8d40f8dccf65c">fcarouge::eigen::symmetrize</a></div><div class="ttdeci">internal::symmetrize symmetrize</div><div class="ttdoc">Function object for performing Eigen matrix symmetrization.</div><div class="ttdef"><b>Definition:</b> <a href="kalman__eigen_8hpp_source.xhtml#l00056">kalman_eigen.hpp:56</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1internal_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1internal.xhtml">fcarouge::internal</a></div><div class="ttdoc">Internal implementation details.</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_ae1d712e36360de9746e1c1424870bbb3"><div class="ttname"><a href="namespacefcarouge.xhtml#ae1d712e36360de9746e1c1424870bbb3">fcarouge::identity_matrix</a></div><div class="ttdeci">internal::identity_matrix identity_matrix</div><div class="ttdoc">Function object for providing an identity matrix.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00057">kalman.hpp:57</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="dir_378fe1080454d2b2e5da42d8158af554.xhtml">internal</a></li><li class="navelem"><a class="el" href="internal_2kalman_8hpp.xhtml">kalman.hpp</a></li>
    <li class="footer">Generated on Mon Jul 11 2022 02:06:12 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
