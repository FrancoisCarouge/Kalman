<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::kalman_internal Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.3</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('namespacefcarouge_1_1kalman__internal.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#concepts">Concepts</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::kalman_internal Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Internal implementation details.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_input</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_input&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_input_control</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_input_control&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_member_types</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_output_model</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_output_model&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_output_uncertainty</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_output_uncertainty&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_prediction_types</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_prediction_types&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_process_uncertainty</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_process_uncertainty&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_state_transition</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_state_transition&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_update_types</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>conditional_update_types&lt; Filter &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>divides</b></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra divides expression type specialization point. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>estimate_uncertainty</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>evaluates</b></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra evaluates override expression lazy evaluation specialization point. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>filter_deducer</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>first_value</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><b>function</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><b>function&lt; Result(Arguments...)&gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>function_traits</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>function_traits&lt; Result(Type::*)(Arguments...) const &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>input_control</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>input_t</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>minus</b></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type minus, subtraction expression type specialization point. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>multiplies</b></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type multiplies expression type specialization point. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>not_implemented</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>observation</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>output_model</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>output_t</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>output_uncertainty</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>prediction_types_t</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>process_uncertainty</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>repacker</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>repacker&lt; Pack&lt; Types... &gt; &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>state</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>state_transition</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>transition</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>transposes</b></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra transposes specialization point. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>transposes&lt; Type &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>tupler</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>update_types_t</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_q_r</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_q_r_h_f</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_q_r_hh_us_ps</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_q_r_hh_us_ps&lt; State, Output, std::tuple&lt; UpdateTypes... &gt;, std::tuple&lt; PredictionTypes... &gt; &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_qq_rr_f</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_r</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_p_r_f</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_u_p_q_r</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_u_p_q_r_f_g_ps</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_u_p_q_r_f_g_ps&lt; State, Output, Input, std::tuple&lt; UpdateTypes... &gt;, std::tuple&lt; PredictionTypes... &gt; &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_u_p_q_r_h_f_g_us_ps</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>x_z_u_p_q_r_h_f_g_us_ps&lt; State, Output, Input, std::tuple&lt; UpdateTypes... &gt;, std::tuple&lt; PredictionTypes... &gt; &gt;</b></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a083c7633e41b94b1c0cf980cd4a51d74" id="r_a083c7633e41b94b1c0cf980cd4a51d74"><td class="memTemplParams" colspan="2">template&lt;typename... Arguments&gt; </td></tr>
<tr class="memitem:a083c7633e41b94b1c0cf980cd4a51d74"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a083c7633e41b94b1c0cf980cd4a51d74">deduce_filter</a> = std::invoke_result_t&lt;filter_deducer&lt;&gt;, Arguments...&gt;</td></tr>
<tr class="separator:a083c7633e41b94b1c0cf980cd4a51d74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb535a104d766973001e6cd7b1f758b" id="r_a6eb535a104d766973001e6cd7b1f758b"><td class="memTemplParams" colspan="2">template&lt;typename Callable &gt; </td></tr>
<tr class="memitem:a6eb535a104d766973001e6cd7b1f758b"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6eb535a104d766973001e6cd7b1f758b">function_traits_t</a></td></tr>
<tr class="separator:a6eb535a104d766973001e6cd7b1f758b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aae3a67a49bba50976bb2b701fcc42a1e" id="r_aae3a67a49bba50976bb2b701fcc42a1e"><td class="memTemplParams" colspan="2">template&lt;typename Callable &gt; </td></tr>
<tr class="memitem:aae3a67a49bba50976bb2b701fcc42a1e"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aae3a67a49bba50976bb2b701fcc42a1e">function</a> (Callable) -&gt; function&lt; <a class="el" href="#a6eb535a104d766973001e6cd7b1f758b">function_traits_t</a>&lt; Callable &gt; &gt;</td></tr>
<tr class="separator:aae3a67a49bba50976bb2b701fcc42a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46020ed3a3c430a828e6c96cb2ecc5b3" id="r_a46020ed3a3c430a828e6c96cb2ecc5b3"><td class="memTemplParams" colspan="2">template&lt;typename Result , typename... Arguments&gt; </td></tr>
<tr class="memitem:a46020ed3a3c430a828e6c96cb2ecc5b3"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a46020ed3a3c430a828e6c96cb2ecc5b3">function</a> (Result(Arguments...)) -&gt; function&lt; Result(Arguments...)&gt;</td></tr>
<tr class="separator:a46020ed3a3c430a828e6c96cb2ecc5b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaee731a1056be491235cf4d2eb38f28" id="r_aeaee731a1056be491235cf4d2eb38f28"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aeaee731a1056be491235cf4d2eb38f28"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aeaee731a1056be491235cf4d2eb38f28">state</a> (Type) -&gt; state&lt; Type &gt;</td></tr>
<tr class="separator:aeaee731a1056be491235cf4d2eb38f28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7abb071c20982067891831210e766a87" id="r_a7abb071c20982067891831210e766a87"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a7abb071c20982067891831210e766a87"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7abb071c20982067891831210e766a87">state</a> (Types... elements) -&gt; state&lt; std::remove_cvref_t&lt; <a class="el" href="#a66f34e6d5c7f8322c4d5f63051e20139">first</a>&lt; Types... &gt; &gt;[sizeof...(Types)]&gt;</td></tr>
<tr class="separator:a7abb071c20982067891831210e766a87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad944fff1255f0b88385d27ab351af75f" id="r_ad944fff1255f0b88385d27ab351af75f"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ad944fff1255f0b88385d27ab351af75f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad944fff1255f0b88385d27ab351af75f">estimate_uncertainty</a> (Element) -&gt; estimate_uncertainty&lt; Element &gt;</td></tr>
<tr class="separator:ad944fff1255f0b88385d27ab351af75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab62b02aa1c1f21ec568391f1c078bc70" id="r_ab62b02aa1c1f21ec568391f1c078bc70"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ab62b02aa1c1f21ec568391f1c078bc70"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab62b02aa1c1f21ec568391f1c078bc70">estimate_uncertainty</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; estimate_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:ab62b02aa1c1f21ec568391f1c078bc70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d4cb88e21450951fd7dc06f745f71b" id="r_ae0d4cb88e21450951fd7dc06f745f71b"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ae0d4cb88e21450951fd7dc06f745f71b"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae0d4cb88e21450951fd7dc06f745f71b">output_uncertainty</a> (Element) -&gt; output_uncertainty&lt; Element &gt;</td></tr>
<tr class="separator:ae0d4cb88e21450951fd7dc06f745f71b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae989c614bbf3f2ea5212a80dc2d5f93f" id="r_ae989c614bbf3f2ea5212a80dc2d5f93f"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ae989c614bbf3f2ea5212a80dc2d5f93f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae989c614bbf3f2ea5212a80dc2d5f93f">output_uncertainty</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; output_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:ae989c614bbf3f2ea5212a80dc2d5f93f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6a9cf33472fe67bd423c384ef492c25" id="r_ac6a9cf33472fe67bd423c384ef492c25"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ac6a9cf33472fe67bd423c384ef492c25"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac6a9cf33472fe67bd423c384ef492c25">process_uncertainty</a> (Element) -&gt; process_uncertainty&lt; Element &gt;</td></tr>
<tr class="separator:ac6a9cf33472fe67bd423c384ef492c25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1c468db7cb2316fdf3b15ca5bb1deb" id="r_a4f1c468db7cb2316fdf3b15ca5bb1deb"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a4f1c468db7cb2316fdf3b15ca5bb1deb"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4f1c468db7cb2316fdf3b15ca5bb1deb">process_uncertainty</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; process_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:a4f1c468db7cb2316fdf3b15ca5bb1deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cde5a9f3fe3a8d4f14ea136c15227dd" id="r_a5cde5a9f3fe3a8d4f14ea136c15227dd"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a5cde5a9f3fe3a8d4f14ea136c15227dd"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5cde5a9f3fe3a8d4f14ea136c15227dd">output_model</a> (Element) -&gt; output_model&lt; Element &gt;</td></tr>
<tr class="separator:a5cde5a9f3fe3a8d4f14ea136c15227dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7dde1c81f65ed97509cde0c8c7e896e" id="r_aa7dde1c81f65ed97509cde0c8c7e896e"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:aa7dde1c81f65ed97509cde0c8c7e896e"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa7dde1c81f65ed97509cde0c8c7e896e">output_model</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; output_model&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:aa7dde1c81f65ed97509cde0c8c7e896e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1a1ab117704e8837bb031d8c597826c" id="r_ac1a1ab117704e8837bb031d8c597826c"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ac1a1ab117704e8837bb031d8c597826c"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac1a1ab117704e8837bb031d8c597826c">state_transition</a> (Element) -&gt; state_transition&lt; Element &gt;</td></tr>
<tr class="separator:ac1a1ab117704e8837bb031d8c597826c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a9f3fadd77b821228364eae6dbdee2b" id="r_a4a9f3fadd77b821228364eae6dbdee2b"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a4a9f3fadd77b821228364eae6dbdee2b"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4a9f3fadd77b821228364eae6dbdee2b">state_transition</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; state_transition&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:a4a9f3fadd77b821228364eae6dbdee2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fdb5b3b4fc087c9c7913bc64708ec66" id="r_a6fdb5b3b4fc087c9c7913bc64708ec66"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a6fdb5b3b4fc087c9c7913bc64708ec66"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6fdb5b3b4fc087c9c7913bc64708ec66">input_control</a> (Element) -&gt; input_control&lt; Element &gt;</td></tr>
<tr class="separator:a6fdb5b3b4fc087c9c7913bc64708ec66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4055b9f72b35c7063dca9be5bfbe0af" id="r_ad4055b9f72b35c7063dca9be5bfbe0af"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:ad4055b9f72b35c7063dca9be5bfbe0af"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad4055b9f72b35c7063dca9be5bfbe0af">input_control</a> (std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;) -&gt; input_control&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td></tr>
<tr class="separator:ad4055b9f72b35c7063dca9be5bfbe0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22b52e1829f5b9cee3e159cf7ec7e00a" id="r_a22b52e1829f5b9cee3e159cf7ec7e00a"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a22b52e1829f5b9cee3e159cf7ec7e00a"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a22b52e1829f5b9cee3e159cf7ec7e00a">transition</a> (Element) -&gt; transition&lt; Element &gt;</td></tr>
<tr class="separator:a22b52e1829f5b9cee3e159cf7ec7e00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a053f2aaec0f20812632149fae25162fd" id="r_a053f2aaec0f20812632149fae25162fd"><td class="memTemplParams" colspan="2">template&lt;typename Element &gt; </td></tr>
<tr class="memitem:a053f2aaec0f20812632149fae25162fd"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a053f2aaec0f20812632149fae25162fd">observation</a> (Element) -&gt; observation&lt; Element &gt;</td></tr>
<tr class="separator:a053f2aaec0f20812632149fae25162fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Functions</div></td></tr>
<tr class="memitem:a6baba1af637abe5f76f3b5184d0ff3c6" id="r_a6baba1af637abe5f76f3b5184d0ff3c6"><td class="memTemplParams" colspan="2">template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </td></tr>
<tr class="memitem:a6baba1af637abe5f76f3b5184d0ff3c6"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6baba1af637abe5f76f3b5184d0ff3c6">for_constexpr</a> (Function &amp;&amp;function)</td></tr>
<tr class="memdesc:a6baba1af637abe5f76f3b5184d0ff3c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compile-time for loop.  <br /></td></tr>
<tr class="separator:a6baba1af637abe5f76f3b5184d0ff3c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a5514c5591cc1a7635a3179439d68be98" id="r_a5514c5591cc1a7635a3179439d68be98"><td class="memTemplParams" colspan="2">template&lt;typename Filter &gt; </td></tr>
<tr class="memitem:a5514c5591cc1a7635a3179439d68be98"><td class="memTemplItemLeft" align="right" valign="top">constexpr filter_deducer&lt; Filter &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5514c5591cc1a7635a3179439d68be98">filter</a> {}</td></tr>
<tr class="separator:a5514c5591cc1a7635a3179439d68be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab14d21f3e63487db138032fd68fafa1" id="r_aab14d21f3e63487db138032fd68fafa1"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aab14d21f3e63487db138032fd68fafa1"><td class="memTemplItemLeft" align="right" valign="top">input_t&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aab14d21f3e63487db138032fd68fafa1">input</a> {}</td></tr>
<tr class="separator:aab14d21f3e63487db138032fd68fafa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb20220c7177353ccce4b967bbbee8b1" id="r_adb20220c7177353ccce4b967bbbee8b1"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:adb20220c7177353ccce4b967bbbee8b1"><td class="memTemplItemLeft" align="right" valign="top">output_t&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#adb20220c7177353ccce4b967bbbee8b1">output</a> {}</td></tr>
<tr class="separator:adb20220c7177353ccce4b967bbbee8b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7589b17e9e7dfb26beb8df5fba5f9442" id="r_a7589b17e9e7dfb26beb8df5fba5f9442"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a7589b17e9e7dfb26beb8df5fba5f9442"><td class="memTemplItemLeft" align="right" valign="top">update_types_t&lt; Types... &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7589b17e9e7dfb26beb8df5fba5f9442">update_types</a> {}</td></tr>
<tr class="separator:a7589b17e9e7dfb26beb8df5fba5f9442"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ed98641f1ed8202ab40e3e13884203a" id="r_a4ed98641f1ed8202ab40e3e13884203a"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a4ed98641f1ed8202ab40e3e13884203a"><td class="memTemplItemLeft" align="right" valign="top">prediction_types_t&lt; Types... &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4ed98641f1ed8202ab40e3e13884203a">prediction_types</a> {}</td></tr>
<tr class="separator:a4ed98641f1ed8202ab40e3e13884203a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Types</h2></td></tr>
<tr class="memitem:a0f6af3a28e58f1b5e727aa85543951a0" id="r_a0f6af3a28e58f1b5e727aa85543951a0"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a0f6af3a28e58f1b5e727aa85543951a0"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0f6af3a28e58f1b5e727aa85543951a0">quotient</a></td></tr>
<tr class="memdesc:a0f6af3a28e58f1b5e727aa85543951a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divider helper type.  <br /></td></tr>
<tr class="separator:a0f6af3a28e58f1b5e727aa85543951a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa2c30dc7bf1f7626c078eaed358625" id="r_a1fa2c30dc7bf1f7626c078eaed358625"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a1fa2c30dc7bf1f7626c078eaed358625"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">evaluate</a> = std::invoke_result_t&lt;evaluates&lt;Type&gt;&gt;</td></tr>
<tr class="memdesc:a1fa2c30dc7bf1f7626c078eaed358625"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluater helper type.  <br /></td></tr>
<tr class="separator:a1fa2c30dc7bf1f7626c078eaed358625"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c947c78364703fa3847944dd073a837" id="r_a0c947c78364703fa3847944dd073a837"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a0c947c78364703fa3847944dd073a837"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0c947c78364703fa3847944dd073a837">transpose</a> = std::invoke_result_t&lt;transposes&lt;Type&gt;, const Type &amp;&gt;</td></tr>
<tr class="memdesc:a0c947c78364703fa3847944dd073a837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transposer helper type.  <br /></td></tr>
<tr class="separator:a0c947c78364703fa3847944dd073a837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66f34e6d5c7f8322c4d5f63051e20139" id="r_a66f34e6d5c7f8322c4d5f63051e20139"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a66f34e6d5c7f8322c4d5f63051e20139"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a66f34e6d5c7f8322c4d5f63051e20139">first</a> = std::tuple_element_t&lt;0, std::tuple&lt;Types...&gt;&gt;</td></tr>
<tr class="memdesc:a66f34e6d5c7f8322c4d5f63051e20139"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first type of the type template parameter pack.  <br /></td></tr>
<tr class="separator:a66f34e6d5c7f8322c4d5f63051e20139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6050c2c2ac7054eaffa8e5c58dab7bd4" id="r_a6050c2c2ac7054eaffa8e5c58dab7bd4"><td class="memTemplParams" colspan="2">template&lt;typename Type , std::size_t Size&gt; </td></tr>
<tr class="memitem:a6050c2c2ac7054eaffa8e5c58dab7bd4"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6050c2c2ac7054eaffa8e5c58dab7bd4">tuple_n_type</a> = typename tupler&lt;Type, Size&gt;::type</td></tr>
<tr class="memdesc:a6050c2c2ac7054eaffa8e5c58dab7bd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">An alias for making a tuple of the same type.  <br /></td></tr>
<tr class="separator:a6050c2c2ac7054eaffa8e5c58dab7bd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4991c6dc9486cc2d13f83ba121053169" id="r_a4991c6dc9486cc2d13f83ba121053169"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a4991c6dc9486cc2d13f83ba121053169"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4991c6dc9486cc2d13f83ba121053169">product</a></td></tr>
<tr class="memdesc:a4991c6dc9486cc2d13f83ba121053169"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper type to deduce the result type of the product.  <br /></td></tr>
<tr class="separator:a4991c6dc9486cc2d13f83ba121053169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf401bd223c24f1406587dd5fd2dc2cf" id="r_aaf401bd223c24f1406587dd5fd2dc2cf"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:aaf401bd223c24f1406587dd5fd2dc2cf"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aaf401bd223c24f1406587dd5fd2dc2cf">difference</a></td></tr>
<tr class="memdesc:aaf401bd223c24f1406587dd5fd2dc2cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper type to deduce the result type of the minus, subtraction.  <br /></td></tr>
<tr class="separator:aaf401bd223c24f1406587dd5fd2dc2cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a734eaffd024f86157a790692f947357d" id="r_a734eaffd024f86157a790692f947357d"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a734eaffd024f86157a790692f947357d"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a734eaffd024f86157a790692f947357d">ᴀʙᵀ</a> = <a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">evaluate</a>&lt;<a class="el" href="#a4991c6dc9486cc2d13f83ba121053169">product</a>&lt;Lhs, <a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">evaluate</a>&lt;<a class="el" href="#a0c947c78364703fa3847944dd073a837">transpose</a>&lt;Rhs&gt;&gt;&gt;&gt;</td></tr>
<tr class="memdesc:a734eaffd024f86157a790692f947357d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The evaluated type of the ABᵀ expression.  <br /></td></tr>
<tr class="separator:a734eaffd024f86157a790692f947357d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb17489172dd8b3802d97fdd17f9d91b" id="r_acb17489172dd8b3802d97fdd17f9d91b"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:acb17489172dd8b3802d97fdd17f9d91b"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#acb17489172dd8b3802d97fdd17f9d91b">t</a> (const Type &amp;value)</td></tr>
<tr class="memdesc:acb17489172dd8b3802d97fdd17f9d91b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose helper function.  <br /></td></tr>
<tr class="separator:acb17489172dd8b3802d97fdd17f9d91b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Named Values</h2></td></tr>
<tr class="memitem:aa1a9ffab51e79feaa4cc54fbad7bff1e" id="r_aa1a9ffab51e79feaa4cc54fbad7bff1e"><td class="memTemplParams" colspan="2">template&lt;typename Pack &gt; </td></tr>
<tr class="memitem:aa1a9ffab51e79feaa4cc54fbad7bff1e"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa1a9ffab51e79feaa4cc54fbad7bff1e">repack</a> = repacker&lt;Pack&gt;::type</td></tr>
<tr class="separator:aa1a9ffab51e79feaa4cc54fbad7bff1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a185d15024c6842a0f6faad97ce898221" id="r_a185d15024c6842a0f6faad97ce898221"><td class="memTemplParams" colspan="2">template&lt;typename Pack &gt; </td></tr>
<tr class="memitem:a185d15024c6842a0f6faad97ce898221"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a185d15024c6842a0f6faad97ce898221">size</a> {repacker&lt;Pack&gt;::size}</td></tr>
<tr class="memdesc:a185d15024c6842a0f6faad97ce898221"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of tuple-like types.  <br /></td></tr>
<tr class="separator:a185d15024c6842a0f6faad97ce898221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad9be752b238d15bfc4ea67b30660cc7" id="r_aad9be752b238d15bfc4ea67b30660cc7"><td class="memTemplParams" colspan="2">template&lt;auto... Values&gt; </td></tr>
<tr class="memitem:aad9be752b238d15bfc4ea67b30660cc7"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aad9be752b238d15bfc4ea67b30660cc7">first_v</a> {first_value&lt;Values...&gt;::value}</td></tr>
<tr class="memdesc:aad9be752b238d15bfc4ea67b30660cc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first value of the non-type template parameter pack.  <br /></td></tr>
<tr class="separator:aad9be752b238d15bfc4ea67b30660cc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23cbb93293154cb6105cfd41f2b12981" id="r_a23cbb93293154cb6105cfd41f2b12981"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:a23cbb93293154cb6105cfd41f2b12981"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a23cbb93293154cb6105cfd41f2b12981">one</a></td></tr>
<tr class="memdesc:a23cbb93293154cb6105cfd41f2b12981"><td class="mdescLeft">&#160;</td><td class="mdescRight">The one matrix.  <br /></td></tr>
<tr class="separator:a23cbb93293154cb6105cfd41f2b12981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14ae57622afd6d94821c036808416946" id="r_a14ae57622afd6d94821c036808416946"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a14ae57622afd6d94821c036808416946"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a14ae57622afd6d94821c036808416946">one&lt; Arithmetic &gt;</a> {1}</td></tr>
<tr class="memdesc:a14ae57622afd6d94821c036808416946"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton one matrix specialization.  <br /></td></tr>
<tr class="separator:a14ae57622afd6d94821c036808416946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae07f10e473ecf773b1a30ae5abebd4d2" id="r_ae07f10e473ecf773b1a30ae5abebd4d2"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</td></tr>
<tr class="memitem:ae07f10e473ecf773b1a30ae5abebd4d2"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae07f10e473ecf773b1a30ae5abebd4d2">one&lt; Type &gt;</a> {Type::Identity()}</td></tr>
<tr class="separator:ae07f10e473ecf773b1a30ae5abebd4d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fac2d4e13a574cdc956a2d940374e62" id="r_a4fac2d4e13a574cdc956a2d940374e62"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:a4fac2d4e13a574cdc956a2d940374e62"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4fac2d4e13a574cdc956a2d940374e62">zero</a></td></tr>
<tr class="memdesc:a4fac2d4e13a574cdc956a2d940374e62"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix.  <br /></td></tr>
<tr class="separator:a4fac2d4e13a574cdc956a2d940374e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a179ed9419a40e13a92eaa0f3d980d088" id="r_a179ed9419a40e13a92eaa0f3d980d088"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a179ed9419a40e13a92eaa0f3d980d088"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a179ed9419a40e13a92eaa0f3d980d088">zero&lt; Arithmetic &gt;</a> {0}</td></tr>
<tr class="memdesc:a179ed9419a40e13a92eaa0f3d980d088"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton zero matrix specialization.  <br /></td></tr>
<tr class="separator:a179ed9419a40e13a92eaa0f3d980d088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b0970be43a070dde9d1b773c58cb58a" id="r_a2b0970be43a070dde9d1b773c58cb58a"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</td></tr>
<tr class="memitem:a2b0970be43a070dde9d1b773c58cb58a"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a2b0970be43a070dde9d1b773c58cb58a">zero&lt; Type &gt;</a> {Type::Zero()}</td></tr>
<tr class="separator:a2b0970be43a070dde9d1b773c58cb58a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Internal implementation details. </p>
<p>Solely intended for this library usage. Do not rely on these details in your projects. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a734eaffd024f86157a790692f947357d" name="a734eaffd024f86157a790692f947357d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a734eaffd024f86157a790692f947357d">&#9670;&#160;</a></span>ᴀʙᵀ</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a734eaffd024f86157a790692f947357d">fcarouge::kalman_internal::ᴀʙᵀ</a> = <a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">evaluate</a>&lt;<a class="el" href="#a4991c6dc9486cc2d13f83ba121053169">product</a>&lt;Lhs, <a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">evaluate</a>&lt;<a class="el" href="#a0c947c78364703fa3847944dd073a837">transpose</a>&lt;Rhs&gt;&gt;&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The evaluated type of the ABᵀ expression. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a2">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00298">298</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a083c7633e41b94b1c0cf980cd4a51d74" name="a083c7633e41b94b1c0cf980cd4a51d74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083c7633e41b94b1c0cf980cd4a51d74">&#9670;&#160;</a></span>deduce_filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Arguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a083c7633e41b94b1c0cf980cd4a51d74">fcarouge::kalman_internal::deduce_filter</a> = std::invoke_result_t&lt;filter_deducer&lt;&gt;, Arguments...&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="factory_8hpp_source.xhtml#l00359">359</a> of file <a class="el" href="factory_8hpp_source.xhtml">factory.hpp</a>.</p>

</div>
</div>
<a id="aaf401bd223c24f1406587dd5fd2dc2cf" name="aaf401bd223c24f1406587dd5fd2dc2cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf401bd223c24f1406587dd5fd2dc2cf">&#9670;&#160;</a></span>difference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#aaf401bd223c24f1406587dd5fd2dc2cf">fcarouge::kalman_internal::difference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;minus&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Helper type to deduce the result type of the minus, subtraction. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00293">293</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a1fa2c30dc7bf1f7626c078eaed358625" name="a1fa2c30dc7bf1f7626c078eaed358625"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fa2c30dc7bf1f7626c078eaed358625">&#9670;&#160;</a></span>evaluate</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a1fa2c30dc7bf1f7626c078eaed358625">fcarouge::kalman_internal::evaluate</a> = std::invoke_result_t&lt;evaluates&lt;Type&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluater helper type. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a3">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00223">223</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a66f34e6d5c7f8322c4d5f63051e20139" name="a66f34e6d5c7f8322c4d5f63051e20139"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66f34e6d5c7f8322c4d5f63051e20139">&#9670;&#160;</a></span>first</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a66f34e6d5c7f8322c4d5f63051e20139">fcarouge::kalman_internal::first</a> = std::tuple_element_t&lt;0, std::tuple&lt;Types...&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unpack the first type of the type template parameter pack. </p>
<p>Shorthand for <code>std::tuple_element_t&lt;0, std::tuple&lt;Types...&gt;&gt;</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00255">255</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a6eb535a104d766973001e6cd7b1f758b" name="a6eb535a104d766973001e6cd7b1f758b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6eb535a104d766973001e6cd7b1f758b">&#9670;&#160;</a></span>function_traits_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Callable &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a6eb535a104d766973001e6cd7b1f758b">fcarouge::kalman_internal::function_traits_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    function_traits&lt;<span class="keyword">decltype</span>(&amp;Callable::operator())&gt;::type</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="function_8hpp_source.xhtml#l00094">94</a> of file <a class="el" href="function_8hpp_source.xhtml">function.hpp</a>.</p>

</div>
</div>
<a id="a4991c6dc9486cc2d13f83ba121053169" name="a4991c6dc9486cc2d13f83ba121053169"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4991c6dc9486cc2d13f83ba121053169">&#9670;&#160;</a></span>product</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a4991c6dc9486cc2d13f83ba121053169">fcarouge::kalman_internal::product</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;multiplies&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Helper type to deduce the result type of the product. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_1x1x0_building_height_unit_8cpp-example.xhtml#a1">kf_1x1x0_building_height_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00282">282</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a0f6af3a28e58f1b5e727aa85543951a0" name="a0f6af3a28e58f1b5e727aa85543951a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f6af3a28e58f1b5e727aa85543951a0">&#9670;&#160;</a></span>quotient</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a0f6af3a28e58f1b5e727aa85543951a0">fcarouge::kalman_internal::quotient</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;divides&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Divider helper type. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a4">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00213">213</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="aa1a9ffab51e79feaa4cc54fbad7bff1e" name="aa1a9ffab51e79feaa4cc54fbad7bff1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1a9ffab51e79feaa4cc54fbad7bff1e">&#9670;&#160;</a></span>repack</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Pack &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#aa1a9ffab51e79feaa4cc54fbad7bff1e">fcarouge::kalman_internal::repack</a> = repacker&lt;Pack&gt;::type</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00419">419</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a0c947c78364703fa3847944dd073a837" name="a0c947c78364703fa3847944dd073a837"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c947c78364703fa3847944dd073a837">&#9670;&#160;</a></span>transpose</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a0c947c78364703fa3847944dd073a837">fcarouge::kalman_internal::transpose</a> = std::invoke_result_t&lt;transposes&lt;Type&gt;, const Type &amp;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transposer helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00242">242</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a6050c2c2ac7054eaffa8e5c58dab7bd4" name="a6050c2c2ac7054eaffa8e5c58dab7bd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6050c2c2ac7054eaffa8e5c58dab7bd4">&#9670;&#160;</a></span>tuple_n_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a6050c2c2ac7054eaffa8e5c58dab7bd4">fcarouge::kalman_internal::tuple_n_type</a> = typename tupler&lt;Type, Size&gt;::type</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An alias for making a tuple of the same type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00272">272</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ad944fff1255f0b88385d27ab351af75f" name="ad944fff1255f0b88385d27ab351af75f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad944fff1255f0b88385d27ab351af75f">&#9670;&#160;</a></span>estimate_uncertainty() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::estimate_uncertainty </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  estimate_uncertainty&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab62b02aa1c1f21ec568391f1c078bc70" name="ab62b02aa1c1f21ec568391f1c078bc70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab62b02aa1c1f21ec568391f1c078bc70">&#9670;&#160;</a></span>estimate_uncertainty() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::estimate_uncertainty </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  estimate_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6baba1af637abe5f76f3b5184d0ff3c6" name="a6baba1af637abe5f76f3b5184d0ff3c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6baba1af637abe5f76f3b5184d0ff3c6">&#9670;&#160;</a></span>for_constexpr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fcarouge::kalman_internal::for_constexpr </td>
          <td>(</td>
          <td class="paramtype">Function &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>function</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compile-time for loop. </p>
<p>Help compilers with non-type template parameters on members. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00395">395</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  395</span>                                                         {</div>
<div class="line"><span class="lineno">  396</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Begin &lt; End) {</div>
<div class="line"><span class="lineno">  397</span>    function(std::integral_constant&lt;std::size_t, Begin&gt;());</div>
<div class="line"><span class="lineno">  398</span>    for_constexpr&lt;Begin + Increment, End, Increment&gt;(</div>
<div class="line"><span class="lineno">  399</span>        std::forward&lt;Function&gt;(function));</div>
<div class="line"><span class="lineno">  400</span>  }</div>
<div class="line"><span class="lineno">  401</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utility_8hpp_source.xhtml#l00395">for_constexpr()</a>, and <a class="el" href="#aae3a67a49bba50976bb2b701fcc42a1e">function()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utility_8hpp_source.xhtml#l00395">for_constexpr()</a>, and <a class="el" href="format_8hpp_source.xhtml#l00066">std::formatter&lt; Filter, Char &gt;::format()</a>.</p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_1_1kalman__internal_a6baba1af637abe5f76f3b5184d0ff3c6_cgraph.svg" width="396" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_1_1kalman__internal_a6baba1af637abe5f76f3b5184d0ff3c6_icgraph.svg" width="368" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aae3a67a49bba50976bb2b701fcc42a1e" name="aae3a67a49bba50976bb2b701fcc42a1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3a67a49bba50976bb2b701fcc42a1e">&#9670;&#160;</a></span>function() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Callable &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::function </td>
          <td>(</td>
          <td class="paramtype">Callable</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  function&lt; <a class="el" href="#a6eb535a104d766973001e6cd7b1f758b">function_traits_t</a>&lt; Callable &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="utility_8hpp_source.xhtml#l00395">for_constexpr()</a>.</p>
<div id="dynsection-2" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_1_1kalman__internal_aae3a67a49bba50976bb2b701fcc42a1e_icgraph.svg" width="586" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a46020ed3a3c430a828e6c96cb2ecc5b3" name="a46020ed3a3c430a828e6c96cb2ecc5b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46020ed3a3c430a828e6c96cb2ecc5b3">&#9670;&#160;</a></span>function() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Result , typename... Arguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::function </td>
          <td>(</td>
          <td class="paramtype">Result(Arguments...)</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  function&lt; Result(Arguments...)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6fdb5b3b4fc087c9c7913bc64708ec66" name="a6fdb5b3b4fc087c9c7913bc64708ec66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fdb5b3b4fc087c9c7913bc64708ec66">&#9670;&#160;</a></span>input_control() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::input_control </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  input_control&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad4055b9f72b35c7063dca9be5bfbe0af" name="ad4055b9f72b35c7063dca9be5bfbe0af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4055b9f72b35c7063dca9be5bfbe0af">&#9670;&#160;</a></span>input_control() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::input_control </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  input_control&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a053f2aaec0f20812632149fae25162fd" name="a053f2aaec0f20812632149fae25162fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a053f2aaec0f20812632149fae25162fd">&#9670;&#160;</a></span>observation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::observation </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  observation&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5cde5a9f3fe3a8d4f14ea136c15227dd" name="a5cde5a9f3fe3a8d4f14ea136c15227dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cde5a9f3fe3a8d4f14ea136c15227dd">&#9670;&#160;</a></span>output_model() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::output_model </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  output_model&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7dde1c81f65ed97509cde0c8c7e896e" name="aa7dde1c81f65ed97509cde0c8c7e896e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7dde1c81f65ed97509cde0c8c7e896e">&#9670;&#160;</a></span>output_model() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::output_model </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  output_model&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae0d4cb88e21450951fd7dc06f745f71b" name="ae0d4cb88e21450951fd7dc06f745f71b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0d4cb88e21450951fd7dc06f745f71b">&#9670;&#160;</a></span>output_uncertainty() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::output_uncertainty </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  output_uncertainty&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae989c614bbf3f2ea5212a80dc2d5f93f" name="ae989c614bbf3f2ea5212a80dc2d5f93f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae989c614bbf3f2ea5212a80dc2d5f93f">&#9670;&#160;</a></span>output_uncertainty() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::output_uncertainty </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  output_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6a9cf33472fe67bd423c384ef492c25" name="ac6a9cf33472fe67bd423c384ef492c25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6a9cf33472fe67bd423c384ef492c25">&#9670;&#160;</a></span>process_uncertainty() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::process_uncertainty </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  process_uncertainty&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4f1c468db7cb2316fdf3b15ca5bb1deb" name="a4f1c468db7cb2316fdf3b15ca5bb1deb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f1c468db7cb2316fdf3b15ca5bb1deb">&#9670;&#160;</a></span>process_uncertainty() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::process_uncertainty </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  process_uncertainty&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeaee731a1056be491235cf4d2eb38f28" name="aeaee731a1056be491235cf4d2eb38f28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaee731a1056be491235cf4d2eb38f28">&#9670;&#160;</a></span>state() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::state </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  state&lt; Type &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7abb071c20982067891831210e766a87" name="a7abb071c20982067891831210e766a87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7abb071c20982067891831210e766a87">&#9670;&#160;</a></span>state() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::state </td>
          <td>(</td>
          <td class="paramtype">Types...</td>          <td class="paramname"><span class="paramname"><em>elements</em></span></td><td>)</td>
          <td> -&gt;  state&lt; std::remove_cvref_t&lt; <a class="el" href="#a66f34e6d5c7f8322c4d5f63051e20139">first</a>&lt; Types... &gt; &gt;[sizeof...(Types)]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1a1ab117704e8837bb031d8c597826c" name="ac1a1ab117704e8837bb031d8c597826c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1a1ab117704e8837bb031d8c597826c">&#9670;&#160;</a></span>state_transition() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::state_transition </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  state_transition&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4a9f3fadd77b821228364eae6dbdee2b" name="a4a9f3fadd77b821228364eae6dbdee2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a9f3fadd77b821228364eae6dbdee2b">&#9670;&#160;</a></span>state_transition() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::state_transition </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  state_transition&lt; std::initializer_list&lt; std::initializer_list&lt; Element &gt; &gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acb17489172dd8b3802d97fdd17f9d91b" name="acb17489172dd8b3802d97fdd17f9d91b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb17489172dd8b3802d97fdd17f9d91b">&#9670;&#160;</a></span>t()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::kalman_internal::t </td>
          <td>(</td>
          <td class="paramtype">const Type &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transpose helper function. </p>
<p>Enable readable linear algebra notation. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00247">247</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  247</span>                                                   {</div>
<div class="line"><span class="lineno">  248</span>  <span class="keywordflow">return</span> transposes&lt;Type&gt;{}(value);</div>
<div class="line"><span class="lineno">  249</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a22b52e1829f5b9cee3e159cf7ec7e00a" name="a22b52e1829f5b9cee3e159cf7ec7e00a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22b52e1829f5b9cee3e159cf7ec7e00a">&#9670;&#160;</a></span>transition()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Element &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">fcarouge::kalman_internal::transition </td>
          <td>(</td>
          <td class="paramtype">Element</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  transition&lt; Element &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5514c5591cc1a7635a3179439d68be98" name="a5514c5591cc1a7635a3179439d68be98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5514c5591cc1a7635a3179439d68be98">&#9670;&#160;</a></span>filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Filter &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">filter_deducer&lt;Filter&gt; fcarouge::kalman_internal::filter {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="factory_8hpp_source.xhtml#l00356">356</a> of file <a class="el" href="factory_8hpp_source.xhtml">factory.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  356</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aad9be752b238d15bfc4ea67b30660cc7" name="aad9be752b238d15bfc4ea67b30660cc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad9be752b238d15bfc4ea67b30660cc7">&#9670;&#160;</a></span>first_v</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto... Values&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::kalman_internal::first_v {first_value&lt;Values...&gt;::value}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unpack the first value of the non-type template parameter pack. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00433">433</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  433</span>{first_value&lt;Values...&gt;::value};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aab14d21f3e63487db138032fd68fafa1" name="aab14d21f3e63487db138032fd68fafa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab14d21f3e63487db138032fd68fafa1">&#9670;&#160;</a></span>input</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">input_t&lt;Type&gt; fcarouge::kalman_internal::input {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="type_8hpp_source.xhtml#l00138">138</a> of file <a class="el" href="type_8hpp_source.xhtml">type.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  138</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a23cbb93293154cb6105cfd41f2b12981" name="a23cbb93293154cb6105cfd41f2b12981"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23cbb93293154cb6105cfd41f2b12981">&#9670;&#160;</a></span>one</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::kalman_internal::one</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra one-diagonal matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The one matrix. </p>
<p>User-defined matrix with all its diagonal elements equal to ones, and zeroes everywhere else. This matrix is also known as the identity matrix for square matrices of non-quantity scalar types. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a1">kf_6x2x0_vehicle_location_unit.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00454">454</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  454</span>                         {not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  455</span>    <span class="stringliteral">&quot;Implement the linear algebra one-diagonal matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a14ae57622afd6d94821c036808416946" name="a14ae57622afd6d94821c036808416946"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14ae57622afd6d94821c036808416946">&#9670;&#160;</a></span>one&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#a23cbb93293154cb6105cfd41f2b12981">fcarouge::kalman_internal::one</a>&lt; Arithmetic &gt; {1}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton one matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00458">458</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  458</span>{1};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae07f10e473ecf773b1a30ae5abebd4d2" name="ae07f10e473ecf773b1a30ae5abebd4d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae07f10e473ecf773b1a30ae5abebd4d2">&#9670;&#160;</a></span>one&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#a23cbb93293154cb6105cfd41f2b12981">fcarouge::kalman_internal::one</a>&lt; Type &gt; {Type::Identity()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00462">462</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  462</span>{Type::Identity()};</div>
</div><!-- fragment -->
</div>
</div>
<a id="adb20220c7177353ccce4b967bbbee8b1" name="adb20220c7177353ccce4b967bbbee8b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb20220c7177353ccce4b967bbbee8b1">&#9670;&#160;</a></span>output</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">output_t&lt;Type&gt; fcarouge::kalman_internal::output {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="type_8hpp_source.xhtml#l00144">144</a> of file <a class="el" href="type_8hpp_source.xhtml">type.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  144</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4ed98641f1ed8202ab40e3e13884203a" name="a4ed98641f1ed8202ab40e3e13884203a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ed98641f1ed8202ab40e3e13884203a">&#9670;&#160;</a></span>prediction_types</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">prediction_types_t&lt;Types...&gt; fcarouge::kalman_internal::prediction_types {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="type_8hpp_source.xhtml#l00238">238</a> of file <a class="el" href="type_8hpp_source.xhtml">type.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  238</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a185d15024c6842a0f6faad97ce898221" name="a185d15024c6842a0f6faad97ce898221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a185d15024c6842a0f6faad97ce898221">&#9670;&#160;</a></span>size</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Pack &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t fcarouge::kalman_internal::size {repacker&lt;Pack&gt;::size}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of tuple-like types. </p>
<p>Convenient short form. In place of <code>std::tuple_size_v</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00425">425</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  425</span>{repacker&lt;Pack&gt;::size};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="format_8hpp_source.xhtml#l00066">std::formatter&lt; Filter, Char &gt;::format()</a>.</p>

</div>
</div>
<a id="a7589b17e9e7dfb26beb8df5fba5f9442" name="a7589b17e9e7dfb26beb8df5fba5f9442"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7589b17e9e7dfb26beb8df5fba5f9442">&#9670;&#160;</a></span>update_types</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">update_types_t&lt;Types...&gt; fcarouge::kalman_internal::update_types {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="type_8hpp_source.xhtml#l00233">233</a> of file <a class="el" href="type_8hpp_source.xhtml">type.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  233</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4fac2d4e13a574cdc956a2d940374e62" name="a4fac2d4e13a574cdc956a2d940374e62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fac2d4e13a574cdc956a2d940374e62">&#9670;&#160;</a></span>zero</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::kalman_internal::zero</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{kalman_internal::not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The zero matrix. </p>
<p>User-defined. </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="kf_6x2x0_vehicle_location_unit_8cpp-example.xhtml#a5">kf_6x2x0_vehicle_location_unit.cpp</a>, and <a class="el" href="kf_8x4x0_deep_sort_bounding_box_8cpp-example.xhtml#a1">kf_8x4x0_deep_sort_bounding_box.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00472">472</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  472</span>                          {kalman_internal::not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  473</span>    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a179ed9419a40e13a92eaa0f3d980d088" name="a179ed9419a40e13a92eaa0f3d980d088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a179ed9419a40e13a92eaa0f3d980d088">&#9670;&#160;</a></span>zero&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#a4fac2d4e13a574cdc956a2d940374e62">fcarouge::kalman_internal::zero</a>&lt; Arithmetic &gt; {0}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton zero matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00477">477</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  477</span>{0};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2b0970be43a070dde9d1b773c58cb58a" name="a2b0970be43a070dde9d1b773c58cb58a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b0970be43a070dde9d1b773c58cb58a">&#9670;&#160;</a></span>zero&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#a4fac2d4e13a574cdc956a2d940374e62">fcarouge::kalman_internal::zero</a>&lt; Type &gt; {Type::Zero()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00481">481</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  481</span>{Type::Zero()};</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1kalman__internal.xhtml">kalman_internal</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
