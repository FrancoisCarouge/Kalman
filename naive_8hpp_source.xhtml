<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: /github/workspace/support/naive/fcarouge/naive.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.1</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('naive_8hpp_source.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">naive.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="naive_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.5.1</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_NAIVE_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_NAIVE_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="preprocessor">#include &quot;<a class="code" href="utility_8hpp.xhtml">fcarouge/utility.hpp</a>&quot;</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;format&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#include &lt;initializer_list&gt;</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml">   55</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1naive.xhtml">fcarouge::naive</a> {</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = <span class="keywordtype">double</span>, std::<span class="keywordtype">size_t</span> Row = 1, std::<span class="keywordtype">size_t</span> Column = 1&gt;</div>
<div class="foldopen" id="foldopen00068" data-start="{" data-end="};">
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml">   68</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad72d07aa359b43dea01b2e0b47a0c7b1">   69</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad72d07aa359b43dea01b2e0b47a0c7b1">matrix</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad39d0dd9c9f91b6878b77a15e57d8f0e">   71</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad39d0dd9c9f91b6878b77a15e57d8f0e">matrix</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#ab1da3b795f0880b0e1eb9a8036d49284">   73</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#ab1da3b795f0880b0e1eb9a8036d49284">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a0d3b04998ecf0eac3366edf04d716fa1">   75</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a0d3b04998ecf0eac3366edf04d716fa1">matrix</a>(<a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a5ae095d8bfbb8bc9be23d6c1cc09cbea">   77</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a5ae095d8bfbb8bc9be23d6c1cc09cbea">operator=</a>(<a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="}">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a550d2e2f94551475a2edf67de9db9b33">   79</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a550d2e2f94551475a2edf67de9db9b33">matrix</a>(<span class="keyword">const</span> std::same_as&lt;Type&gt; <span class="keyword">auto</span> &amp;...elements)</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    <span class="keyword">requires</span>(Row == 1 &amp;&amp; <span class="keyword">sizeof</span>...(elements) == Column)</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>      : <a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>{{elements...}} {}</div>
</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#abbac7807c7e63edce98a809b36e8c3cc">   83</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#abbac7807c7e63edce98a809b36e8c3cc">matrix</a>(<span class="keyword">const</span> std::same_as&lt;Type&gt; <span class="keyword">auto</span> &amp;...elements)</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <span class="keyword">requires</span>(Row != 1 &amp;&amp; Column == 1 &amp;&amp; <span class="keyword">sizeof</span>...(elements) == Row)</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  {</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    std::size_t i{0};</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>    ([&amp;] { data[i++][0] = elements; }(), ...);</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  }</div>
</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="foldopen" id="foldopen00090" data-start="{" data-end="}">
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f786ae58d1540e21a1f6963557622df">   90</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f786ae58d1540e21a1f6963557622df">matrix</a>(<span class="keyword">const</span> Type (&amp;elements)[Column])</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    <span class="keyword">requires</span>(Row == 1)</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  {</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>      data[0][j] = elements[j];</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    }</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  }</div>
</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad9c1d2f6c83e7ec74f763ea9977b58b2">   98</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#ad9c1d2f6c83e7ec74f763ea9977b58b2">matrix</a>(<span class="keyword">const</span> Type (&amp;elements)[Row])</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="keyword">requires</span>(Row != 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  {</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      data[i][0] = elements[i];</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    }</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  }</div>
</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types, std::size_t... Columns&gt;</div>
<div class="foldopen" id="foldopen00107" data-start="{" data-end="}">
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a84e55200de57e3295d38f5e8962f9325">  107</a></span>  <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a84e55200de57e3295d38f5e8962f9325">matrix</a>(<span class="keyword">const</span> Types (&amp;...rows)[Columns])</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    <span class="keyword">requires</span>(std::conjunction_v&lt;std::is_same&lt;Type, Types&gt;...&gt; &amp;&amp;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>             ((Columns == Column) &amp;&amp; ... &amp;&amp; <span class="keyword">true</span>))</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  {</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    std::size_t i{0};</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    (</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>        [&amp;](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;row) {</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>          <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>            data[i][j] = row[j];</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>          }</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>          ++i;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>        }(rows),</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>        ...);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  }</div>
</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="foldopen" id="foldopen00122" data-start="{" data-end="}">
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a9a12047f7f62b4842b3009e50d75faa6">  122</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a9a12047f7f62b4842b3009e50d75faa6">matrix</a>(</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      std::initializer_list&lt;std::initializer_list&lt;Type&gt;&gt; rows) {</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>    <span class="keywordflow">for</span> (std::size_t i{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;row : rows) {</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>      <span class="keywordflow">for</span> (std::size_t j{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;element : row) {</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>        data[i][j] = element;</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        ++j;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>      }</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>      ++i;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    }</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  }</div>
</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="foldopen" id="foldopen00133" data-start="{" data-end="}">
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#aeefcf1415dc5bad02fb74ccdf536983a">  133</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span>(<span class="keyword">false</span>) <span class="keyword">operator</span> Type() <span class="keyword">const</span></div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>    <span class="keyword">requires</span>(Row == 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  {</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    <span class="keywordflow">return</span> data[0][0];</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  }</div>
</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="foldopen" id="foldopen00139" data-start="{" data-end="}">
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f37507515b5165e56ca1c7b9c6df128">  139</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f37507515b5165e56ca1c7b9c6df128">operator[]</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    <span class="keyword">requires</span>(Row != 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  {</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[index][0];</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  }</div>
</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a7ac056edb5c0976f1c2f03a6d9934120">  146</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a7ac056edb5c0976f1c2f03a6d9934120">operator[]</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="keyword">requires</span>(Row == 1)</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  {</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[0][index];</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  }</div>
</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type &amp;&amp;</div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#acfed1b3b01967dd8201a8b66fc057c86">  154</a></span>  <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#acfed1b3b01967dd8201a8b66fc057c86">operator[]</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self, std::size_t row, std::size_t column) {</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[row][column];</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  }</div>
</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="foldopen" id="foldopen00158" data-start="{" data-end="}">
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a946ee778af019944e7c441730b52362a">  158</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a946ee778af019944e7c441730b52362a">operator()</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    <span class="keyword">requires</span>(Row != 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[index][0];</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  }</div>
</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="foldopen" id="foldopen00165" data-start="{" data-end="}">
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#aed5e035f5f6a4fe01eebe2af57be998a">  165</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;<a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#aed5e035f5f6a4fe01eebe2af57be998a">operator()</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    <span class="keyword">requires</span>(Row == 1)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  {</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[0][index];</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  }</div>
</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;</div>
<div class="foldopen" id="foldopen00173" data-start="{" data-end="}">
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a035cd297824dc7614675ee258400dd72">  173</a></span>  <a class="code hl_function" href="structfcarouge_1_1naive_1_1matrix.xhtml#a035cd297824dc7614675ee258400dd72">operator()</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self, std::size_t row, std::size_t column) {</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[row][column];</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  }</div>
</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno"><a class="line" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">  177</a></span>  [[no_unique_address]] Type data[Row][Column]{};</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>};</div>
</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = <span class="keywordtype">double</span>, std::<span class="keywordtype">size_t</span> Column = 1&gt;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a653b2773460ca94d5e356f3eefade70d">  182</a></span><span class="keyword">using </span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">row_vector</a> = <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt;Type, std::size_t{1}, Column&gt;;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = <span class="keywordtype">double</span>, std::<span class="keywordtype">size_t</span> Row = 1&gt;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#aad8a9ec48bbef5d13122ed6b389ef969">  186</a></span><span class="keyword">using </span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">column_vector</a> = <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt;Type, Row, std::size_t{1}&gt;;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#aff1bd6f0e05a981c1c88bc489992293f">  193</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>(Type) -&gt; <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a>;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#aad966fe573d30f86782cb4c4f8631766">  196</a></span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>(<span class="keyword">const</span> Type (&amp;)[Row][Column]) -&gt; <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a>;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row&gt;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a3dd6fd753d3d4255f650342f70b48d79">  199</a></span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>(<span class="keyword">const</span> Type (&amp;)[Row]) -&gt; <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, 1&gt;</a>;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types, std::size_t... Columns&gt;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="keyword">requires</span>(std::conjunction_v&lt;std::is_same&lt;<a class="code hl_typedef" href="namespacefcarouge.xhtml#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt;Types...&gt;, Types&gt;...&gt; &amp;&amp;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>           ((Columns == first_v&lt;Columns&gt;) &amp;&amp; ... &amp;&amp; <span class="keyword">true</span>))</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a1f52379c1f1f8d0adb96be17a767a541">  204</a></span><a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>(<span class="keyword">const</span> Types (&amp;...rows)[Columns])</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    -&gt; <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt;std::remove_cvref_t&lt;<a class="code hl_typedef" href="namespacefcarouge.xhtml#a88ffaddfc70067199a9f22246b9d7220">first</a>&lt;Types...&gt;&gt;, <span class="keyword">sizeof</span>...(Columns),</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>              (Columns, ...)&gt;;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">bool</span></div>
<div class="foldopen" id="foldopen00213" data-start="{" data-end="}">
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#afa6f4dff9b0b034254e8c208c346dd68">  213</a></span>operator==(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>           <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>      <span class="keywordflow">if</span> (lhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j] != rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j]) {</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>      }</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    }</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  }</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>}</div>
</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column, std::<span class="keywordtype">size_t</span> Size&gt;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00227" data-start="{" data-end="}">
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a5c10d2d71989bcf9c945db4675c97cc7">  227</a></span>operator*(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Size&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Size, Column&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> result;</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>      <span class="keywordflow">for</span> (std::size_t k{0}; k &lt; Size; ++k) {</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>        result.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j] += lhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][k] * rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[k][j];</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>      }</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    }</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  }</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>}</div>
</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00243" data-start="{" data-end="}">
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a115d99c67c06a512a5f8edf90b79fc51">  243</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator*(<a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> lhs,</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>                                              <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> rhs) {</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  <span class="keywordflow">return</span> lhs * rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][0];</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>}</div>
</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="foldopen" id="foldopen00249" data-start="{" data-end="}">
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#ac46650cefff4c16c6fa4774e39333281">  249</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator*(<a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> lhs,</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>                                              <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, Column&gt;</a> rhs) {</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, Column&gt;</a> result;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    result.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][j] = lhs * rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][j];</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  }</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>}</div>
</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span> </div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="foldopen" id="foldopen00261" data-start="{" data-end="}">
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#aae3794b1f1390de432c76963cb48a61e">  261</a></span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;<a class="code hl_function" href="namespacefcarouge_1_1naive.xhtml#aae3794b1f1390de432c76963cb48a61e">operator*=</a>(<a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>                                  <a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> rhs) {</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>      lhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j] *= rhs;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>    }</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  }</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span> </div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <span class="keywordflow">return</span> lhs;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>}</div>
</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="foldopen" id="foldopen00273" data-start="{" data-end="}">
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#afcc4087b37e143564aff2e9edb4bd6dd">  273</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator*(<a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> lhs,</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>                                              <a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> rhs) {</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  <span class="keywordflow">return</span> lhs *= rhs;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>}</div>
</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00280" data-start="{" data-end="}">
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#ab78ca164e4948b0fa2f060d330af59f5">  280</a></span>operator+(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> result{lhs};</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>      result.data[i][j] += rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j];</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    }</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  }</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>}</div>
</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00294" data-start="{" data-end="}">
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a4609e383f7ab9e61b9f11aa24f85e94f">  294</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator+(<a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> lhs,</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>                                              <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> rhs) {</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  <span class="keywordflow">return</span> lhs + rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][0];</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>}</div>
</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00300" data-start="{" data-end="}">
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a3ac631bf6ae71fc51e4345388b6f9690">  300</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator+(<a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> lhs,</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>                                              <a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> rhs) {</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][0] + rhs;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>}</div>
</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00307" data-start="{" data-end="}">
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a0a3703f14d9ac27e5b62eaa37509bb66">  307</a></span>operator-(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>  <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> result{lhs};</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>      result.data[i][j] -= rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j];</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>    }</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>  }</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>}</div>
</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00321" data-start="{" data-end="}">
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#a5a5265609001b959f6289e8e8879227f">  321</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator-(<a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> lhs,</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>                                              <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  <span class="keywordflow">return</span> lhs - rhs.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][0];</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>}</div>
</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row&gt;</div>
<div class="foldopen" id="foldopen00327" data-start="{" data-end="}">
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1naive.xhtml#ad629659a7adfaaec0e4cd59a613c06a5">  327</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator/(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, 1&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>                                              <a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> rhs) {</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix&lt;Type, Row, 1&gt;</a> result{lhs};</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span> </div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>    result.data[i][0] /= rhs;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  }</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>}</div>
</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>} <span class="comment">// namespace fcarouge::naive</span></div>
</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column, <span class="keyword">typename</span> Char&gt;</div>
<div class="foldopen" id="foldopen00342" data-start="{" data-end="};">
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml">  342</a></span><span class="keyword">struct </span>std::formatter&lt;<a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a>::naive::matrix&lt;Type, Row, Column&gt;, Char&gt; {</div>
<div class="foldopen" id="foldopen00343" data-start="{" data-end="}">
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3f43d59851026f1233f8c4f21c8caecb">  343</a></span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3f43d59851026f1233f8c4f21c8caecb">parse</a>(std::basic_format_parse_context&lt;Char&gt; &amp;parse_context) {</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>    <span class="keywordflow">return</span> parse_context.begin();</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>  }</div>
</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00349" data-start="{" data-end="}">
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a25d2571e9680c1d0b865db3ae7b7db0c">  349</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a25d2571e9680c1d0b865db3ae7b7db0c">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix&lt;Type, Row, Column&gt;</a> &amp;value,</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>      -&gt; OutputIterator {</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>    <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>      <span class="keywordflow">if</span> (i &gt; 0) {</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>        format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>      }</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>      format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>      <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>        <span class="keywordflow">if</span> (j &gt; 0) {</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>          format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>        }</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span> </div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>        format_context.advance_to(</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>            std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data[i][j]));</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>      }</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span> </div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>      format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>    }</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span> </div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  }</div>
</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span> </div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00380" data-start="{" data-end="}">
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a86860d72996867fb610091d8a3284b01">  380</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a86860d72996867fb610091d8a3284b01">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix&lt;Type, Row, Column&gt;</a> &amp;value,</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>      -&gt; OutputIterator</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>    <span class="keyword">requires</span>(Row == 1 &amp;&amp; Column != 1)</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>  {</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span> </div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>      <span class="keywordflow">if</span> (j &gt; 0) {</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>        format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>      }</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span> </div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>      format_context.advance_to(</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>          std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data[0][j]));</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>    }</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span> </div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>  }</div>
</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span> </div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00403" data-start="{" data-end="}">
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3e9a4af536855eb1e3c22ac02509dcb8">  403</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3e9a4af536855eb1e3c22ac02509dcb8">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix&lt;Type, Row, Column&gt;</a> &amp;value,</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>      -&gt; OutputIterator</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>    <span class="keyword">requires</span>(Row == 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>  {</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>    format_context.advance_to(</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>        std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data[0][0]));</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span> </div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  }</div>
</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>};</div>
</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span> </div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a> {</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="foldopen" id="foldopen00420" data-start="{" data-end="};">
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno"><a class="line" href="structfcarouge_1_1evaluates_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml">  420</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1evaluates.xhtml">evaluates</a>&lt;naive::<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, Column&gt;&gt; {</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno"><a class="line" href="structfcarouge_1_1evaluates_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a7a29f66f145641f032ff8b31aaf29078">  422</a></span>  <a class="code hl_function" href="structfcarouge_1_1evaluates_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a7a29f66f145641f032ff8b31aaf29078">operator()</a>() const -&gt; naive::<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, Column&gt;;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>};</div>
</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>template &lt;typename Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="foldopen" id="foldopen00427" data-start="{" data-end="};">
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno"><a class="line" href="structfcarouge_1_1transposes_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml">  427</a></span>struct <a class="code hl_struct" href="structfcarouge_1_1transposes.xhtml">transposes</a>&lt;naive::<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, Row, Column&gt;&gt; {</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00429" data-start="{" data-end="}">
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno"><a class="line" href="structfcarouge_1_1transposes_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a5d4dc6be64a6d7513df1729b6912275a">  429</a></span>  <a class="code hl_function" href="structfcarouge_1_1transposes_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a5d4dc6be64a6d7513df1729b6912275a">operator()</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">naive::matrix&lt;Type, Row, Column&gt;</a> &amp;value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>    <a class="code hl_struct" href="structfcarouge_1_1naive_1_1matrix.xhtml">naive::matrix&lt;Type, Column, Row&gt;</a> result;</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span> </div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>    <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>      <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>        result.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[j][i] = value.<a class="code hl_variable" href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j];</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>      }</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>    }</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>    <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>  }</div>
</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>};</div>
</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span> </div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span> </div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="namespacefcarouge_1_1naive.xhtml#aff1bd6f0e05a981c1c88bc489992293f">naive::matrix&lt;Type, Row, Column&gt;</a></div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>    <a class="code hl_variable" href="namespacefcarouge.xhtml#a8887e952722c60720253e416166a9233">one&lt;naive::matrix&lt;Type, Row, Column&gt;</a>&gt;{[] {</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>      <a class="code hl_function" href="namespacefcarouge_1_1naive.xhtml#aff1bd6f0e05a981c1c88bc489992293f">naive::matrix&lt;Type, Row, Column&gt;</a> result;</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>      std::size_t <a class="code hl_variable" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>{Row &lt; Column ? Row : Column};</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span> </div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>      <span class="keywordflow">for</span> (std::size_t k{0}; k &lt; <a class="code hl_variable" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>; ++k) {</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>        result.data[k][k] = 1.0;</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>      }</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span> </div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>      <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>    }()};</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span> </div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="namespacefcarouge_1_1naive.xhtml#aff1bd6f0e05a981c1c88bc489992293f">naive::matrix&lt;Type, Row, Column&gt;</a></div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>    <a class="code hl_variable" href="namespacefcarouge.xhtml#aef6fb6c8a265d85709b951506123a5f1">zero&lt;naive::matrix&lt;Type, Row, Column&gt;</a>&gt;{};</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span> </div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span> </div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span> </div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_NAIVE_HPP</span></div>
<div class="ttc" id="aconceptfcarouge_1_1arithmetic_xhtml"><div class="ttname"><a href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a></div><div class="ttdoc">Arithmetic concept.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00066">utility.hpp:66</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1naive_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1naive.xhtml">fcarouge::naive</a></div><div class="ttdef"><b>Definition</b> <a href="#l00055">naive.hpp:55</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1naive_xhtml_aae3794b1f1390de432c76963cb48a61e"><div class="ttname"><a href="namespacefcarouge_1_1naive.xhtml#aae3794b1f1390de432c76963cb48a61e">fcarouge::naive::operator*=</a></div><div class="ttdeci">constexpr auto &amp; operator*=(matrix&lt; Type, Row, Column &gt; &amp;lhs, arithmetic auto rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00261">naive.hpp:261</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1naive_xhtml_aff1bd6f0e05a981c1c88bc489992293f"><div class="ttname"><a href="namespacefcarouge_1_1naive.xhtml#aff1bd6f0e05a981c1c88bc489992293f">fcarouge::naive::matrix</a></div><div class="ttdeci">matrix(Type) -&gt; matrix&lt; Type, 1, 1 &gt;</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition</b> <a href="baseline_8cpp_source.xhtml#l00046">baseline.cpp:46</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a8887e952722c60720253e416166a9233"><div class="ttname"><a href="namespacefcarouge.xhtml#a8887e952722c60720253e416166a9233">fcarouge::one</a></div><div class="ttdeci">constexpr Type one</div><div class="ttdoc">The one matrix.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00267">utility.hpp:267</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a88ffaddfc70067199a9f22246b9d7220"><div class="ttname"><a href="namespacefcarouge.xhtml#a88ffaddfc70067199a9f22246b9d7220">fcarouge::first</a></div><div class="ttdeci">internal::first&lt; Types... &gt; first</div><div class="ttdoc">Unpack the first type of the type template parameter pack.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00199">utility.hpp:199</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_ac4cffefdda8c01a267ce2700c6acb903"><div class="ttname"><a href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">fcarouge::size</a></div><div class="ttdeci">constexpr std::size_t size</div><div class="ttdoc">Size of tuple-like types.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00255">utility.hpp:255</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_aef6fb6c8a265d85709b951506123a5f1"><div class="ttname"><a href="namespacefcarouge.xhtml#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a></div><div class="ttdeci">constexpr Type zero</div><div class="ttdoc">The zero matrix.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00285">utility.hpp:285</a></div></div>
<div class="ttc" id="astructfcarouge_1_1evaluates_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4_xhtml_a7a29f66f145641f032ff8b31aaf29078"><div class="ttname"><a href="structfcarouge_1_1evaluates_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a7a29f66f145641f032ff8b31aaf29078">fcarouge::evaluates&lt; naive::matrix&lt; Type, Row, Column &gt; &gt;::operator()</a></div><div class="ttdeci">constexpr auto operator()() const -&gt; naive::matrix&lt; Type, Row, Column &gt;</div></div>
<div class="ttc" id="astructfcarouge_1_1evaluates_xhtml"><div class="ttname"><a href="structfcarouge_1_1evaluates.xhtml">fcarouge::evaluates</a></div><div class="ttdoc">Linear algebra evaluates override expression lazy evaluation specialization point.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00158">utility.hpp:158</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml">fcarouge::matrix</a></div><div class="ttdoc">Coroutine lazy matrix.</div><div class="ttdef"><b>Definition</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00115">linalg.hpp:115</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a></div><div class="ttdoc">Naive matrix.</div><div class="ttdef"><b>Definition</b> <a href="#l00068">naive.hpp:68</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a035cd297824dc7614675ee258400dd72"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a035cd297824dc7614675ee258400dd72">fcarouge::naive::matrix::operator()</a></div><div class="ttdeci">constexpr auto &amp;&amp; operator()(this auto &amp;&amp;self, std::size_t row, std::size_t column)</div><div class="ttdef"><b>Definition</b> <a href="#l00173">naive.hpp:173</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a0d3b04998ecf0eac3366edf04d716fa1"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a0d3b04998ecf0eac3366edf04d716fa1">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(matrix &amp;&amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a15e1f8de54dbe4186bf17501a9ac073b"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a15e1f8de54dbe4186bf17501a9ac073b">fcarouge::naive::matrix::data</a></div><div class="ttdeci">Type data[Row][Column]</div><div class="ttdef"><b>Definition</b> <a href="#l00177">naive.hpp:177</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a2f37507515b5165e56ca1c7b9c6df128"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f37507515b5165e56ca1c7b9c6df128">fcarouge::naive::matrix::operator[]</a></div><div class="ttdeci">constexpr auto &amp;&amp; operator[](this auto &amp;&amp;self, std::size_t index)</div><div class="ttdef"><b>Definition</b> <a href="#l00139">naive.hpp:139</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a2f786ae58d1540e21a1f6963557622df"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a2f786ae58d1540e21a1f6963557622df">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const Type(&amp;elements)[Column])</div><div class="ttdef"><b>Definition</b> <a href="#l00090">naive.hpp:90</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a550d2e2f94551475a2edf67de9db9b33"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a550d2e2f94551475a2edf67de9db9b33">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const std::same_as&lt; Type &gt; auto &amp;...elements)</div><div class="ttdef"><b>Definition</b> <a href="#l00079">naive.hpp:79</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a5ae095d8bfbb8bc9be23d6c1cc09cbea"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a5ae095d8bfbb8bc9be23d6c1cc09cbea">fcarouge::naive::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(matrix &amp;&amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a7ac056edb5c0976f1c2f03a6d9934120"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a7ac056edb5c0976f1c2f03a6d9934120">fcarouge::naive::matrix::operator[]</a></div><div class="ttdeci">constexpr auto &amp;&amp; operator[](this auto &amp;&amp;self, std::size_t index)</div><div class="ttdef"><b>Definition</b> <a href="#l00146">naive.hpp:146</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a84e55200de57e3295d38f5e8962f9325"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a84e55200de57e3295d38f5e8962f9325">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">matrix(const Types(&amp;...rows)[Columns])</div><div class="ttdef"><b>Definition</b> <a href="#l00107">naive.hpp:107</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a946ee778af019944e7c441730b52362a"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a946ee778af019944e7c441730b52362a">fcarouge::naive::matrix::operator()</a></div><div class="ttdeci">constexpr auto &amp;&amp; operator()(this auto &amp;&amp;self, std::size_t index)</div><div class="ttdef"><b>Definition</b> <a href="#l00158">naive.hpp:158</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a9a12047f7f62b4842b3009e50d75faa6"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#a9a12047f7f62b4842b3009e50d75faa6">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt; rows)</div><div class="ttdef"><b>Definition</b> <a href="#l00122">naive.hpp:122</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_ab1da3b795f0880b0e1eb9a8036d49284"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#ab1da3b795f0880b0e1eb9a8036d49284">fcarouge::naive::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(const matrix &amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_abbac7807c7e63edce98a809b36e8c3cc"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#abbac7807c7e63edce98a809b36e8c3cc">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const std::same_as&lt; Type &gt; auto &amp;...elements)</div><div class="ttdef"><b>Definition</b> <a href="#l00083">naive.hpp:83</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_acfed1b3b01967dd8201a8b66fc057c86"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#acfed1b3b01967dd8201a8b66fc057c86">fcarouge::naive::matrix::operator[]</a></div><div class="ttdeci">constexpr Type &amp;&amp; operator[](this auto &amp;&amp;self, std::size_t row, std::size_t column)</div><div class="ttdef"><b>Definition</b> <a href="#l00154">naive.hpp:154</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_ad39d0dd9c9f91b6878b77a15e57d8f0e"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#ad39d0dd9c9f91b6878b77a15e57d8f0e">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const matrix &amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_ad72d07aa359b43dea01b2e0b47a0c7b1"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#ad72d07aa359b43dea01b2e0b47a0c7b1">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix()=default</div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_ad9c1d2f6c83e7ec74f763ea9977b58b2"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#ad9c1d2f6c83e7ec74f763ea9977b58b2">fcarouge::naive::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const Type(&amp;elements)[Row])</div><div class="ttdef"><b>Definition</b> <a href="#l00098">naive.hpp:98</a></div></div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_aed5e035f5f6a4fe01eebe2af57be998a"><div class="ttname"><a href="structfcarouge_1_1naive_1_1matrix.xhtml#aed5e035f5f6a4fe01eebe2af57be998a">fcarouge::naive::matrix::operator()</a></div><div class="ttdeci">constexpr auto &amp;&amp; operator()(this auto &amp;&amp;self, std::size_t index)</div><div class="ttdef"><b>Definition</b> <a href="#l00165">naive.hpp:165</a></div></div>
<div class="ttc" id="astructfcarouge_1_1transposes_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4_xhtml_a5d4dc6be64a6d7513df1729b6912275a"><div class="ttname"><a href="structfcarouge_1_1transposes_3_01naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_01_4.xhtml#a5d4dc6be64a6d7513df1729b6912275a">fcarouge::transposes&lt; naive::matrix&lt; Type, Row, Column &gt; &gt;::operator()</a></div><div class="ttdeci">constexpr auto operator()(const naive::matrix&lt; Type, Row, Column &gt; &amp;value) const</div><div class="ttdef"><b>Definition</b> <a href="#l00429">naive.hpp:429</a></div></div>
<div class="ttc" id="astructfcarouge_1_1transposes_xhtml"><div class="ttname"><a href="structfcarouge_1_1transposes.xhtml">fcarouge::transposes</a></div><div class="ttdoc">Linear algebra transposes specialization point.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00166">utility.hpp:166</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4_xhtml_a25d2571e9680c1d0b865db3ae7b7db0c"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a25d2571e9680c1d0b865db3ae7b7db0c">std::formatter&lt; fcarouge::naive::matrix&lt; Type, Row, Column &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::naive::matrix&lt; Type, Row, Column &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator</div><div class="ttdef"><b>Definition</b> <a href="#l00349">naive.hpp:349</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4_xhtml_a3e9a4af536855eb1e3c22ac02509dcb8"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3e9a4af536855eb1e3c22ac02509dcb8">std::formatter&lt; fcarouge::naive::matrix&lt; Type, Row, Column &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::naive::matrix&lt; Type, Row, Column &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator requires(Row==1 &amp;&amp;Column==1)</div><div class="ttdef"><b>Definition</b> <a href="#l00403">naive.hpp:403</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4_xhtml_a3f43d59851026f1233f8c4f21c8caecb"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a3f43d59851026f1233f8c4f21c8caecb">std::formatter&lt; fcarouge::naive::matrix&lt; Type, Row, Column &gt;, Char &gt;::parse</a></div><div class="ttdeci">constexpr auto parse(std::basic_format_parse_context&lt; Char &gt; &amp;parse_context)</div><div class="ttdef"><b>Definition</b> <a href="#l00343">naive.hpp:343</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4_xhtml_a86860d72996867fb610091d8a3284b01"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1naive_1_1matrix_3_01_type_00_01_row_00_01_column_01_4_00_01_char_01_4.xhtml#a86860d72996867fb610091d8a3284b01">std::formatter&lt; fcarouge::naive::matrix&lt; Type, Row, Column &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::naive::matrix&lt; Type, Row, Column &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator requires(Row==1 &amp;&amp;Column !=1)</div><div class="ttdef"><b>Definition</b> <a href="#l00380">naive.hpp:380</a></div></div>
<div class="ttc" id="autility_8hpp_xhtml"><div class="ttname"><a href="utility_8hpp.xhtml">utility.hpp</a></div><div class="ttdoc">The collection of utilities supporting the library.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5815af820a9cc9481f1d0990a0d60286.xhtml">support</a></li><li class="navelem"><a class="el" href="dir_39431477b87e8017262cc5952830cc45.xhtml">naive</a></li><li class="navelem"><a class="el" href="dir_df0e3dd92e86a858066bbf68bf2b7fbd.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="naive_8hpp.xhtml">naive.hpp</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
