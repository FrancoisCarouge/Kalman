<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: include/fcarouge/kalman.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kalman_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kalman.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kalman_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*_  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> | |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> | &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> |  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> | . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> |_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter for C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &quot;<a class="code" href="internal_2kalman_8hpp.xhtml">internal/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &quot;<a class="code" href="kalman__operator_8hpp.xhtml">internal/kalman_operator.hpp</a>&quot;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>{</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="keyword">template</span> &lt;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>    <span class="keyword">typename</span> Type = double, <span class="keyword">typename</span> State = Type, <span class="keyword">typename</span> Output = State,</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>    <span class="keyword">typename</span> Input = State, <span class="keyword">typename</span> Transpose = std::identity,</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    <span class="keyword">typename</span> Symmetrize = std::identity, <span class="keyword">typename</span> Divide = std::divides&lt;void&gt;,</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    <span class="keyword">typename</span> Identity = internal::identity,</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    <span class="keyword">typename</span> UpdateArguments = std::tuple&lt;&gt;,</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    <span class="keyword">typename</span> PredictionArguments = std::tuple&lt;&gt;&gt;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml">  124</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a></div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>{</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>};</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml">  132</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide,</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>             Identity, std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>             std::tuple&lt;PredictionArguments...&gt;&gt;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>{</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">  141</a></span>  <span class="keyword">using</span> <a class="code hl_struct" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml">implementation</a> =</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>      <a class="code hl_struct" href="structfcarouge_1_1internal_1_1kalman.xhtml">internal::kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide,</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>                       Identity, std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>                       std::tuple&lt;PredictionArguments...&gt;&gt;;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keyword">public</span>:</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">  153</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">value_type</a> = Type;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">  156</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2fc9d9e4b18006d41a642a5740b39675">implementation::state</a>;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">  161</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad58389f483104f70dbee002813577af9">implementation::output</a>;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">  164</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad5b850e202b48f07b71f0faf54a9b122">implementation::input</a>;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">  169</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aac4677d90d6b11eb8691da8ac7fa4442">implementation::estimate_uncertainty</a>;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">  172</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a043a8fbb71c1359963b47e8cd58a1be1">implementation::process_uncertainty</a>;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">  175</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a525901e2c4fb95260f40a39d2a8fdfe8">implementation::output_uncertainty</a>;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">  180</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ae0ffef3ffdc1f0fa9065e643c712a033">implementation::state_transition</a>;</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">  185</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a45a5b9989ab5de531a03e0f8ce3c8675">implementation::output_model</a>;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">  190</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a5f894d43b3b9c0693c1312b681625822">implementation::input_control</a>;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">  193</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#abf6256a9aef7db5ffb70bc68f64e2439">implementation::gain</a>;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">  196</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a> = <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a29af619a6a44c07d93e4b6a742137915">implementation::innovation</a>;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">  199</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a> =</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>      <span class="keyword">typename</span> <a class="code hl_typedef" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a65b55c102d2bbc6de21033f5672c09bf">implementation::innovation_uncertainty</a>;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">  210</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">  221</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">kalman</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">  233</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">kalman</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span> = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">  247</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">  263</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">operator=</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>      -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">  269</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">~kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span> </div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state estimate vector X is unexpectedly &quot;</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  x() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>;</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  inline constexpr <span class="keywordtype">void</span> x(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;value);</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  inline constexpr <span class="keywordtype">void</span> x(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;value);</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  inline constexpr <span class="keywordtype">void</span> x(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span> </div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  inline constexpr <span class="keywordtype">void</span> x(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  [[nodiscard(&quot;The returned observation vector Z is unexpectedly &quot;</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  z() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  [[nodiscard(&quot;The returned control vector U is unexpectedly &quot;</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6e6f32bce6418b0ee9eff0043f60b3b5">  343</a></span>  u() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a>;</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  [[nodiscard(&quot;The returned estimated covariance matrix P is unexpectedly &quot;</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  p() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>;</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  inline constexpr <span class="keywordtype">void</span> p(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;value);</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  inline constexpr <span class="keywordtype">void</span> p(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;value);</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  inline constexpr <span class="keywordtype">void</span> p(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>  inline constexpr <span class="keywordtype">void</span> p(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  [[nodiscard(&quot;The returned process noise covariance matrix Q is unexpectedly &quot;</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  q() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>;</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>  inline constexpr <span class="keywordtype">void</span> q(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;value);</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  inline constexpr <span class="keywordtype">void</span> q(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;value);</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span> </div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>  inline constexpr <span class="keywordtype">void</span> q(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span> </div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>  inline constexpr <span class="keywordtype">void</span> q(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac348954166df8e25dc64d67a03caca79">  445</a></span>  inline constexpr <span class="keywordtype">void</span> q(const auto &amp;callable) requires std::is_invocable_r_v &lt;</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>,</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>  {</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>    filter.noise_process_q = callable;</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>  }</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span> </div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">  463</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">q</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>,</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>  {</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>    filter.noise_process_q = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>  }</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span> </div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation noise covariance matrix R is &quot;</span></div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>              <span class="stringliteral">&quot;unexpectedly discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>  r() const -&gt; output_uncertainty;</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span> </div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>  inline constexpr <span class="keywordtype">void</span> r(const output_uncertainty &amp;value);</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span> </div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  inline constexpr <span class="keywordtype">void</span> r(output_uncertainty &amp;&amp;value);</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span> </div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>  inline constexpr <span class="keywordtype">void</span> r(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span> </div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>  inline constexpr <span class="keywordtype">void</span> r(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span> </div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#affa201c6a10caab1e37fa12e10b67c55">  527</a></span>  inline constexpr <span class="keywordtype">void</span> r(const auto &amp;callable) requires std::is_invocable_r_v &lt;</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>,</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> &amp;, const UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>  {</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span>    filter.noise_observation_r = callable;</div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span>  }</div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span> </div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">  545</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">r</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>,</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span>  {</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>    filter.noise_observation_r = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>  }</div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span> </div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state transition matrix F is unexpectedly &quot;</span></div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>  f() const -&gt; state_transition;</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span> </div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>  inline constexpr <span class="keywordtype">void</span> f(const state_transition &amp;value);</div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span> </div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>  inline constexpr <span class="keywordtype">void</span> f(state_transition &amp;&amp;value);</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span> </div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span>  inline constexpr <span class="keywordtype">void</span> f(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span> </div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span>  inline constexpr <span class="keywordtype">void</span> f(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span> </div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5add802696274bfe0ed9f39e451a4d37">  605</a></span>      f(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>,</div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>  {</div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span>    filter.transition_state_f = callable;</div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span>  }</div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span> </div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a839f9ae2154b134dd9adc81995df4287">  622</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a839f9ae2154b134dd9adc81995df4287">f</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>,</div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno">  625</span>  {</div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span>    filter.transition_state_f = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00627" name="l00627"></a><span class="lineno">  627</span>  }</div>
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno">  628</span> </div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation transition matrix H is unexpectedly &quot;</span></div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>  h() const -&gt; output_model;</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span> </div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>  inline constexpr <span class="keywordtype">void</span> h(const output_model &amp;value);</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span> </div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span>  inline constexpr <span class="keywordtype">void</span> h(output_model &amp;&amp;value);</div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span> </div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>  inline constexpr <span class="keywordtype">void</span> h(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span> </div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span>  inline constexpr <span class="keywordtype">void</span> h(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span> </div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a017a8b3600a2b964c13a098bd1138789">  684</a></span>      h(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>,</div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span>  {</div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span>    filter.observation_state_h = callable;</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>  }</div>
<div class="line"><a id="l00690" name="l00690"></a><span class="lineno">  690</span> </div>
<div class="line"><a id="l00700" name="l00700"></a><span class="lineno">  700</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00701" name="l00701"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">  701</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">h</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>,</div>
<div class="line"><a id="l00702" name="l00702"></a><span class="lineno">  702</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00703" name="l00703"></a><span class="lineno">  703</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00704" name="l00704"></a><span class="lineno">  704</span>  {</div>
<div class="line"><a id="l00705" name="l00705"></a><span class="lineno">  705</span>    filter.observation_state_h = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>  }</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span> </div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>  [[nodiscard(<span class="stringliteral">&quot;The returned control transition matrix G is unexpectedly &quot;</span></div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00715" name="l00715"></a><span class="lineno">  715</span>  g() const -&gt; input_control;</div>
<div class="line"><a id="l00716" name="l00716"></a><span class="lineno">  716</span> </div>
<div class="line"><a id="l00722" name="l00722"></a><span class="lineno">  722</span>  inline constexpr <span class="keywordtype">void</span> g(const input_control &amp;value);</div>
<div class="line"><a id="l00723" name="l00723"></a><span class="lineno">  723</span> </div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>  inline constexpr <span class="keywordtype">void</span> g(input_control &amp;&amp;value);</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span> </div>
<div class="line"><a id="l00739" name="l00739"></a><span class="lineno">  739</span>  inline constexpr <span class="keywordtype">void</span> g(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00740" name="l00740"></a><span class="lineno">  740</span> </div>
<div class="line"><a id="l00749" name="l00749"></a><span class="lineno">  749</span>  inline constexpr <span class="keywordtype">void</span> g(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00750" name="l00750"></a><span class="lineno">  750</span> </div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae3b08856c83a2b5a020ffb7bbbc08108">  761</a></span>      g(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>,</div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00763" name="l00763"></a><span class="lineno">  763</span>  const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00764" name="l00764"></a><span class="lineno">  764</span>  {</div>
<div class="line"><a id="l00765" name="l00765"></a><span class="lineno">  765</span>    filter.transition_control_g = callable;</div>
<div class="line"><a id="l00766" name="l00766"></a><span class="lineno">  766</span>  }</div>
<div class="line"><a id="l00767" name="l00767"></a><span class="lineno">  767</span> </div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno">  777</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">  778</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">g</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>,</div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>  <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span>  {</div>
<div class="line"><a id="l00782" name="l00782"></a><span class="lineno">  782</span>    filter.transition_control_g = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00783" name="l00783"></a><span class="lineno">  783</span>  }</div>
<div class="line"><a id="l00784" name="l00784"></a><span class="lineno">  784</span> </div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>  [[nodiscard(<span class="stringliteral">&quot;The returned gain matrix K is unexpectedly &quot;</span></div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00792" name="l00792"></a><span class="lineno">  792</span>  k() const -&gt; gain;</div>
<div class="line"><a id="l00793" name="l00793"></a><span class="lineno">  793</span> </div>
<div class="line"><a id="l00799" name="l00799"></a><span class="lineno">  799</span>  [[nodiscard(&quot;The returned innovation vector Y is unexpectedly &quot;</div>
<div class="line"><a id="l00800" name="l00800"></a><span class="lineno">  800</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00801" name="l00801"></a><span class="lineno">  801</span>  y() const -&gt; innovation;</div>
<div class="line"><a id="l00802" name="l00802"></a><span class="lineno">  802</span> </div>
<div class="line"><a id="l00808" name="l00808"></a><span class="lineno">  808</span>  [[nodiscard(&quot;The returned innovation uncertainty matrix S is unexpectedly &quot;</div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span>  s() const -&gt; innovation_uncertainty;</div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span> </div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00813" name="l00813"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7846683e1f74966f3c855d1b01ba9c51">  813</a></span>      transition(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>,</div>
<div class="line"><a id="l00814" name="l00814"></a><span class="lineno">  814</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00815" name="l00815"></a><span class="lineno">  815</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00816" name="l00816"></a><span class="lineno">  816</span>  {</div>
<div class="line"><a id="l00817" name="l00817"></a><span class="lineno">  817</span>    filter.transition = callable;</div>
<div class="line"><a id="l00818" name="l00818"></a><span class="lineno">  818</span>  }</div>
<div class="line"><a id="l00819" name="l00819"></a><span class="lineno">  819</span> </div>
<div class="line"><a id="l00820" name="l00820"></a><span class="lineno">  820</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00821" name="l00821"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">  821</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">transition</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>,</div>
<div class="line"><a id="l00822" name="l00822"></a><span class="lineno">  822</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00824" name="l00824"></a><span class="lineno">  824</span>  {</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span>    filter.transition = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span>  }</div>
<div class="line"><a id="l00827" name="l00827"></a><span class="lineno">  827</span> </div>
<div class="line"><a id="l00828" name="l00828"></a><span class="lineno">  828</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00829" name="l00829"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">  829</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">observation</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>,</div>
<div class="line"><a id="l00830" name="l00830"></a><span class="lineno">  830</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00831" name="l00831"></a><span class="lineno">  831</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span>  {</div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>    filter.observation = callable;</div>
<div class="line"><a id="l00834" name="l00834"></a><span class="lineno">  834</span>  }</div>
<div class="line"><a id="l00835" name="l00835"></a><span class="lineno">  835</span> </div>
<div class="line"><a id="l00836" name="l00836"></a><span class="lineno">  836</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00837" name="l00837"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">  837</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">observation</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>,</div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno">  838</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>  {</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span>    filter.observation = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span>  }</div>
<div class="line"><a id="l00843" name="l00843"></a><span class="lineno">  843</span> </div>
<div class="line"><a id="l00845" name="l00845"></a><span class="lineno">  845</span> </div>
<div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span> </div>
<div class="line"><a id="l00859" name="l00859"></a><span class="lineno">  859</span>  <span class="comment">// fair matching rule.</span></div>
<div class="line"><a id="l00877" name="l00877"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aefa4361777ff684059970929fd47a6be">  877</a></span><span class="comment"></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aefa4361777ff684059970929fd47a6be">operator()</a>(<span class="keyword">const</span> PredictionArguments &amp;...arguments,</div>
<div class="line"><a id="l00878" name="l00878"></a><span class="lineno">  878</span>                                   <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u,</div>
<div class="line"><a id="l00879" name="l00879"></a><span class="lineno">  879</span>                                   <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z)</div>
<div class="line"><a id="l00880" name="l00880"></a><span class="lineno">  880</span>  {</div>
<div class="line"><a id="l00881" name="l00881"></a><span class="lineno">  881</span>    filter.update(output_z...);</div>
<div class="line"><a id="l00882" name="l00882"></a><span class="lineno">  882</span>    filter.predict(arguments..., input_u...);</div>
<div class="line"><a id="l00883" name="l00883"></a><span class="lineno">  883</span>  }</div>
<div class="line"><a id="l00884" name="l00884"></a><span class="lineno">  884</span> </div>
<div class="line"><a id="l00898" name="l00898"></a><span class="lineno">  898</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> update(<span class="keyword">const</span> UpdateArguments &amp;...arguments,</div>
<div class="line"><a id="l00899" name="l00899"></a><span class="lineno">  899</span>                               <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z);</div>
<div class="line"><a id="l00900" name="l00900"></a><span class="lineno">  900</span> </div>
<div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments,</div>
<div class="line"><a id="l00917" name="l00917"></a><span class="lineno">  917</span>                                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u);</div>
<div class="line"><a id="l00918" name="l00918"></a><span class="lineno">  918</span> </div>
<div class="line"><a id="l00920" name="l00920"></a><span class="lineno">  920</span> </div>
<div class="line"><a id="l00921" name="l00921"></a><span class="lineno">  921</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00924" name="l00924"></a><span class="lineno">  924</span> </div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">  926</a></span>  <a class="code hl_struct" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml">implementation</a> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>;</div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno">  927</span> </div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span>};</div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span> </div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno">  931</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno">  932</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00936" name="l00936"></a><span class="lineno">  936</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00937" name="l00937"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad2c098ccf298ad413115e454e7246a76">  937</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::x()</div>
<div class="line"><a id="l00938" name="l00938"></a><span class="lineno">  938</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a></div>
<div class="line"><a id="l00939" name="l00939"></a><span class="lineno">  939</span>{</div>
<div class="line"><a id="l00940" name="l00940"></a><span class="lineno">  940</span>  <span class="keywordflow">return</span> filter.x;</div>
<div class="line"><a id="l00941" name="l00941"></a><span class="lineno">  941</span>}</div>
<div class="line"><a id="l00942" name="l00942"></a><span class="lineno">  942</span> </div>
<div class="line"><a id="l00943" name="l00943"></a><span class="lineno">  943</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00944" name="l00944"></a><span class="lineno">  944</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00945" name="l00945"></a><span class="lineno">  945</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00946" name="l00946"></a><span class="lineno">  946</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00947" name="l00947"></a><span class="lineno">  947</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4d03c5f472f16df72a2ba8999cffca60">  950</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;value)</div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>{</div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span>  filter.x = value;</div>
<div class="line"><a id="l00953" name="l00953"></a><span class="lineno">  953</span>}</div>
<div class="line"><a id="l00954" name="l00954"></a><span class="lineno">  954</span> </div>
<div class="line"><a id="l00955" name="l00955"></a><span class="lineno">  955</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00956" name="l00956"></a><span class="lineno">  956</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00957" name="l00957"></a><span class="lineno">  957</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00958" name="l00958"></a><span class="lineno">  958</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00959" name="l00959"></a><span class="lineno">  959</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00960" name="l00960"></a><span class="lineno">  960</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00961" name="l00961"></a><span class="lineno">  961</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af3a1aaacd95a95705714ee6922992252">  962</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;value)</div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span>{</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span>  filter.x = std::move(value);</div>
<div class="line"><a id="l00965" name="l00965"></a><span class="lineno">  965</span>}</div>
<div class="line"><a id="l00966" name="l00966"></a><span class="lineno">  966</span> </div>
<div class="line"><a id="l00967" name="l00967"></a><span class="lineno">  967</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00968" name="l00968"></a><span class="lineno">  968</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00970" name="l00970"></a><span class="lineno">  970</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00971" name="l00971"></a><span class="lineno">  971</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00972" name="l00972"></a><span class="lineno">  972</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a00c7538ba91b0e915e55ea4b671fd47c">  974</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>{</div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno">  977</span>  filter.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ value, values... });</div>
<div class="line"><a id="l00978" name="l00978"></a><span class="lineno">  978</span>}</div>
<div class="line"><a id="l00979" name="l00979"></a><span class="lineno">  979</span> </div>
<div class="line"><a id="l00980" name="l00980"></a><span class="lineno">  980</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00981" name="l00981"></a><span class="lineno">  981</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00982" name="l00982"></a><span class="lineno">  982</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00983" name="l00983"></a><span class="lineno">  983</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00984" name="l00984"></a><span class="lineno">  984</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00985" name="l00985"></a><span class="lineno">  985</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad539bc1c2c592001bb2550722318ac95">  987</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno">  988</span>{</div>
<div class="line"><a id="l00989" name="l00989"></a><span class="lineno">  989</span>  filter.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>}</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span> </div>
<div class="line"><a id="l00993" name="l00993"></a><span class="lineno">  993</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00994" name="l00994"></a><span class="lineno">  994</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00995" name="l00995"></a><span class="lineno">  995</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00996" name="l00996"></a><span class="lineno">  996</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00997" name="l00997"></a><span class="lineno">  997</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00998" name="l00998"></a><span class="lineno">  998</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1039f28547872c3792f1ee723f3712d5">  999</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::z()</div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a></div>
<div class="line"><a id="l01001" name="l01001"></a><span class="lineno"> 1001</span>{</div>
<div class="line"><a id="l01002" name="l01002"></a><span class="lineno"> 1002</span>  <span class="keywordflow">return</span> filter.z;</div>
<div class="line"><a id="l01003" name="l01003"></a><span class="lineno"> 1003</span>}</div>
<div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span> </div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01006" name="l01006"></a><span class="lineno"> 1006</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01007" name="l01007"></a><span class="lineno"> 1007</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01008" name="l01008"></a><span class="lineno"> 1008</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01009" name="l01009"></a><span class="lineno"> 1009</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01010" name="l01010"></a><span class="lineno"> 1010</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afec5a7c22c82c90dd5a16348dcd04837"> 1011</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::p()</div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a></div>
<div class="line"><a id="l01013" name="l01013"></a><span class="lineno"> 1013</span>{</div>
<div class="line"><a id="l01014" name="l01014"></a><span class="lineno"> 1014</span>  <span class="keywordflow">return</span> filter.p;</div>
<div class="line"><a id="l01015" name="l01015"></a><span class="lineno"> 1015</span>}</div>
<div class="line"><a id="l01016" name="l01016"></a><span class="lineno"> 1016</span> </div>
<div class="line"><a id="l01017" name="l01017"></a><span class="lineno"> 1017</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01018" name="l01018"></a><span class="lineno"> 1018</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01019" name="l01019"></a><span class="lineno"> 1019</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"> 1020</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a38ee9c89407b0d5e5ea4628fe9aa5a27"> 1024</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01025" name="l01025"></a><span class="lineno"> 1025</span>{</div>
<div class="line"><a id="l01026" name="l01026"></a><span class="lineno"> 1026</span>  filter.p = value;</div>
<div class="line"><a id="l01027" name="l01027"></a><span class="lineno"> 1027</span>}</div>
<div class="line"><a id="l01028" name="l01028"></a><span class="lineno"> 1028</span> </div>
<div class="line"><a id="l01029" name="l01029"></a><span class="lineno"> 1029</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01030" name="l01030"></a><span class="lineno"> 1030</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01031" name="l01031"></a><span class="lineno"> 1031</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01032" name="l01032"></a><span class="lineno"> 1032</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01033" name="l01033"></a><span class="lineno"> 1033</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa38fba84334f874047a9fec46d14199d"> 1036</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"> 1037</span>{</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span>  filter.p = std::move(value);</div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span>}</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span> </div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01043" name="l01043"></a><span class="lineno"> 1043</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01044" name="l01044"></a><span class="lineno"> 1044</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01045" name="l01045"></a><span class="lineno"> 1045</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aff9046ab09074b5e0c9e95999c96ac16"> 1048</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01049" name="l01049"></a><span class="lineno"> 1049</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01050" name="l01050"></a><span class="lineno"> 1050</span>{</div>
<div class="line"><a id="l01051" name="l01051"></a><span class="lineno"> 1051</span>  filter.p = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01052" name="l01052"></a><span class="lineno"> 1052</span>}</div>
<div class="line"><a id="l01053" name="l01053"></a><span class="lineno"> 1053</span> </div>
<div class="line"><a id="l01054" name="l01054"></a><span class="lineno"> 1054</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"> 1055</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01061" name="l01061"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae53be9c76d5617dfc539855e0edb7983"> 1061</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01062" name="l01062"></a><span class="lineno"> 1062</span>{</div>
<div class="line"><a id="l01063" name="l01063"></a><span class="lineno"> 1063</span>  filter.p = std::move(</div>
<div class="line"><a id="l01064" name="l01064"></a><span class="lineno"> 1064</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01065" name="l01065"></a><span class="lineno"> 1065</span>                            std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01066" name="l01066"></a><span class="lineno"> 1066</span>}</div>
<div class="line"><a id="l01067" name="l01067"></a><span class="lineno"> 1067</span> </div>
<div class="line"><a id="l01068" name="l01068"></a><span class="lineno"> 1068</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01069" name="l01069"></a><span class="lineno"> 1069</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01070" name="l01070"></a><span class="lineno"> 1070</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01071" name="l01071"></a><span class="lineno"> 1071</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01072" name="l01072"></a><span class="lineno"> 1072</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"> 1073</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01074" name="l01074"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad12cd3706e98a4c52fc3579b6e23f849"> 1074</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::q()</div>
<div class="line"><a id="l01075" name="l01075"></a><span class="lineno"> 1075</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a></div>
<div class="line"><a id="l01076" name="l01076"></a><span class="lineno"> 1076</span>{</div>
<div class="line"><a id="l01077" name="l01077"></a><span class="lineno"> 1077</span>  <span class="keywordflow">return</span> filter.q;</div>
<div class="line"><a id="l01078" name="l01078"></a><span class="lineno"> 1078</span>}</div>
<div class="line"><a id="l01079" name="l01079"></a><span class="lineno"> 1079</span> </div>
<div class="line"><a id="l01081" name="l01081"></a><span class="lineno"> 1081</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01082" name="l01082"></a><span class="lineno"> 1082</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01083" name="l01083"></a><span class="lineno"> 1083</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01084" name="l01084"></a><span class="lineno"> 1084</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01085" name="l01085"></a><span class="lineno"> 1085</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01086" name="l01086"></a><span class="lineno"> 1086</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01087" name="l01087"></a><span class="lineno"> 1087</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01088" name="l01088"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a43a8130c43da1665805b4774e77a0308"> 1088</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01089" name="l01089"></a><span class="lineno"> 1089</span>{</div>
<div class="line"><a id="l01090" name="l01090"></a><span class="lineno"> 1090</span>  filter.q = value;</div>
<div class="line"><a id="l01091" name="l01091"></a><span class="lineno"> 1091</span>}</div>
<div class="line"><a id="l01092" name="l01092"></a><span class="lineno"> 1092</span> </div>
<div class="line"><a id="l01094" name="l01094"></a><span class="lineno"> 1094</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01095" name="l01095"></a><span class="lineno"> 1095</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01096" name="l01096"></a><span class="lineno"> 1096</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01097" name="l01097"></a><span class="lineno"> 1097</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01098" name="l01098"></a><span class="lineno"> 1098</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01099" name="l01099"></a><span class="lineno"> 1099</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01100" name="l01100"></a><span class="lineno"> 1100</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01101" name="l01101"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac534ebd63b2620769c4bbb76830df6b8"> 1101</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01102" name="l01102"></a><span class="lineno"> 1102</span>{</div>
<div class="line"><a id="l01103" name="l01103"></a><span class="lineno"> 1103</span>  filter.q = std::move(value);</div>
<div class="line"><a id="l01104" name="l01104"></a><span class="lineno"> 1104</span>}</div>
<div class="line"><a id="l01105" name="l01105"></a><span class="lineno"> 1105</span> </div>
<div class="line"><a id="l01107" name="l01107"></a><span class="lineno"> 1107</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01108" name="l01108"></a><span class="lineno"> 1108</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01109" name="l01109"></a><span class="lineno"> 1109</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01110" name="l01110"></a><span class="lineno"> 1110</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01111" name="l01111"></a><span class="lineno"> 1111</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01112" name="l01112"></a><span class="lineno"> 1112</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01113" name="l01113"></a><span class="lineno"> 1113</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01114" name="l01114"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac35e3b90fc17719c1a8c0d4d8a008785"> 1114</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01115" name="l01115"></a><span class="lineno"> 1115</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01116" name="l01116"></a><span class="lineno"> 1116</span>{</div>
<div class="line"><a id="l01117" name="l01117"></a><span class="lineno"> 1117</span>  filter.q = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01118" name="l01118"></a><span class="lineno"> 1118</span>}</div>
<div class="line"><a id="l01119" name="l01119"></a><span class="lineno"> 1119</span> </div>
<div class="line"><a id="l01121" name="l01121"></a><span class="lineno"> 1121</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01122" name="l01122"></a><span class="lineno"> 1122</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01123" name="l01123"></a><span class="lineno"> 1123</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01126" name="l01126"></a><span class="lineno"> 1126</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01127" name="l01127"></a><span class="lineno"> 1127</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01128" name="l01128"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af82ffde1dadd3bf88e215a3ac0bd1a0b"> 1128</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01129" name="l01129"></a><span class="lineno"> 1129</span>{</div>
<div class="line"><a id="l01130" name="l01130"></a><span class="lineno"> 1130</span>  filter.q = std::move(</div>
<div class="line"><a id="l01131" name="l01131"></a><span class="lineno"> 1131</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01132" name="l01132"></a><span class="lineno"> 1132</span>                           std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01133" name="l01133"></a><span class="lineno"> 1133</span>}</div>
<div class="line"><a id="l01134" name="l01134"></a><span class="lineno"> 1134</span> </div>
<div class="line"><a id="l01135" name="l01135"></a><span class="lineno"> 1135</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01136" name="l01136"></a><span class="lineno"> 1136</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01137" name="l01137"></a><span class="lineno"> 1137</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01138" name="l01138"></a><span class="lineno"> 1138</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"> 1139</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01140" name="l01140"></a><span class="lineno"> 1140</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01141" name="l01141"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aad10f87648f333b36312f9afe50c5407"> 1141</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::r()</div>
<div class="line"><a id="l01142" name="l01142"></a><span class="lineno"> 1142</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a></div>
<div class="line"><a id="l01143" name="l01143"></a><span class="lineno"> 1143</span>{</div>
<div class="line"><a id="l01144" name="l01144"></a><span class="lineno"> 1144</span>  <span class="keywordflow">return</span> filter.r;</div>
<div class="line"><a id="l01145" name="l01145"></a><span class="lineno"> 1145</span>}</div>
<div class="line"><a id="l01146" name="l01146"></a><span class="lineno"> 1146</span> </div>
<div class="line"><a id="l01147" name="l01147"></a><span class="lineno"> 1147</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01148" name="l01148"></a><span class="lineno"> 1148</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01149" name="l01149"></a><span class="lineno"> 1149</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01150" name="l01150"></a><span class="lineno"> 1150</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01151" name="l01151"></a><span class="lineno"> 1151</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01152" name="l01152"></a><span class="lineno"> 1152</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01153" name="l01153"></a><span class="lineno"> 1153</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01154" name="l01154"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6084a664fcde706247f91de2d441f6ac"> 1154</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01155" name="l01155"></a><span class="lineno"> 1155</span>{</div>
<div class="line"><a id="l01156" name="l01156"></a><span class="lineno"> 1156</span>  filter.r = value;</div>
<div class="line"><a id="l01157" name="l01157"></a><span class="lineno"> 1157</span>}</div>
<div class="line"><a id="l01158" name="l01158"></a><span class="lineno"> 1158</span> </div>
<div class="line"><a id="l01159" name="l01159"></a><span class="lineno"> 1159</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01160" name="l01160"></a><span class="lineno"> 1160</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01161" name="l01161"></a><span class="lineno"> 1161</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01162" name="l01162"></a><span class="lineno"> 1162</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01163" name="l01163"></a><span class="lineno"> 1163</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01164" name="l01164"></a><span class="lineno"> 1164</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01165" name="l01165"></a><span class="lineno"> 1165</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#acaefb648cec4a50998444d982e21c942"> 1166</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01167" name="l01167"></a><span class="lineno"> 1167</span>{</div>
<div class="line"><a id="l01168" name="l01168"></a><span class="lineno"> 1168</span>  filter.r = std::move(value);</div>
<div class="line"><a id="l01169" name="l01169"></a><span class="lineno"> 1169</span>}</div>
<div class="line"><a id="l01170" name="l01170"></a><span class="lineno"> 1170</span> </div>
<div class="line"><a id="l01171" name="l01171"></a><span class="lineno"> 1171</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01172" name="l01172"></a><span class="lineno"> 1172</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01173" name="l01173"></a><span class="lineno"> 1173</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01174" name="l01174"></a><span class="lineno"> 1174</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01175" name="l01175"></a><span class="lineno"> 1175</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01176" name="l01176"></a><span class="lineno"> 1176</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01177" name="l01177"></a><span class="lineno"> 1177</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01178" name="l01178"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a687ad5deeb6467a2ff72a1fbb40c6565"> 1178</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01179" name="l01179"></a><span class="lineno"> 1179</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01180" name="l01180"></a><span class="lineno"> 1180</span>{</div>
<div class="line"><a id="l01181" name="l01181"></a><span class="lineno"> 1181</span>  filter.r = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ value, values... };</div>
<div class="line"><a id="l01182" name="l01182"></a><span class="lineno"> 1182</span>}</div>
<div class="line"><a id="l01183" name="l01183"></a><span class="lineno"> 1183</span> </div>
<div class="line"><a id="l01184" name="l01184"></a><span class="lineno"> 1184</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01185" name="l01185"></a><span class="lineno"> 1185</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01186" name="l01186"></a><span class="lineno"> 1186</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01187" name="l01187"></a><span class="lineno"> 1187</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01188" name="l01188"></a><span class="lineno"> 1188</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01189" name="l01189"></a><span class="lineno"> 1189</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01190" name="l01190"></a><span class="lineno"> 1190</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01191" name="l01191"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad61f5815088a806f5c744e4b48bc9c70"> 1191</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01192" name="l01192"></a><span class="lineno"> 1192</span>{</div>
<div class="line"><a id="l01193" name="l01193"></a><span class="lineno"> 1193</span>  filter.r = std::move(</div>
<div class="line"><a id="l01194" name="l01194"></a><span class="lineno"> 1194</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01195" name="l01195"></a><span class="lineno"> 1195</span>                          std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01196" name="l01196"></a><span class="lineno"> 1196</span>}</div>
<div class="line"><a id="l01197" name="l01197"></a><span class="lineno"> 1197</span> </div>
<div class="line"><a id="l01198" name="l01198"></a><span class="lineno"> 1198</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01199" name="l01199"></a><span class="lineno"> 1199</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01200" name="l01200"></a><span class="lineno"> 1200</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01201" name="l01201"></a><span class="lineno"> 1201</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01202" name="l01202"></a><span class="lineno"> 1202</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01203" name="l01203"></a><span class="lineno"> 1203</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01204" name="l01204"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa5f2a19b89842335b53d5777820211ff"> 1204</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::f()</div>
<div class="line"><a id="l01205" name="l01205"></a><span class="lineno"> 1205</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a></div>
<div class="line"><a id="l01206" name="l01206"></a><span class="lineno"> 1206</span>{</div>
<div class="line"><a id="l01207" name="l01207"></a><span class="lineno"> 1207</span>  <span class="keywordflow">return</span> filter.f;</div>
<div class="line"><a id="l01208" name="l01208"></a><span class="lineno"> 1208</span>}</div>
<div class="line"><a id="l01209" name="l01209"></a><span class="lineno"> 1209</span> </div>
<div class="line"><a id="l01210" name="l01210"></a><span class="lineno"> 1210</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01211" name="l01211"></a><span class="lineno"> 1211</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01212" name="l01212"></a><span class="lineno"> 1212</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01213" name="l01213"></a><span class="lineno"> 1213</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01214" name="l01214"></a><span class="lineno"> 1214</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01215" name="l01215"></a><span class="lineno"> 1215</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01216" name="l01216"></a><span class="lineno"> 1216</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01217" name="l01217"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5620ce64a25fbf4f9322798e22d13433"> 1217</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;value)</div>
<div class="line"><a id="l01218" name="l01218"></a><span class="lineno"> 1218</span>{</div>
<div class="line"><a id="l01219" name="l01219"></a><span class="lineno"> 1219</span>  filter.f = value;</div>
<div class="line"><a id="l01220" name="l01220"></a><span class="lineno"> 1220</span>}</div>
<div class="line"><a id="l01221" name="l01221"></a><span class="lineno"> 1221</span> </div>
<div class="line"><a id="l01222" name="l01222"></a><span class="lineno"> 1222</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01223" name="l01223"></a><span class="lineno"> 1223</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01224" name="l01224"></a><span class="lineno"> 1224</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01225" name="l01225"></a><span class="lineno"> 1225</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01226" name="l01226"></a><span class="lineno"> 1226</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01227" name="l01227"></a><span class="lineno"> 1227</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01228" name="l01228"></a><span class="lineno"> 1228</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01229" name="l01229"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6556dd42246c90ec83502a670ef26d93"> 1229</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;&amp;value)</div>
<div class="line"><a id="l01230" name="l01230"></a><span class="lineno"> 1230</span>{</div>
<div class="line"><a id="l01231" name="l01231"></a><span class="lineno"> 1231</span>  filter.f = std::move(value);</div>
<div class="line"><a id="l01232" name="l01232"></a><span class="lineno"> 1232</span>}</div>
<div class="line"><a id="l01233" name="l01233"></a><span class="lineno"> 1233</span> </div>
<div class="line"><a id="l01234" name="l01234"></a><span class="lineno"> 1234</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01235" name="l01235"></a><span class="lineno"> 1235</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01236" name="l01236"></a><span class="lineno"> 1236</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01237" name="l01237"></a><span class="lineno"> 1237</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01238" name="l01238"></a><span class="lineno"> 1238</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01239" name="l01239"></a><span class="lineno"> 1239</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01240" name="l01240"></a><span class="lineno"> 1240</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01241" name="l01241"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a171f8e535b7962fd5413eb2f1079f47c"> 1241</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01242" name="l01242"></a><span class="lineno"> 1242</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01243" name="l01243"></a><span class="lineno"> 1243</span>{</div>
<div class="line"><a id="l01244" name="l01244"></a><span class="lineno"> 1244</span>  filter.f = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ value, values... };</div>
<div class="line"><a id="l01245" name="l01245"></a><span class="lineno"> 1245</span>}</div>
<div class="line"><a id="l01246" name="l01246"></a><span class="lineno"> 1246</span> </div>
<div class="line"><a id="l01247" name="l01247"></a><span class="lineno"> 1247</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01248" name="l01248"></a><span class="lineno"> 1248</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01249" name="l01249"></a><span class="lineno"> 1249</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01250" name="l01250"></a><span class="lineno"> 1250</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01251" name="l01251"></a><span class="lineno"> 1251</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01252" name="l01252"></a><span class="lineno"> 1252</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01253" name="l01253"></a><span class="lineno"> 1253</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01254" name="l01254"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6518991f343d0da14df76b6724e8deaa"> 1254</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01255" name="l01255"></a><span class="lineno"> 1255</span>{</div>
<div class="line"><a id="l01256" name="l01256"></a><span class="lineno"> 1256</span>  filter.f =</div>
<div class="line"><a id="l01257" name="l01257"></a><span class="lineno"> 1257</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01258" name="l01258"></a><span class="lineno"> 1258</span>                                  std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01259" name="l01259"></a><span class="lineno"> 1259</span>}</div>
<div class="line"><a id="l01260" name="l01260"></a><span class="lineno"> 1260</span> </div>
<div class="line"><a id="l01261" name="l01261"></a><span class="lineno"> 1261</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01262" name="l01262"></a><span class="lineno"> 1262</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01263" name="l01263"></a><span class="lineno"> 1263</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01264" name="l01264"></a><span class="lineno"> 1264</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01265" name="l01265"></a><span class="lineno"> 1265</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01266" name="l01266"></a><span class="lineno"> 1266</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01267" name="l01267"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0370a8ea6f1be4372d0c25fd4645442d"> 1267</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::h()</div>
<div class="line"><a id="l01268" name="l01268"></a><span class="lineno"> 1268</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a></div>
<div class="line"><a id="l01269" name="l01269"></a><span class="lineno"> 1269</span>{</div>
<div class="line"><a id="l01270" name="l01270"></a><span class="lineno"> 1270</span>  <span class="keywordflow">return</span> filter.h;</div>
<div class="line"><a id="l01271" name="l01271"></a><span class="lineno"> 1271</span>}</div>
<div class="line"><a id="l01272" name="l01272"></a><span class="lineno"> 1272</span> </div>
<div class="line"><a id="l01273" name="l01273"></a><span class="lineno"> 1273</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01274" name="l01274"></a><span class="lineno"> 1274</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01275" name="l01275"></a><span class="lineno"> 1275</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01276" name="l01276"></a><span class="lineno"> 1276</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01277" name="l01277"></a><span class="lineno"> 1277</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01278" name="l01278"></a><span class="lineno"> 1278</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01279" name="l01279"></a><span class="lineno"> 1279</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01280" name="l01280"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac7f7b0dd72e6f3591649dc5394dcf0e1"> 1280</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;value)</div>
<div class="line"><a id="l01281" name="l01281"></a><span class="lineno"> 1281</span>{</div>
<div class="line"><a id="l01282" name="l01282"></a><span class="lineno"> 1282</span>  filter.h = value;</div>
<div class="line"><a id="l01283" name="l01283"></a><span class="lineno"> 1283</span>}</div>
<div class="line"><a id="l01284" name="l01284"></a><span class="lineno"> 1284</span> </div>
<div class="line"><a id="l01285" name="l01285"></a><span class="lineno"> 1285</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01286" name="l01286"></a><span class="lineno"> 1286</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01287" name="l01287"></a><span class="lineno"> 1287</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01288" name="l01288"></a><span class="lineno"> 1288</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01289" name="l01289"></a><span class="lineno"> 1289</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01290" name="l01290"></a><span class="lineno"> 1290</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01291" name="l01291"></a><span class="lineno"> 1291</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01292" name="l01292"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3440f4c242173d9f28d92a05701054b6"> 1292</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;&amp;value)</div>
<div class="line"><a id="l01293" name="l01293"></a><span class="lineno"> 1293</span>{</div>
<div class="line"><a id="l01294" name="l01294"></a><span class="lineno"> 1294</span>  filter.h = std::move(value);</div>
<div class="line"><a id="l01295" name="l01295"></a><span class="lineno"> 1295</span>}</div>
<div class="line"><a id="l01296" name="l01296"></a><span class="lineno"> 1296</span> </div>
<div class="line"><a id="l01297" name="l01297"></a><span class="lineno"> 1297</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01298" name="l01298"></a><span class="lineno"> 1298</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01299" name="l01299"></a><span class="lineno"> 1299</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01300" name="l01300"></a><span class="lineno"> 1300</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01301" name="l01301"></a><span class="lineno"> 1301</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01302" name="l01302"></a><span class="lineno"> 1302</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01303" name="l01303"></a><span class="lineno"> 1303</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01304" name="l01304"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0d55dcd95188a8c92238cefd64cb2fe3"> 1304</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01305" name="l01305"></a><span class="lineno"> 1305</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01306" name="l01306"></a><span class="lineno"> 1306</span>{</div>
<div class="line"><a id="l01307" name="l01307"></a><span class="lineno"> 1307</span>  filter.h = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ value, values... };</div>
<div class="line"><a id="l01308" name="l01308"></a><span class="lineno"> 1308</span>}</div>
<div class="line"><a id="l01309" name="l01309"></a><span class="lineno"> 1309</span> </div>
<div class="line"><a id="l01310" name="l01310"></a><span class="lineno"> 1310</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01311" name="l01311"></a><span class="lineno"> 1311</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01312" name="l01312"></a><span class="lineno"> 1312</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01313" name="l01313"></a><span class="lineno"> 1313</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01314" name="l01314"></a><span class="lineno"> 1314</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01315" name="l01315"></a><span class="lineno"> 1315</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01316" name="l01316"></a><span class="lineno"> 1316</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01317" name="l01317"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a95c2efbee9a3a29482282faef3d1b367"> 1317</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01318" name="l01318"></a><span class="lineno"> 1318</span>{</div>
<div class="line"><a id="l01319" name="l01319"></a><span class="lineno"> 1319</span>  filter.h =</div>
<div class="line"><a id="l01320" name="l01320"></a><span class="lineno"> 1320</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01321" name="l01321"></a><span class="lineno"> 1321</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01322" name="l01322"></a><span class="lineno"> 1322</span>}</div>
<div class="line"><a id="l01323" name="l01323"></a><span class="lineno"> 1323</span> </div>
<div class="line"><a id="l01324" name="l01324"></a><span class="lineno"> 1324</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01325" name="l01325"></a><span class="lineno"> 1325</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01326" name="l01326"></a><span class="lineno"> 1326</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01327" name="l01327"></a><span class="lineno"> 1327</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01328" name="l01328"></a><span class="lineno"> 1328</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01329" name="l01329"></a><span class="lineno"> 1329</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01330" name="l01330"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cade2af2ad1e4f3cde979cfe9c1439b"> 1330</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::g()</div>
<div class="line"><a id="l01331" name="l01331"></a><span class="lineno"> 1331</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a></div>
<div class="line"><a id="l01332" name="l01332"></a><span class="lineno"> 1332</span>{</div>
<div class="line"><a id="l01333" name="l01333"></a><span class="lineno"> 1333</span>  <span class="keywordflow">return</span> filter.g;</div>
<div class="line"><a id="l01334" name="l01334"></a><span class="lineno"> 1334</span>}</div>
<div class="line"><a id="l01335" name="l01335"></a><span class="lineno"> 1335</span> </div>
<div class="line"><a id="l01336" name="l01336"></a><span class="lineno"> 1336</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01337" name="l01337"></a><span class="lineno"> 1337</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01338" name="l01338"></a><span class="lineno"> 1338</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01339" name="l01339"></a><span class="lineno"> 1339</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01340" name="l01340"></a><span class="lineno"> 1340</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01341" name="l01341"></a><span class="lineno"> 1341</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01342" name="l01342"></a><span class="lineno"> 1342</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01343" name="l01343"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aacc8ff5d8536cdb89bde5fe3c9e42d3d"> 1343</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;value)</div>
<div class="line"><a id="l01344" name="l01344"></a><span class="lineno"> 1344</span>{</div>
<div class="line"><a id="l01345" name="l01345"></a><span class="lineno"> 1345</span>  filter.g = value;</div>
<div class="line"><a id="l01346" name="l01346"></a><span class="lineno"> 1346</span>}</div>
<div class="line"><a id="l01347" name="l01347"></a><span class="lineno"> 1347</span> </div>
<div class="line"><a id="l01348" name="l01348"></a><span class="lineno"> 1348</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01349" name="l01349"></a><span class="lineno"> 1349</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01350" name="l01350"></a><span class="lineno"> 1350</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01351" name="l01351"></a><span class="lineno"> 1351</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01352" name="l01352"></a><span class="lineno"> 1352</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01353" name="l01353"></a><span class="lineno"> 1353</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01354" name="l01354"></a><span class="lineno"> 1354</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01355" name="l01355"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3c2ad8ac4b5f2a4a213df1cfc2422f2a"> 1355</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;&amp;value)</div>
<div class="line"><a id="l01356" name="l01356"></a><span class="lineno"> 1356</span>{</div>
<div class="line"><a id="l01357" name="l01357"></a><span class="lineno"> 1357</span>  filter.g = std::move(value);</div>
<div class="line"><a id="l01358" name="l01358"></a><span class="lineno"> 1358</span>}</div>
<div class="line"><a id="l01359" name="l01359"></a><span class="lineno"> 1359</span> </div>
<div class="line"><a id="l01360" name="l01360"></a><span class="lineno"> 1360</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01361" name="l01361"></a><span class="lineno"> 1361</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01362" name="l01362"></a><span class="lineno"> 1362</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01363" name="l01363"></a><span class="lineno"> 1363</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01364" name="l01364"></a><span class="lineno"> 1364</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01365" name="l01365"></a><span class="lineno"> 1365</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01366" name="l01366"></a><span class="lineno"> 1366</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01367" name="l01367"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac5a26886bcb2b17876bb2a516bc025df"> 1367</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01368" name="l01368"></a><span class="lineno"> 1368</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01369" name="l01369"></a><span class="lineno"> 1369</span>{</div>
<div class="line"><a id="l01370" name="l01370"></a><span class="lineno"> 1370</span>  filter.g = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ value, values... };</div>
<div class="line"><a id="l01371" name="l01371"></a><span class="lineno"> 1371</span>}</div>
<div class="line"><a id="l01372" name="l01372"></a><span class="lineno"> 1372</span> </div>
<div class="line"><a id="l01373" name="l01373"></a><span class="lineno"> 1373</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01374" name="l01374"></a><span class="lineno"> 1374</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01375" name="l01375"></a><span class="lineno"> 1375</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01376" name="l01376"></a><span class="lineno"> 1376</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01377" name="l01377"></a><span class="lineno"> 1377</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01378" name="l01378"></a><span class="lineno"> 1378</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01379" name="l01379"></a><span class="lineno"> 1379</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01380" name="l01380"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a92feb96774f92926d421a6ded5ce81dd"> 1380</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01381" name="l01381"></a><span class="lineno"> 1381</span>{</div>
<div class="line"><a id="l01382" name="l01382"></a><span class="lineno"> 1382</span>  filter.g =</div>
<div class="line"><a id="l01383" name="l01383"></a><span class="lineno"> 1383</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01384" name="l01384"></a><span class="lineno"> 1384</span>                               std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01385" name="l01385"></a><span class="lineno"> 1385</span>}</div>
<div class="line"><a id="l01386" name="l01386"></a><span class="lineno"> 1386</span> </div>
<div class="line"><a id="l01387" name="l01387"></a><span class="lineno"> 1387</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01388" name="l01388"></a><span class="lineno"> 1388</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01389" name="l01389"></a><span class="lineno"> 1389</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01390" name="l01390"></a><span class="lineno"> 1390</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01391" name="l01391"></a><span class="lineno"> 1391</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01392" name="l01392"></a><span class="lineno"> 1392</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01393" name="l01393"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8aa520d3dd110e616c665b516328aaa0"> 1393</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::k()</div>
<div class="line"><a id="l01394" name="l01394"></a><span class="lineno"> 1394</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a></div>
<div class="line"><a id="l01395" name="l01395"></a><span class="lineno"> 1395</span>{</div>
<div class="line"><a id="l01396" name="l01396"></a><span class="lineno"> 1396</span>  <span class="keywordflow">return</span> filter.k;</div>
<div class="line"><a id="l01397" name="l01397"></a><span class="lineno"> 1397</span>}</div>
<div class="line"><a id="l01398" name="l01398"></a><span class="lineno"> 1398</span> </div>
<div class="line"><a id="l01399" name="l01399"></a><span class="lineno"> 1399</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01400" name="l01400"></a><span class="lineno"> 1400</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01401" name="l01401"></a><span class="lineno"> 1401</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01402" name="l01402"></a><span class="lineno"> 1402</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01403" name="l01403"></a><span class="lineno"> 1403</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01404" name="l01404"></a><span class="lineno"> 1404</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01405" name="l01405"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a859ab007e6da085502cb3415022e1182"> 1405</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::y()</div>
<div class="line"><a id="l01406" name="l01406"></a><span class="lineno"> 1406</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a></div>
<div class="line"><a id="l01407" name="l01407"></a><span class="lineno"> 1407</span>{</div>
<div class="line"><a id="l01408" name="l01408"></a><span class="lineno"> 1408</span>  <span class="keywordflow">return</span> filter.y;</div>
<div class="line"><a id="l01409" name="l01409"></a><span class="lineno"> 1409</span>}</div>
<div class="line"><a id="l01410" name="l01410"></a><span class="lineno"> 1410</span> </div>
<div class="line"><a id="l01411" name="l01411"></a><span class="lineno"> 1411</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01412" name="l01412"></a><span class="lineno"> 1412</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01413" name="l01413"></a><span class="lineno"> 1413</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01414" name="l01414"></a><span class="lineno"> 1414</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01415" name="l01415"></a><span class="lineno"> 1415</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01416" name="l01416"></a><span class="lineno"> 1416</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01417" name="l01417"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a85d0d89138b16394f874299e720a5334"> 1417</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::s()</div>
<div class="line"><a id="l01418" name="l01418"></a><span class="lineno"> 1418</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a></div>
<div class="line"><a id="l01419" name="l01419"></a><span class="lineno"> 1419</span>{</div>
<div class="line"><a id="l01420" name="l01420"></a><span class="lineno"> 1420</span>  <span class="keywordflow">return</span> filter.s;</div>
<div class="line"><a id="l01421" name="l01421"></a><span class="lineno"> 1421</span>}</div>
<div class="line"><a id="l01422" name="l01422"></a><span class="lineno"> 1422</span> </div>
<div class="line"><a id="l01423" name="l01423"></a><span class="lineno"> 1423</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01424" name="l01424"></a><span class="lineno"> 1424</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01425" name="l01425"></a><span class="lineno"> 1425</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01426" name="l01426"></a><span class="lineno"> 1426</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01427" name="l01427"></a><span class="lineno"> 1427</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01428" name="l01428"></a><span class="lineno"> 1428</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01429" name="l01429"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aaba5bd00471dd86bb62ab433e601e290"> 1429</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::</div>
<div class="line"><a id="l01430" name="l01430"></a><span class="lineno"> 1430</span>    update(<span class="keyword">const</span> UpdateArguments &amp;...arguments, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z)</div>
<div class="line"><a id="l01431" name="l01431"></a><span class="lineno"> 1431</span>{</div>
<div class="line"><a id="l01432" name="l01432"></a><span class="lineno"> 1432</span>  filter.update(arguments..., output_z...);</div>
<div class="line"><a id="l01433" name="l01433"></a><span class="lineno"> 1433</span>}</div>
<div class="line"><a id="l01434" name="l01434"></a><span class="lineno"> 1434</span> </div>
<div class="line"><a id="l01435" name="l01435"></a><span class="lineno"> 1435</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01436" name="l01436"></a><span class="lineno"> 1436</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01437" name="l01437"></a><span class="lineno"> 1437</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01438" name="l01438"></a><span class="lineno"> 1438</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01439" name="l01439"></a><span class="lineno"> 1439</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01440" name="l01440"></a><span class="lineno"> 1440</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01441" name="l01441"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7aace08260b714dcf1b71505db6e9c4d"> 1441</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::</div>
<div class="line"><a id="l01442" name="l01442"></a><span class="lineno"> 1442</span>    predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u)</div>
<div class="line"><a id="l01443" name="l01443"></a><span class="lineno"> 1443</span>{</div>
<div class="line"><a id="l01444" name="l01444"></a><span class="lineno"> 1444</span>  filter.predict(arguments..., input_u...);</div>
<div class="line"><a id="l01445" name="l01445"></a><span class="lineno"> 1445</span>}</div>
<div class="line"><a id="l01446" name="l01446"></a><span class="lineno"> 1446</span> </div>
<div class="line"><a id="l01447" name="l01447"></a><span class="lineno"> 1447</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l01448" name="l01448"></a><span class="lineno"> 1448</span> </div>
<div class="line"><a id="l01449" name="l01449"></a><span class="lineno"> 1449</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_KALMAN_HPP</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a070b4a229b25866e0315c655a4f45363"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00190">kalman.hpp:190</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a07a2833cb8987cf23bdd246e055b77bc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator=</a></div><div class="ttdeci">constexpr auto operator=(const kalman &amp;other) -&gt; kalman &amp;=default</div><div class="ttdoc">Copy assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a0c2588a07e489c62a864f7d24f092fe8"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q</a></div><div class="ttdeci">constexpr void q(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the process noise covariance matrix Q function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00463">kalman.hpp:463</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a0cbdd537cd7db2c2ed505771a1c6335d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation</a></div><div class="ttdeci">constexpr void observation(auto &amp;&amp;callable)</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00837">kalman.hpp:837</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a184350446243f42901c5e19304884cfc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation</a></div><div class="ttdeci">constexpr void observation(const auto &amp;callable)</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00829">kalman.hpp:829</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a29380c51a414f04b711824a5bca511fd"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00172">kalman.hpp:172</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a36d968ee3fb917205d9fc45c8159e016"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman(kalman &amp;&amp;other) noexcept=default</div><div class="ttdoc">Move constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a3980092faa4f88756aa1356d1ff03b07"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation</a></div><div class="ttdeci">typename implementation::innovation innovation</div><div class="ttdoc">Type of the innovation vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00196">kalman.hpp:196</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a4644c6c5e8987a82e6c2f39a9079d84d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition</a></div><div class="ttdeci">constexpr void transition(auto &amp;&amp;callable)</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00821">kalman.hpp:821</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a6ef9c58b523be1333b7d52ff4c770d0d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::gain</a></div><div class="ttdeci">typename implementation::gain gain</div><div class="ttdoc">Type of the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00193">kalman.hpp:193</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a7cc076d3e919201547efb890de7b58af"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00156">kalman.hpp:156</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a839f9ae2154b134dd9adc81995df4287"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a839f9ae2154b134dd9adc81995df4287">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f</a></div><div class="ttdeci">constexpr void f(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the state transition matrix F function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00622">kalman.hpp:622</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a8ef1d10626818a47f20e82f4340f56e4"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation_uncertainty</a></div><div class="ttdeci">typename implementation::innovation_uncertainty innovation_uncertainty</div><div class="ttdoc">Type of the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00199">kalman.hpp:200</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a980d74a57d065ea83ca60e6235f24e63"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::~kalman</a></div><div class="ttdeci">constexpr ~kalman()=default</div><div class="ttdoc">Destructs the kalman filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a98278129bb6899f98c55ffd09799b560"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r</a></div><div class="ttdeci">constexpr void r(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation noise covariance matrix R function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00545">kalman.hpp:545</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00180">kalman.hpp:180</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ab4c0442b59d66e51ae2dfd705876748b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00185">kalman.hpp:185</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ab977824cf95c0c283d19b0beaa0b30fc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman(const kalman &amp;other)=default</div><div class="ttdoc">Copy constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aba118611184d7370e9883f64c9fc99af"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman()=default</div><div class="ttdoc">Constructs a Kalman filter without configuration.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac0a58c8388997fee7b09ecd3fed65343"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator=</a></div><div class="ttdeci">constexpr auto operator=(kalman &amp;&amp;other) noexcept -&gt; kalman &amp;=default</div><div class="ttdoc">Move assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac0e89d56a929c5bd839886da696f274f"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00169">kalman.hpp:169</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac8aa1578e6ffb2fda2cd615afef13258"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00164">kalman.hpp:164</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ad8f6d60f3a75cdd1d8035f0335dac243"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output</a></div><div class="ttdeci">typename implementation::output output</div><div class="ttdoc">Type of the observation vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00161">kalman.hpp:161</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_adb1ffad6570a90c0ed3b846d952a96a8"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h</a></div><div class="ttdeci">constexpr void h(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation, measurement transition matrix H function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00701">kalman.hpp:701</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_add51c4fb72502581f7dfba667ea613ed"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g</a></div><div class="ttdeci">constexpr void g(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the control transition matrix G function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00778">kalman.hpp:778</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ae8f29b2f6cd2256440c5eb669d7c11f1"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::value_type</a></div><div class="ttdeci">Type value_type</div><div class="ttdoc">The type of the filtered data elements.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00153">kalman.hpp:153</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aefa4361777ff684059970929fd47a6be"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aefa4361777ff684059970929fd47a6be">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator()</a></div><div class="ttdeci">constexpr void operator()(const PredictionArguments &amp;...arguments, const auto &amp;...input_u, const auto &amp;...output_z)</div><div class="ttdoc">Runs a step of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00877">kalman.hpp:877</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_af0e798a32b80dee9a86b68e6ea8fb664"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00926">kalman.hpp:926</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_afacd9014b33d545e83c4e84881f5258c"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00175">kalman.hpp:175</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdoc">Kalman filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00124">kalman.hpp:125</a></div></div>
<div class="ttc" id="ainternal_2kalman_8hpp_xhtml"><div class="ttname"><a href="internal_2kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The main Kalman filter class.</div></div>
<div class="ttc" id="akalman__operator_8hpp_xhtml"><div class="ttname"><a href="kalman__operator_8hpp.xhtml">kalman_operator.hpp</a></div><div class="ttdoc">Kalman operation for standard types.</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition:</b> <a href="benchmark_8cpp_source.xhtml#l00043">benchmark.cpp:44</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;</a></div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00059">kalman.hpp:61</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a043a8fbb71c1359963b47e8cd58a1be1"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a043a8fbb71c1359963b47e8cd58a1be1">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::process_uncertainty</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, State, State &gt; &gt; process_uncertainty</div><div class="ttdoc">Type of the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00083">kalman.hpp:84</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a29af619a6a44c07d93e4b6a742137915"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a29af619a6a44c07d93e4b6a742137915">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation</a></div><div class="ttdeci">output innovation</div><div class="ttdoc">Type of the innovation vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00112">kalman.hpp:112</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a2fc9d9e4b18006d41a642a5740b39675"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2fc9d9e4b18006d41a642a5740b39675">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state</a></div><div class="ttdeci">State state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00066">kalman.hpp:66</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a45a5b9989ab5de531a03e0f8ce3c8675"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a45a5b9989ab5de531a03e0f8ce3c8675">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_model</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, Output, State &gt; &gt; output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00099">kalman.hpp:100</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a525901e2c4fb95260f40a39d2a8fdfe8"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a525901e2c4fb95260f40a39d2a8fdfe8">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_uncertainty</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, Output, Output &gt; &gt; output_uncertainty</div><div class="ttdoc">Type of the observation, measurement noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00087">kalman.hpp:88</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a5f894d43b3b9c0693c1312b681625822"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a5f894d43b3b9c0693c1312b681625822">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input_control</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, State, Input &gt; &gt; input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00105">kalman.hpp:106</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a65b55c102d2bbc6de21033f5672c09bf"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a65b55c102d2bbc6de21033f5672c09bf">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation_uncertainty</a></div><div class="ttdeci">output_uncertainty innovation_uncertainty</div><div class="ttdoc">Type of the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00115">kalman.hpp:115</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aac4677d90d6b11eb8691da8ac7fa4442"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aac4677d90d6b11eb8691da8ac7fa4442">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::estimate_uncertainty</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, State, State &gt; &gt; estimate_uncertainty</div><div class="ttdoc">Type of the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00079">kalman.hpp:80</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_abf6256a9aef7db5ffb70bc68f64e2439"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#abf6256a9aef7db5ffb70bc68f64e2439">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::gain</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Transpose, output_model &gt; &gt; gain</div><div class="ttdoc">Type of the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00109">kalman.hpp:109</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_ad58389f483104f70dbee002813577af9"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad58389f483104f70dbee002813577af9">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output</a></div><div class="ttdeci">Output output</div><div class="ttdoc">Type of the observation vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00071">kalman.hpp:71</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_ad5b850e202b48f07b71f0faf54a9b122"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad5b850e202b48f07b71f0faf54a9b122">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input</a></div><div class="ttdeci">Input input</div><div class="ttdoc">Type of the control vector U.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00074">kalman.hpp:74</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_ae0ffef3ffdc1f0fa9065e643c712a033"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ae0ffef3ffdc1f0fa9065e643c712a033">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state_transition</a></div><div class="ttdeci">std::decay_t&lt; std::invoke_result_t&lt; Divide, State, State &gt; &gt; state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00093">kalman.hpp:94</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_xhtml"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman.xhtml">fcarouge::internal::kalman</a></div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00053">kalman.hpp:53</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="kalman_8hpp.xhtml">kalman.hpp</a></li>
    <li class="footer">Generated on Tue Jun 28 2022 01:50:20 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
