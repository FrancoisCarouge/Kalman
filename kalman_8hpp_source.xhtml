<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: include/fcarouge/kalman.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kalman_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kalman.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kalman_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*_  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> | |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> | &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> |  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> | . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> |_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter for C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &quot;<a class="code" href="format_8hpp.xhtml">internal/format.hpp</a>&quot;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &quot;<a class="code" href="internal_2kalman_8hpp.xhtml">internal/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>{</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="structfcarouge_1_1identity__matrix.xhtml">   62</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1identity__matrix.xhtml">identity_matrix</a> {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">   69</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">operator()</a>() const noexcept</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  {</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    <span class="keywordflow">return</span> Type{ 1 };</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  }</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>};</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">template</span> &lt;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    <span class="keyword">typename</span> State = double, <span class="keyword">typename</span> Output = State, <span class="keyword">typename</span> Input = void,</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keyword">typename</span> Transpose = std::identity, <span class="keyword">typename</span> Symmetrize = std::identity,</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>    <span class="keyword">typename</span> Divide = std::divides&lt;void&gt;, <span class="keyword">typename</span> Identity = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#ab99c4b80cb5488c202a697e056134bae">identity_matrix</a>,</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    <span class="keyword">typename</span> UpdateTypes = <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a0d6c05cd68e6807d952e8c7344d5df5a">internal::empty_pack_t</a>,</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    <span class="keyword">typename</span> PredictionTypes = <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a0d6c05cd68e6807d952e8c7344d5df5a">internal::empty_pack_t</a>&gt;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml">  162</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>{</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">  172</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a> =</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a7cf7faca778eb747dab6c1d5c044290b">internal::kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide,</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>                       Identity, <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t&lt;UpdateTypes&gt;</a>,</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>                       <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t&lt;PredictionTypes&gt;</a>&gt;;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="keyword">public</span>:</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">  184</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> = <span class="keyword">typename</span> implementation::state;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">  189</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a> = <span class="keyword">typename</span> implementation::output;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">  194</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a> = <span class="keyword">typename</span> implementation::input;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">  199</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> = <span class="keyword">typename</span> implementation::estimate_uncertainty;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">  202</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> = <span class="keyword">typename</span> implementation::process_uncertainty;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">  205</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> = <span class="keyword">typename</span> implementation::output_uncertainty;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">  210</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> = <span class="keyword">typename</span> implementation::state_transition;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">  215</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> = <span class="keyword">typename</span> implementation::output_model;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">  222</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> = <span class="keyword">typename</span> implementation::input_control;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">  225</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a> = <span class="keyword">typename</span> implementation::gain;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">  228</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a> = <span class="keyword">typename</span> implementation::innovation;</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">  231</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a> =</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>      <span class="keyword">typename</span> implementation::innovation_uncertainty;</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a59a9e100ebc62a6d4db11a7e65a06b12">  242</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a59a9e100ebc62a6d4db11a7e65a06b12">kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa3064ce3ec5d541ddb849a7b530b5124">  253</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa3064ce3ec5d541ddb849a7b530b5124">kalman</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a97c4057f94bf097d2075c2b019a1a9e5">  265</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97c4057f94bf097d2075c2b019a1a9e5">kalman</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span> = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a4ae5a09664832ca35039c426a4a15cc6">  279</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4ae5a09664832ca35039c426a4a15cc6">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa2f0430be3a57809a6bdca479c341954">  295</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa2f0430be3a57809a6bdca479c341954">operator=</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>      -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aefcc6608c7aa96cd7ea0ab658fd5da54">  301</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aefcc6608c7aa96cd7ea0ab658fd5da54">~kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state estimate column vector X is unexpectedly &quot;</span></div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7da73fc2bef3808cb47836bf9e8208e5">  315</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a7da73fc2bef3808cb47836bf9e8208e5">x</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a></div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  {</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  }</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7f45fec5e2a499c7874350f27ff16959">  325</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a7f45fec5e2a499c7874350f27ff16959">x</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;value)</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>  {</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = value;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  }</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a0c655b621eaaea59e65cce6abe12dbd7">  335</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a0c655b621eaaea59e65cce6abe12dbd7">x</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a> &amp;&amp;value)</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  {</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(value);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  }</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span> </div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">  348</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">x</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>  {</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a>{ value, values... });</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>  }</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a04f87358de723f8ae31cd0098b54feeb">  361</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a04f87358de723f8ae31cd0098b54feeb">x</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  {</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">state</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>                                std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  }</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation column vector Z is unexpectedly &quot;</span></div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#abaa0de7e5f1ad089a9d7842add690431">  374</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#abaa0de7e5f1ad089a9d7842add690431">z</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">output</a></div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>  {</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.z;</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  }</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span> </div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  [[nodiscard(<span class="stringliteral">&quot;The returned control column vector U is unexpectedly &quot;</span></div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a505fa36129d8a58602a716fd7f16ee5f">  388</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a505fa36129d8a58602a716fd7f16ee5f">u</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">input</a> requires(!std::is_void_v&lt;Input&gt;)</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>  {</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.u;</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  }</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  [[nodiscard(<span class="stringliteral">&quot;The returned estimated covariance matrix P is unexpectedly &quot;</span></div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a868e7283042616c9fd32ea86745c3ec4">  400</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a868e7283042616c9fd32ea86745c3ec4">p</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a></div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  {</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p;</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  }</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span> </div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a922687019e99df6169eb09ddaa396bd7">  410</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a922687019e99df6169eb09ddaa396bd7">p</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>  {</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = value;</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  }</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span> </div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ac5cb329547421eabc8bb91f2c16329b7">  420</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac5cb329547421eabc8bb91f2c16329b7">p</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  {</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(value);</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>  }</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7c7a9c929365a87872d95b62a4d159c5">  433</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a7c7a9c929365a87872d95b62a4d159c5">p</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>  {</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>  }</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a4b285cd67a50650112fc13f7caccee07">  446</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4b285cd67a50650112fc13f7caccee07">p</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>  {</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.p = std::move(</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">estimate_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>  }</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  [[nodiscard(<span class="stringliteral">&quot;The returned process noise covariance matrix Q is unexpectedly &quot;</span></div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a080eaccb34518fef7cc0c54df8f73256">  460</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a080eaccb34518fef7cc0c54df8f73256">q</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a></div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>  {</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q;</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>  }</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span> </div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a83e4f8a0a73353e11ddebbd1b8d1d82f">  470</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a83e4f8a0a73353e11ddebbd1b8d1d82f">q</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>  {</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = value;</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>  }</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span> </div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a3e5dbe4814f6b42a296c23498010d37f">  480</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3e5dbe4814f6b42a296c23498010d37f">q</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>  {</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(value);</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>  }</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span> </div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#af613ee5f0bf4d914c3b551c1f0c56243">  493</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#af613ee5f0bf4d914c3b551c1f0c56243">q</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_process_function,</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>  {</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>  }</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span> </div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a2ff65c799a4c81478238546c6c1346c5">  510</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2ff65c799a4c81478238546c6c1346c5">q</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_process_function,</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>  {</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.q = std::move(</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">process_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>                             std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span>  }</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span> </div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a33f0875f7b0284b9350529018e6a27af">  530</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a33f0875f7b0284b9350529018e6a27af">q</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_process_function,</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span>  {</div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_process_q = callable;</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>  }</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span> </div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a6bb341c2ac1843c8027c02d480f37891">  546</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a6bb341c2ac1843c8027c02d480f37891">q</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_process_function,</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>  {</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_process_q = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span>  }</div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span> </div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation noise covariance matrix R is &quot;</span></div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>              <span class="stringliteral">&quot;unexpectedly discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a313170cbaab37277331127b200168da2">  563</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a313170cbaab37277331127b200168da2">r</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a></div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>  {</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r;</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>  }</div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span> </div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a2817f91f637370aea02b56fbf076fa01">  573</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2817f91f637370aea02b56fbf076fa01">r</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>  {</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = value;</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>  }</div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span> </div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa0619da7600a0124f811314fd2021815">  583</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa0619da7600a0124f811314fd2021815">r</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span>  {</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(value);</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>  }</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span> </div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a527f0da68c4138bad2438b63fb1f58d5">  596</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a527f0da68c4138bad2438b63fb1f58d5">r</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_observation_function,</div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span>  {</div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span>  }</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span> </div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#af6500c205da750d018f4f8f05dba3a17">  611</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#af6500c205da750d018f4f8f05dba3a17">r</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_observation_function,</div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span>  {</div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.r = std::move(</div>
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">output_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span>                            std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span>  }</div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span> </div>
<div class="line"><a id="l00631" name="l00631"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9085a5ff6f7f9a868f177afb6859ccab">  631</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9085a5ff6f7f9a868f177afb6859ccab">r</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_observation_function,</div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span>  {</div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_observation_r = callable;</div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>  }</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span> </div>
<div class="line"><a id="l00647" name="l00647"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab7ad017f47c9bdea9dc4410caac3f516">  647</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab7ad017f47c9bdea9dc4410caac3f516">r</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00648" name="l00648"></a><span class="lineno">  648</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::noise_observation_function,</div>
<div class="line"><a id="l00649" name="l00649"></a><span class="lineno">  649</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span>  {</div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.noise_observation_r = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00652" name="l00652"></a><span class="lineno">  652</span>  }</div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span> </div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state transition matrix F is unexpectedly &quot;</span></div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9f9048640ddd90cd1169f739ed787aa8">  661</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9f9048640ddd90cd1169f739ed787aa8">f</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a></div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span>  {</div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f;</div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span>  }</div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span> </div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a0a36196d86b79b19e6456eb09fedd369">  671</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a0a36196d86b79b19e6456eb09fedd369">f</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;value)</div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>  {</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = value;</div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span>  }</div>
<div class="line"><a id="l00675" name="l00675"></a><span class="lineno">  675</span> </div>
<div class="line"><a id="l00681" name="l00681"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a353d4448d3be51931e658b14bea01f2e">  681</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a353d4448d3be51931e658b14bea01f2e">f</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a> &amp;&amp;value)</div>
<div class="line"><a id="l00682" name="l00682"></a><span class="lineno">  682</span>  {</div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(value);</div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno">  684</span>  }</div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span> </div>
<div class="line"><a id="l00694" name="l00694"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a12b929c9339de8b90bfcdb64d4a43b9f">  694</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a12b929c9339de8b90bfcdb64d4a43b9f">f</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00695" name="l00695"></a><span class="lineno">  695</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_state_function,</div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span>  {</div>
<div class="line"><a id="l00698" name="l00698"></a><span class="lineno">  698</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a>{ value, values... });</div>
<div class="line"><a id="l00699" name="l00699"></a><span class="lineno">  699</span>  }</div>
<div class="line"><a id="l00700" name="l00700"></a><span class="lineno">  700</span> </div>
<div class="line"><a id="l00709" name="l00709"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a08b65bcb4971e1c62186a3ad74792b77">  709</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a08b65bcb4971e1c62186a3ad74792b77">f</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00710" name="l00710"></a><span class="lineno">  710</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_state_function,</div>
<div class="line"><a id="l00711" name="l00711"></a><span class="lineno">  711</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span>  {</div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.f = std::move(</div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">state_transition</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00715" name="l00715"></a><span class="lineno">  715</span>                          std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00716" name="l00716"></a><span class="lineno">  716</span>  }</div>
<div class="line"><a id="l00717" name="l00717"></a><span class="lineno">  717</span> </div>
<div class="line"><a id="l00732" name="l00732"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a0867cdc0eb2634c60f6ff580f8ced54c">  732</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a0867cdc0eb2634c60f6ff580f8ced54c">f</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00733" name="l00733"></a><span class="lineno">  733</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_state_function,</div>
<div class="line"><a id="l00734" name="l00734"></a><span class="lineno">  734</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00735" name="l00735"></a><span class="lineno">  735</span>  {</div>
<div class="line"><a id="l00736" name="l00736"></a><span class="lineno">  736</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_state_f = callable;</div>
<div class="line"><a id="l00737" name="l00737"></a><span class="lineno">  737</span>  }</div>
<div class="line"><a id="l00738" name="l00738"></a><span class="lineno">  738</span> </div>
<div class="line"><a id="l00753" name="l00753"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a04e79c76b38977011c643a2abdf822b9">  753</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a04e79c76b38977011c643a2abdf822b9">f</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00754" name="l00754"></a><span class="lineno">  754</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_state_function,</div>
<div class="line"><a id="l00755" name="l00755"></a><span class="lineno">  755</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00756" name="l00756"></a><span class="lineno">  756</span>  {</div>
<div class="line"><a id="l00757" name="l00757"></a><span class="lineno">  757</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_state_f = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00758" name="l00758"></a><span class="lineno">  758</span>  }</div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span> </div>
<div class="line"><a id="l00765" name="l00765"></a><span class="lineno">  765</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation transition matrix H is unexpectedly &quot;</span></div>
<div class="line"><a id="l00766" name="l00766"></a><span class="lineno">  766</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00767" name="l00767"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa1b7bdfd0003fada764bdff943d4b844">  767</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa1b7bdfd0003fada764bdff943d4b844">h</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a></div>
<div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span>  {</div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h;</div>
<div class="line"><a id="l00770" name="l00770"></a><span class="lineno">  770</span>  }</div>
<div class="line"><a id="l00771" name="l00771"></a><span class="lineno">  771</span> </div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ae4f7ba705650fe606d346969b4542461">  777</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ae4f7ba705650fe606d346969b4542461">h</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;value)</div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span>  {</div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = value;</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>  }</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span> </div>
<div class="line"><a id="l00787" name="l00787"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ae3890f39ad42f502ced221c523589fb5">  787</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ae3890f39ad42f502ced221c523589fb5">h</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a> &amp;&amp;value)</div>
<div class="line"><a id="l00788" name="l00788"></a><span class="lineno">  788</span>  {</div>
<div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = std::move(value);</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>  }</div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span> </div>
<div class="line"><a id="l00800" name="l00800"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aea1066ada451a1c7567532a9b1e5d4e7">  800</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aea1066ada451a1c7567532a9b1e5d4e7">h</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00801" name="l00801"></a><span class="lineno">  801</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::observation_state_function,</div>
<div class="line"><a id="l00802" name="l00802"></a><span class="lineno">  802</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00803" name="l00803"></a><span class="lineno">  803</span>  {</div>
<div class="line"><a id="l00804" name="l00804"></a><span class="lineno">  804</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a>{ value, values... });</div>
<div class="line"><a id="l00805" name="l00805"></a><span class="lineno">  805</span>  }</div>
<div class="line"><a id="l00806" name="l00806"></a><span class="lineno">  806</span> </div>
<div class="line"><a id="l00815" name="l00815"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a27858579a85494808867e330e494e00f">  815</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a27858579a85494808867e330e494e00f">h</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00816" name="l00816"></a><span class="lineno">  816</span>      !std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::observation_state_function,</div>
<div class="line"><a id="l00817" name="l00817"></a><span class="lineno">  817</span>                            std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00818" name="l00818"></a><span class="lineno">  818</span>  {</div>
<div class="line"><a id="l00819" name="l00819"></a><span class="lineno">  819</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.h =</div>
<div class="line"><a id="l00820" name="l00820"></a><span class="lineno">  820</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">output_model</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00821" name="l00821"></a><span class="lineno">  821</span>                                std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00822" name="l00822"></a><span class="lineno">  822</span>  }</div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span> </div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab61b4e18f7d84884be30714fc798abff">  838</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab61b4e18f7d84884be30714fc798abff">h</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::observation_state_function,</div>
<div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span>  {</div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation_state_h = callable;</div>
<div class="line"><a id="l00843" name="l00843"></a><span class="lineno">  843</span>  }</div>
<div class="line"><a id="l00844" name="l00844"></a><span class="lineno">  844</span> </div>
<div class="line"><a id="l00859" name="l00859"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa4759de1fd24b2ca223cde81d2c43113">  859</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa4759de1fd24b2ca223cde81d2c43113">h</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00860" name="l00860"></a><span class="lineno">  860</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::observation_state_function,</div>
<div class="line"><a id="l00861" name="l00861"></a><span class="lineno">  861</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00862" name="l00862"></a><span class="lineno">  862</span>  {</div>
<div class="line"><a id="l00863" name="l00863"></a><span class="lineno">  863</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation_state_h = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00864" name="l00864"></a><span class="lineno">  864</span>  }</div>
<div class="line"><a id="l00865" name="l00865"></a><span class="lineno">  865</span> </div>
<div class="line"><a id="l00871" name="l00871"></a><span class="lineno">  871</span>  [[nodiscard(<span class="stringliteral">&quot;The returned control transition matrix G is unexpectedly &quot;</span></div>
<div class="line"><a id="l00872" name="l00872"></a><span class="lineno">  872</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00873" name="l00873"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a4ccf0444effc0efdb6a02faad4de1fe0">  873</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4ccf0444effc0efdb6a02faad4de1fe0">g</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> requires(!std::is_void_v&lt;Input&gt;)</div>
<div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>  {</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g;</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span>  }</div>
<div class="line"><a id="l00877" name="l00877"></a><span class="lineno">  877</span> </div>
<div class="line"><a id="l00883" name="l00883"></a><span class="lineno">  883</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00884" name="l00884"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a6b7c42d47c6e6b10ee87f95dae55938a">  884</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a6b7c42d47c6e6b10ee87f95dae55938a">g</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;value) <span class="keyword">requires</span>(!std::is_void_v&lt;Input&gt;)</div>
<div class="line"><a id="l00885" name="l00885"></a><span class="lineno">  885</span>  {</div>
<div class="line"><a id="l00886" name="l00886"></a><span class="lineno">  886</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = value;</div>
<div class="line"><a id="l00887" name="l00887"></a><span class="lineno">  887</span>  }</div>
<div class="line"><a id="l00888" name="l00888"></a><span class="lineno">  888</span> </div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00895" name="l00895"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a3b631221722395f29747319009db3382">  895</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3b631221722395f29747319009db3382">g</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a> &amp;&amp;value) <span class="keyword">requires</span>(!std::is_void_v&lt;Input&gt;)</div>
<div class="line"><a id="l00896" name="l00896"></a><span class="lineno">  896</span>  {</div>
<div class="line"><a id="l00897" name="l00897"></a><span class="lineno">  897</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = std::move(value);</div>
<div class="line"><a id="l00898" name="l00898"></a><span class="lineno">  898</span>  }</div>
<div class="line"><a id="l00899" name="l00899"></a><span class="lineno">  899</span> </div>
<div class="line"><a id="l00908" name="l00908"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#abc9ec0d08ebec82c6df110fd4ce7e2d5">  908</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#abc9ec0d08ebec82c6df110fd4ce7e2d5">g</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00909" name="l00909"></a><span class="lineno">  909</span>      !std::is_void_v&lt;Input&gt; &amp;&amp;</div>
<div class="line"><a id="l00910" name="l00910"></a><span class="lineno">  910</span>      !std::is_assignable_v&lt;</div>
<div class="line"><a id="l00911" name="l00911"></a><span class="lineno">  911</span>          <span class="keyword">typename</span> implementation::transition_control_function,</div>
<div class="line"><a id="l00912" name="l00912"></a><span class="lineno">  912</span>          std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00913" name="l00913"></a><span class="lineno">  913</span>  {</div>
<div class="line"><a id="l00914" name="l00914"></a><span class="lineno">  914</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a>{ value, values... });</div>
<div class="line"><a id="l00915" name="l00915"></a><span class="lineno">  915</span>  }</div>
<div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span> </div>
<div class="line"><a id="l00925" name="l00925"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a8a936623a9d4815208d9dc60c5c7f98d">  925</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a8a936623a9d4815208d9dc60c5c7f98d">g</a>(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno">  926</span>      !std::is_void_v&lt;Input&gt; &amp;&amp;</div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno">  927</span>      !std::is_assignable_v&lt;</div>
<div class="line"><a id="l00928" name="l00928"></a><span class="lineno">  928</span>          <span class="keyword">typename</span> implementation::transition_control_function,</div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span>          std::decay_t&lt;<span class="keyword">decltype</span>(value)&gt;&gt;)</div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span>  {</div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno">  931</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.g =</div>
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno">  932</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">input_control</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span>                                 std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>  }</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span> </div>
<div class="line"><a id="l00945" name="l00945"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a6d1ee3a0c4a1743b705ad8586ed2105b">  945</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a6d1ee3a0c4a1743b705ad8586ed2105b">g</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00946" name="l00946"></a><span class="lineno">  946</span>      !std::is_void_v&lt;Input&gt; &amp;&amp;</div>
<div class="line"><a id="l00947" name="l00947"></a><span class="lineno">  947</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_control_function,</div>
<div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span>  {</div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_control_g = callable;</div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>  }</div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span> </div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a266b1610c9863f4c2fcdf77819955cbe">  962</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a266b1610c9863f4c2fcdf77819955cbe">g</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span>(</div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span>      !std::is_void_v&lt;Input&gt; &amp;&amp;</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span>      std::is_assignable_v&lt;<span class="keyword">typename</span> implementation::transition_control_function,</div>
<div class="line"><a id="l00965" name="l00965"></a><span class="lineno">  965</span>                           std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;&gt;)</div>
<div class="line"><a id="l00966" name="l00966"></a><span class="lineno">  966</span>  {</div>
<div class="line"><a id="l00967" name="l00967"></a><span class="lineno">  967</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition_control_g = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00968" name="l00968"></a><span class="lineno">  968</span>  }</div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span> </div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>  [[nodiscard(<span class="stringliteral">&quot;The returned gain matrix K is unexpectedly &quot;</span></div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9be5fe520d542131af481d239c5a924c">  977</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9be5fe520d542131af481d239c5a924c">k</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">gain</a></div>
<div class="line"><a id="l00978" name="l00978"></a><span class="lineno">  978</span>  {</div>
<div class="line"><a id="l00979" name="l00979"></a><span class="lineno">  979</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.k;</div>
<div class="line"><a id="l00980" name="l00980"></a><span class="lineno">  980</span>  }</div>
<div class="line"><a id="l00981" name="l00981"></a><span class="lineno">  981</span> </div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span>  [[nodiscard(<span class="stringliteral">&quot;The returned innovation column vector Y is unexpectedly &quot;</span></div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno">  988</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00989" name="l00989"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a111c882bc52c97a207789cc5db6aacf3">  989</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a111c882bc52c97a207789cc5db6aacf3">y</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">innovation</a></div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>  {</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.y;</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span>  }</div>
<div class="line"><a id="l00993" name="l00993"></a><span class="lineno">  993</span> </div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno">  999</span>  [[nodiscard(<span class="stringliteral">&quot;The returned innovation uncertainty matrix S is unexpectedly &quot;</span></div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01001" name="l01001"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a2ba7c68ea0f157085f5710f35797d499"> 1001</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2ba7c68ea0f157085f5710f35797d499">s</a>() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">innovation_uncertainty</a></div>
<div class="line"><a id="l01002" name="l01002"></a><span class="lineno"> 1002</span>  {</div>
<div class="line"><a id="l01003" name="l01003"></a><span class="lineno"> 1003</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.s;</div>
<div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span>  }</div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span> </div>
<div class="line"><a id="l01019" name="l01019"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a5157efe03fa59171da02dc6dcce0b2cd"> 1019</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a5157efe03fa59171da02dc6dcce0b2cd">transition</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable)</div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"> 1020</span>  {</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition = callable;</div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>  }</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span> </div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a193c41ece11420b7eb0573fe0428efa7"> 1037</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a193c41ece11420b7eb0573fe0428efa7">transition</a>(<span class="keyword">auto</span> &amp;&amp;callable)</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span>  {</div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.transition = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>  }</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span> </div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#afaabe5997ea40e19a88811ef477895d7"> 1055</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afaabe5997ea40e19a88811ef477895d7">observation</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable)</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span>  {</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation = callable;</div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>  }</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span> </div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aaf36b1b1209a66a74c86b27681eb28dc"> 1073</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aaf36b1b1209a66a74c86b27681eb28dc">observation</a>(<span class="keyword">auto</span> &amp;&amp;callable)</div>
<div class="line"><a id="l01074" name="l01074"></a><span class="lineno"> 1074</span>  {</div>
<div class="line"><a id="l01075" name="l01075"></a><span class="lineno"> 1075</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.observation = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01076" name="l01076"></a><span class="lineno"> 1076</span>  }</div>
<div class="line"><a id="l01077" name="l01077"></a><span class="lineno"> 1077</span> </div>
<div class="line"><a id="l01079" name="l01079"></a><span class="lineno"> 1079</span> </div>
<div class="line"><a id="l01082" name="l01082"></a><span class="lineno"> 1082</span> </div>
<div class="line"><a id="l01116" name="l01116"></a><span class="lineno"> 1116</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... InputTypes&gt;</div>
<div class="line"><a id="l01117" name="l01117"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aab1dba08047eb5eb08dfbc8095ea1861"> 1117</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aab1dba08047eb5eb08dfbc8095ea1861">operator()</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...arguments)</div>
<div class="line"><a id="l01118" name="l01118"></a><span class="lineno"> 1118</span>  {</div>
<div class="line"><a id="l01119" name="l01119"></a><span class="lineno"> 1119</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.template operator()&lt;InputTypes...&gt;(arguments...);</div>
<div class="line"><a id="l01120" name="l01120"></a><span class="lineno"> 1120</span>  }</div>
<div class="line"><a id="l01121" name="l01121"></a><span class="lineno"> 1121</span> </div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a71b11bb6c9a898533dfd86ce6eef5c20"> 1139</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a71b11bb6c9a898533dfd86ce6eef5c20">update</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...arguments)</div>
<div class="line"><a id="l01140" name="l01140"></a><span class="lineno"> 1140</span>  {</div>
<div class="line"><a id="l01141" name="l01141"></a><span class="lineno"> 1141</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.update(arguments...);</div>
<div class="line"><a id="l01142" name="l01142"></a><span class="lineno"> 1142</span>  }</div>
<div class="line"><a id="l01143" name="l01143"></a><span class="lineno"> 1143</span> </div>
<div class="line"><a id="l01160" name="l01160"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a326b305473fba0a1efc17660c94eb199"> 1160</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a326b305473fba0a1efc17660c94eb199">predict</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...arguments)</div>
<div class="line"><a id="l01161" name="l01161"></a><span class="lineno"> 1161</span>  {</div>
<div class="line"><a id="l01162" name="l01162"></a><span class="lineno"> 1162</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>.predict(arguments...);</div>
<div class="line"><a id="l01163" name="l01163"></a><span class="lineno"> 1163</span>  }</div>
<div class="line"><a id="l01164" name="l01164"></a><span class="lineno"> 1164</span> </div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"> 1166</span> </div>
<div class="line"><a id="l01167" name="l01167"></a><span class="lineno"> 1167</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l01170" name="l01170"></a><span class="lineno"> 1170</span> </div>
<div class="line"><a id="l01172" name="l01172"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8"> 1172</a></span>  <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">implementation</a> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">filter</a>;</div>
<div class="line"><a id="l01173" name="l01173"></a><span class="lineno"> 1173</span> </div>
<div class="line"><a id="l01175" name="l01175"></a><span class="lineno"> 1175</span>};</div>
<div class="line"><a id="l01176" name="l01176"></a><span class="lineno"> 1176</span> </div>
<div class="line"><a id="l01177" name="l01177"></a><span class="lineno"> 1177</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l01178" name="l01178"></a><span class="lineno"> 1178</span> </div>
<div class="line"><a id="l01179" name="l01179"></a><span class="lineno"> 1179</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_KALMAN_HPP</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdoc">Kalman filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00162">kalman.hpp:163</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a04e79c76b38977011c643a2abdf822b9"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a04e79c76b38977011c643a2abdf822b9">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the state transition matrix F function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00753">kalman.hpp:753</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a04f87358de723f8ae31cd0098b54feeb"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a04f87358de723f8ae31cd0098b54feeb">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr void x(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00361">kalman.hpp:361</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a080eaccb34518fef7cc0c54df8f73256"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a080eaccb34518fef7cc0c54df8f73256">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr auto q() const -&gt; process_uncertainty</div><div class="ttdoc">Returns the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00460">kalman.hpp:460</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a0867cdc0eb2634c60f6ff580f8ced54c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a0867cdc0eb2634c60f6ff580f8ced54c">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(const auto &amp;callable)</div><div class="ttdoc">Sets the state transition matrix F function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00732">kalman.hpp:732</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a08b65bcb4971e1c62186a3ad74792b77"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a08b65bcb4971e1c62186a3ad74792b77">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00709">kalman.hpp:709</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a0a36196d86b79b19e6456eb09fedd369"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a0a36196d86b79b19e6456eb09fedd369">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(const state_transition &amp;value)</div><div class="ttdoc">Sets the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00671">kalman.hpp:671</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a0c655b621eaaea59e65cce6abe12dbd7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a0c655b621eaaea59e65cce6abe12dbd7">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr void x(state &amp;&amp;value)</div><div class="ttdoc">Sets the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00335">kalman.hpp:335</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1102f87212b368e4e55bcd5d637a600c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1102f87212b368e4e55bcd5d637a600c">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00184">kalman.hpp:184</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a111c882bc52c97a207789cc5db6aacf3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a111c882bc52c97a207789cc5db6aacf3">fcarouge::kalman::y</a></div><div class="ttdeci">constexpr auto y() const -&gt; innovation</div><div class="ttdoc">Returns the innovation column vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00989">kalman.hpp:989</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a12b929c9339de8b90bfcdb64d4a43b9f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a12b929c9339de8b90bfcdb64d4a43b9f">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00694">kalman.hpp:694</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a15928894f06259752d02d9ee26b2e47e"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a15928894f06259752d02d9ee26b2e47e">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00199">kalman.hpp:199</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1642332d5ad9d1e135bbe5220961de64"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1642332d5ad9d1e135bbe5220961de64">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00215">kalman.hpp:215</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a193c41ece11420b7eb0573fe0428efa7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a193c41ece11420b7eb0573fe0428efa7">fcarouge::kalman::transition</a></div><div class="ttdeci">constexpr void transition(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the extended state transition function f(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01037">kalman.hpp:1037</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a222414fb9c93edb378a0156aa278a811"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a222414fb9c93edb378a0156aa278a811">fcarouge::kalman::innovation</a></div><div class="ttdeci">typename implementation::innovation innovation</div><div class="ttdoc">Type of the innovation column vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00228">kalman.hpp:228</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a232d3cdfe6af3eed0cfe3bbfc1a6a51b"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a232d3cdfe6af3eed0cfe3bbfc1a6a51b">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr void x(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00348">kalman.hpp:348</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a266b1610c9863f4c2fcdf77819955cbe"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a266b1610c9863f4c2fcdf77819955cbe">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the control transition matrix G function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00962">kalman.hpp:962</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a27858579a85494808867e330e494e00f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a27858579a85494808867e330e494e00f">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the observation, measurement transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00815">kalman.hpp:815</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a2817f91f637370aea02b56fbf076fa01"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a2817f91f637370aea02b56fbf076fa01">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(const output_uncertainty &amp;value)</div><div class="ttdoc">Sets the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00573">kalman.hpp:573</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a2ba7c68ea0f157085f5710f35797d499"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a2ba7c68ea0f157085f5710f35797d499">fcarouge::kalman::s</a></div><div class="ttdeci">constexpr auto s() const -&gt; innovation_uncertainty</div><div class="ttdoc">Returns the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01001">kalman.hpp:1001</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a2ff65c799a4c81478238546c6c1346c5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a2ff65c799a4c81478238546c6c1346c5">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00510">kalman.hpp:510</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a313170cbaab37277331127b200168da2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a313170cbaab37277331127b200168da2">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr auto r() const -&gt; output_uncertainty</div><div class="ttdoc">Returns the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00563">kalman.hpp:563</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a326b305473fba0a1efc17660c94eb199"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a326b305473fba0a1efc17660c94eb199">fcarouge::kalman::predict</a></div><div class="ttdeci">constexpr void predict(const auto &amp;...arguments)</div><div class="ttdoc">Produces estimates of the state variables and uncertainties.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01160">kalman.hpp:1160</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a33f0875f7b0284b9350529018e6a27af"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a33f0875f7b0284b9350529018e6a27af">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(const auto &amp;callable)</div><div class="ttdoc">Sets the process noise covariance matrix Q function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00530">kalman.hpp:530</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a353d4448d3be51931e658b14bea01f2e"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a353d4448d3be51931e658b14bea01f2e">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr void f(state_transition &amp;&amp;value)</div><div class="ttdoc">Sets the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00681">kalman.hpp:681</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a3b631221722395f29747319009db3382"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a3b631221722395f29747319009db3382">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(input_control &amp;&amp;value)</div><div class="ttdoc">Sets the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00895">kalman.hpp:895</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a3e5dbe4814f6b42a296c23498010d37f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a3e5dbe4814f6b42a296c23498010d37f">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(process_uncertainty &amp;&amp;value)</div><div class="ttdoc">Sets the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00480">kalman.hpp:480</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4ae5a09664832ca35039c426a4a15cc6"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4ae5a09664832ca35039c426a4a15cc6">fcarouge::kalman::operator=</a></div><div class="ttdeci">constexpr auto operator=(const kalman &amp;other) -&gt; kalman &amp;=default</div><div class="ttdoc">Copy assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4b285cd67a50650112fc13f7caccee07"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4b285cd67a50650112fc13f7caccee07">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr void p(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00446">kalman.hpp:446</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4ccf0444effc0efdb6a02faad4de1fe0"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4ccf0444effc0efdb6a02faad4de1fe0">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr auto g() const -&gt; input_control requires(!std::is_void_v&lt; Input &gt;)</div><div class="ttdoc">Returns the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00873">kalman.hpp:873</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a505fa36129d8a58602a716fd7f16ee5f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a505fa36129d8a58602a716fd7f16ee5f">fcarouge::kalman::u</a></div><div class="ttdeci">constexpr auto u() const -&gt; input requires(!std::is_void_v&lt; Input &gt;)</div><div class="ttdoc">Returns the last control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00388">kalman.hpp:388</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a5157efe03fa59171da02dc6dcce0b2cd"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a5157efe03fa59171da02dc6dcce0b2cd">fcarouge::kalman::transition</a></div><div class="ttdeci">constexpr void transition(const auto &amp;callable)</div><div class="ttdoc">Sets the extended state transition function f(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01019">kalman.hpp:1019</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a527f0da68c4138bad2438b63fb1f58d5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a527f0da68c4138bad2438b63fb1f58d5">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00596">kalman.hpp:596</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a59a9e100ebc62a6d4db11a7e65a06b12"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a59a9e100ebc62a6d4db11a7e65a06b12">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman()=default</div><div class="ttdoc">Constructs a Kalman filter without configuration.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a59c62d02fbc8be939e05a135b0cec3b8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a59c62d02fbc8be939e05a135b0cec3b8">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00222">kalman.hpp:222</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a642727d695ea4a1fee490ff7dd6ad7f8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a642727d695ea4a1fee490ff7dd6ad7f8">fcarouge::kalman::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01172">kalman.hpp:1172</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a6b7c42d47c6e6b10ee87f95dae55938a"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a6b7c42d47c6e6b10ee87f95dae55938a">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(const input_control &amp;value)</div><div class="ttdoc">Sets the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00884">kalman.hpp:884</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a6bb341c2ac1843c8027c02d480f37891"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a6bb341c2ac1843c8027c02d480f37891">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the process noise covariance matrix Q function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00546">kalman.hpp:546</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a6d1ee3a0c4a1743b705ad8586ed2105b"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a6d1ee3a0c4a1743b705ad8586ed2105b">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(const auto &amp;callable)</div><div class="ttdoc">Sets the control transition matrix G function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00945">kalman.hpp:945</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a71b11bb6c9a898533dfd86ce6eef5c20"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a71b11bb6c9a898533dfd86ce6eef5c20">fcarouge::kalman::update</a></div><div class="ttdeci">constexpr void update(const auto &amp;...arguments)</div><div class="ttdoc">Updates the estimates with the outcome of a measurement.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01139">kalman.hpp:1139</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a7c7a9c929365a87872d95b62a4d159c5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a7c7a9c929365a87872d95b62a4d159c5">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr void p(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00433">kalman.hpp:433</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a7da73fc2bef3808cb47836bf9e8208e5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a7da73fc2bef3808cb47836bf9e8208e5">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr auto x() const -&gt; state</div><div class="ttdoc">Returns the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00315">kalman.hpp:315</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a7f45fec5e2a499c7874350f27ff16959"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a7f45fec5e2a499c7874350f27ff16959">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr void x(const state &amp;value)</div><div class="ttdoc">Sets the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00325">kalman.hpp:325</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a7fd585072f9799aa546943934e1a38e1"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a7fd585072f9799aa546943934e1a38e1">fcarouge::kalman::output</a></div><div class="ttdeci">typename implementation::output output</div><div class="ttdoc">Type of the observation column vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00189">kalman.hpp:189</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a83e4f8a0a73353e11ddebbd1b8d1d82f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a83e4f8a0a73353e11ddebbd1b8d1d82f">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(const process_uncertainty &amp;value)</div><div class="ttdoc">Sets the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00470">kalman.hpp:470</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a868e7283042616c9fd32ea86745c3ec4"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a868e7283042616c9fd32ea86745c3ec4">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr auto p() const -&gt; estimate_uncertainty</div><div class="ttdoc">Returns the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00400">kalman.hpp:400</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a8a936623a9d4815208d9dc60c5c7f98d"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a8a936623a9d4815208d9dc60c5c7f98d">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00925">kalman.hpp:925</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9085a5ff6f7f9a868f177afb6859ccab"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9085a5ff6f7f9a868f177afb6859ccab">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(const auto &amp;callable)</div><div class="ttdoc">Sets the observation noise covariance matrix R function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00631">kalman.hpp:631</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a922687019e99df6169eb09ddaa396bd7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a922687019e99df6169eb09ddaa396bd7">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr void p(const estimate_uncertainty &amp;value)</div><div class="ttdoc">Sets the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00410">kalman.hpp:410</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a95e201e1563f135b128edbf2c9793e56"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a95e201e1563f135b128edbf2c9793e56">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00202">kalman.hpp:202</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a97c4057f94bf097d2075c2b019a1a9e5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a97c4057f94bf097d2075c2b019a1a9e5">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman(kalman &amp;&amp;other) noexcept=default</div><div class="ttdoc">Move constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9be5fe520d542131af481d239c5a924c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9be5fe520d542131af481d239c5a924c">fcarouge::kalman::k</a></div><div class="ttdeci">constexpr auto k() const -&gt; gain</div><div class="ttdoc">Returns the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00977">kalman.hpp:977</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9f9048640ddd90cd1169f739ed787aa8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9f9048640ddd90cd1169f739ed787aa8">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr auto f() const -&gt; state_transition</div><div class="ttdoc">Returns the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00661">kalman.hpp:661</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9fac97289314ad4018774b6afbd73716"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9fac97289314ad4018774b6afbd73716">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00205">kalman.hpp:205</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa0619da7600a0124f811314fd2021815"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa0619da7600a0124f811314fd2021815">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(output_uncertainty &amp;&amp;value)</div><div class="ttdoc">Sets the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00583">kalman.hpp:583</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa1b7bdfd0003fada764bdff943d4b844"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa1b7bdfd0003fada764bdff943d4b844">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr auto h() const -&gt; output_model</div><div class="ttdoc">Returns the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00767">kalman.hpp:767</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa2f0430be3a57809a6bdca479c341954"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa2f0430be3a57809a6bdca479c341954">fcarouge::kalman::operator=</a></div><div class="ttdeci">constexpr auto operator=(kalman &amp;&amp;other) noexcept -&gt; kalman &amp;=default</div><div class="ttdoc">Move assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa3064ce3ec5d541ddb849a7b530b5124"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa3064ce3ec5d541ddb849a7b530b5124">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman(const kalman &amp;other)=default</div><div class="ttdoc">Copy constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa4759de1fd24b2ca223cde81d2c43113"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa4759de1fd24b2ca223cde81d2c43113">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation, measurement transition matrix H function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00859">kalman.hpp:859</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aab1dba08047eb5eb08dfbc8095ea1861"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aab1dba08047eb5eb08dfbc8095ea1861">fcarouge::kalman::operator()</a></div><div class="ttdeci">constexpr void operator()(const auto &amp;...arguments)</div><div class="ttdoc">Runs a step of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01117">kalman.hpp:1117</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aaf36b1b1209a66a74c86b27681eb28dc"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aaf36b1b1209a66a74c86b27681eb28dc">fcarouge::kalman::observation</a></div><div class="ttdeci">constexpr void observation(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the extended state observation function h(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01073">kalman.hpp:1073</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab36b602d354fad0d0d0aa93abcdd9f01"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab36b602d354fad0d0d0aa93abcdd9f01">fcarouge::kalman::implementation</a></div><div class="ttdeci">internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, internal::repack_t&lt; UpdateTypes &gt;, internal::repack_t&lt; PredictionTypes &gt; &gt; implementation</div><div class="ttdoc">Implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00172">kalman.hpp:175</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab485e684ce0723c3d6de5dec389c88a6"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab485e684ce0723c3d6de5dec389c88a6">fcarouge::kalman::innovation_uncertainty</a></div><div class="ttdeci">typename implementation::innovation_uncertainty innovation_uncertainty</div><div class="ttdoc">Type of the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00231">kalman.hpp:232</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab61b4e18f7d84884be30714fc798abff"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab61b4e18f7d84884be30714fc798abff">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(const auto &amp;callable)</div><div class="ttdoc">Sets the observation, measurement transition matrix H function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00838">kalman.hpp:838</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab763d09902667e195848fa899e310beb"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab763d09902667e195848fa899e310beb">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00210">kalman.hpp:210</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab7ad017f47c9bdea9dc4410caac3f516"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab7ad017f47c9bdea9dc4410caac3f516">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation noise covariance matrix R function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00647">kalman.hpp:647</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_abaa0de7e5f1ad089a9d7842add690431"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#abaa0de7e5f1ad089a9d7842add690431">fcarouge::kalman::z</a></div><div class="ttdeci">constexpr auto z() const -&gt; output</div><div class="ttdoc">Returns the last observation column vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00374">kalman.hpp:374</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_abc9ec0d08ebec82c6df110fd4ce7e2d5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#abc9ec0d08ebec82c6df110fd4ce7e2d5">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr void g(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00908">kalman.hpp:908</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ac5cb329547421eabc8bb91f2c16329b7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ac5cb329547421eabc8bb91f2c16329b7">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr void p(estimate_uncertainty &amp;&amp;value)</div><div class="ttdoc">Sets the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00420">kalman.hpp:420</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aca54b5a1f438d4c6299ac36035450d3c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aca54b5a1f438d4c6299ac36035450d3c">fcarouge::kalman::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00194">kalman.hpp:194</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ad1eeee2aae7756cb1a24350ff802de2a"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ad1eeee2aae7756cb1a24350ff802de2a">fcarouge::kalman::gain</a></div><div class="ttdeci">typename implementation::gain gain</div><div class="ttdoc">Type of the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00225">kalman.hpp:225</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae3890f39ad42f502ced221c523589fb5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae3890f39ad42f502ced221c523589fb5">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(output_model &amp;&amp;value)</div><div class="ttdoc">Sets the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00787">kalman.hpp:787</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae4f7ba705650fe606d346969b4542461"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae4f7ba705650fe606d346969b4542461">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(const output_model &amp;value)</div><div class="ttdoc">Sets the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00777">kalman.hpp:777</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aea1066ada451a1c7567532a9b1e5d4e7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aea1066ada451a1c7567532a9b1e5d4e7">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr void h(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the observation, measurement transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00800">kalman.hpp:800</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aefcc6608c7aa96cd7ea0ab658fd5da54"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aefcc6608c7aa96cd7ea0ab658fd5da54">fcarouge::kalman::~kalman</a></div><div class="ttdeci">constexpr ~kalman()=default</div><div class="ttdoc">Destructs the kalman filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af613ee5f0bf4d914c3b551c1f0c56243"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af613ee5f0bf4d914c3b551c1f0c56243">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr void q(const auto &amp;value, const auto &amp;...values)</div><div class="ttdoc">Sets the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00493">kalman.hpp:493</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af6500c205da750d018f4f8f05dba3a17"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af6500c205da750d018f4f8f05dba3a17">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr void r(auto &amp;&amp;value, auto &amp;&amp;...values)</div><div class="ttdoc">Sets the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00611">kalman.hpp:611</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_afaabe5997ea40e19a88811ef477895d7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#afaabe5997ea40e19a88811ef477895d7">fcarouge::kalman::observation</a></div><div class="ttdeci">constexpr void observation(const auto &amp;callable)</div><div class="ttdoc">Sets the extended state observation function h(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01055">kalman.hpp:1055</a></div></div>
<div class="ttc" id="aformat_8hpp_xhtml"><div class="ttname"><a href="format_8hpp.xhtml">format.hpp</a></div></div>
<div class="ttc" id="ainternal_2kalman_8hpp_xhtml"><div class="ttname"><a href="internal_2kalman_8hpp.xhtml">kalman.hpp</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_1_1internal_xhtml_a7cf7faca778eb747dab6c1d5c044290b"><div class="ttname"><a href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a7cf7faca778eb747dab6c1d5c044290b">fcarouge::eigen::internal::kalman</a></div><div class="ttdeci">fcarouge::kalman&lt; std::conditional_t&lt; State==1, Type, Eigen::Vector&lt; Type, State &gt; &gt;, std::conditional_t&lt; Output==1, Type, Eigen::Vector&lt; Type, Output &gt; &gt;, std::conditional_t&lt; Input==0, void, std::conditional_t&lt; Input==1, Type, Eigen::Vector&lt; Type, Input &gt; &gt; &gt;, transpose, symmetrize, divide, identity_matrix, UpdateTypes, PredictionTypes &gt; kalman</div><div class="ttdef"><b>Definition:</b> <a href="eigen_8hpp_source.xhtml#l00257">eigen.hpp:264</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_ab99c4b80cb5488c202a697e056134bae"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#ab99c4b80cb5488c202a697e056134bae">fcarouge::eigen::identity_matrix</a></div><div class="ttdeci">internal::identity_matrix identity_matrix</div><div class="ttdoc">Function object for providing an Eigen identity matrix.</div><div class="ttdef"><b>Definition:</b> <a href="kalman__eigen_8hpp_source.xhtml#l00062">kalman_eigen.hpp:62</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1internal_xhtml_a0d6c05cd68e6807d952e8c7344d5df5a"><div class="ttname"><a href="namespacefcarouge_1_1internal.xhtml#a0d6c05cd68e6807d952e8c7344d5df5a">fcarouge::internal::empty_pack_t</a></div><div class="ttdeci">pack&lt;&gt; empty_pack_t</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00051">kalman.hpp:51</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1internal_xhtml_a567d18fbfbf6f8d1543bca57ba706f22"><div class="ttname"><a href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">fcarouge::internal::repack_t</a></div><div class="ttdeci">typename repack&lt; From &gt;::type repack_t</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00062">kalman.hpp:62</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition:</b> <a href="benchmark__full_8cpp_source.xhtml#l00046">benchmark_full.cpp:47</a></div></div>
<div class="ttc" id="astructfcarouge_1_1identity__matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1identity__matrix.xhtml">fcarouge::identity_matrix</a></div><div class="ttdoc">Function object for providing an identity matrix.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00062">kalman.hpp:62</a></div></div>
<div class="ttc" id="astructfcarouge_1_1identity__matrix_xhtml_a3bc3899543cf8c8e0b11afc1412cf087"><div class="ttname"><a href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">fcarouge::identity_matrix::operator()</a></div><div class="ttdeci">constexpr auto operator()() const noexcept</div><div class="ttdoc">Returns 1, the 1-by-1 identity matrix equivalent.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00069">kalman.hpp:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="kalman_8hpp.xhtml">kalman.hpp</a></li>
    <li class="footer">Generated on Sat Aug 6 2022 02:50:20 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
