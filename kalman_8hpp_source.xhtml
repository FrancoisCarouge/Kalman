<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: include/fcarouge/kalman.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kalman_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kalman.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kalman_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*_  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment"> | |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment"> | &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"> |  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment"> | . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"> |_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter for C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &quot;<a class="code" href="format_8hpp.xhtml">internal/format.hpp</a>&quot;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &quot;<a class="code" href="internal_2kalman_8hpp.xhtml">internal/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>{</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="structfcarouge_1_1identity__matrix.xhtml">   63</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1identity__matrix.xhtml">identity_matrix</a> {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">   70</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">operator()</a>() const noexcept</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  {</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    <span class="keywordflow">return</span> Type{ 1 };</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  }</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>};</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="keyword">template</span> &lt;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keyword">typename</span> Type = double, <span class="keyword">typename</span> State = Type, <span class="keyword">typename</span> Output = State,</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="keyword">typename</span> Input = State, <span class="keyword">typename</span> Transpose = std::identity,</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    <span class="keyword">typename</span> Symmetrize = std::identity, <span class="keyword">typename</span> Divide = std::divides&lt;void&gt;,</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    <span class="keyword">typename</span> Identity = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#ab99c4b80cb5488c202a697e056134bae">identity_matrix</a>,</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="keyword">typename</span> UpdateArguments = std::tuple&lt;&gt;,</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keyword">typename</span> PredictionArguments = std::tuple&lt;&gt;&gt;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml">   83</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>{</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>};</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml">  169</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide,</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>             Identity, std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>             std::tuple&lt;PredictionArguments...&gt;&gt;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>{</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">  178</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a> =</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a41a6a60c1495641760e4ac1dfffca2b8">internal::kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide,</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>                       Identity, std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>                       std::tuple&lt;PredictionArguments...&gt;&gt;;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="keyword">public</span>:</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">  190</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">value_type</a> = Type;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">  193</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> = <span class="keyword">typename</span> implementation::state;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">  198</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> = <span class="keyword">typename</span> implementation::output;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">  201</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> = <span class="keyword">typename</span> implementation::input;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">  206</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> = <span class="keyword">typename</span> implementation::estimate_uncertainty;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">  209</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> = <span class="keyword">typename</span> implementation::process_uncertainty;</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">  212</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> = <span class="keyword">typename</span> implementation::output_uncertainty;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">  217</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> = <span class="keyword">typename</span> implementation::state_transition;</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">  222</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> = <span class="keyword">typename</span> implementation::output_model;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">  227</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> = <span class="keyword">typename</span> implementation::input_control;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">  230</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a> = <span class="keyword">typename</span> implementation::gain;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">  233</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a> = <span class="keyword">typename</span> implementation::innovation;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">  236</a></span>  <span class="keyword">using</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a> =</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>      <span class="keyword">typename</span> implementation::innovation_uncertainty;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">  247</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">  258</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">kalman</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span> </div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">  270</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">kalman</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span> = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">  284</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">  300</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">operator=</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>      -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">  306</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">~kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span> </div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state estimate vector X is unexpectedly &quot;</span></div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  x() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>;</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  inline constexpr <span class="keywordtype">void</span> x(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;value);</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  inline constexpr <span class="keywordtype">void</span> x(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;value);</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span> </div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  inline constexpr <span class="keywordtype">void</span> x(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>  inline constexpr <span class="keywordtype">void</span> x(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  [[nodiscard(&quot;The returned observation vector Z is unexpectedly &quot;</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  z() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>;</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span> </div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  [[nodiscard(&quot;The returned control vector U is unexpectedly &quot;</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  u() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a>;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span> </div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  [[nodiscard(&quot;The returned estimated covariance matrix P is unexpectedly &quot;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>  p() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>;</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  inline constexpr <span class="keywordtype">void</span> p(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;value);</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  inline constexpr <span class="keywordtype">void</span> p(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;value);</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span> </div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>  inline constexpr <span class="keywordtype">void</span> p(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>  inline constexpr <span class="keywordtype">void</span> p(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span> </div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>  [[nodiscard(&quot;The returned process noise covariance matrix Q is unexpectedly &quot;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>  q() const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>;</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>  inline constexpr <span class="keywordtype">void</span> q(const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;value);</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>  inline constexpr <span class="keywordtype">void</span> q(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;value);</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span> </div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  inline constexpr <span class="keywordtype">void</span> q(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  inline constexpr <span class="keywordtype">void</span> q(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span> </div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac348954166df8e25dc64d67a03caca79">  471</a></span>  inline constexpr <span class="keywordtype">void</span> q(const auto &amp;callable) requires std::is_invocable_r_v &lt;</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>,</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>  {</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>    filter.noise_process_q = callable;</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>  }</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span> </div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">  489</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">q</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>,</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>  {</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span>    filter.noise_process_q = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  }</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span> </div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation noise covariance matrix R is &quot;</span></div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>              <span class="stringliteral">&quot;unexpectedly discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>  r() const -&gt; output_uncertainty;</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span> </div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>  inline constexpr <span class="keywordtype">void</span> r(const output_uncertainty &amp;value);</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span> </div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>  inline constexpr <span class="keywordtype">void</span> r(output_uncertainty &amp;&amp;value);</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span> </div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>  inline constexpr <span class="keywordtype">void</span> r(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span> </div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>  inline constexpr <span class="keywordtype">void</span> r(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span> </div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#affa201c6a10caab1e37fa12e10b67c55">  553</a></span>  inline constexpr <span class="keywordtype">void</span> r(const auto &amp;callable) requires std::is_invocable_r_v &lt;</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>,</div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> &amp;, const UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>  {</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>    filter.noise_observation_r = callable;</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>  }</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span> </div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">  571</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">r</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>,</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>  {</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>    filter.noise_observation_r = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>  }</div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span> </div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span>  [[nodiscard(<span class="stringliteral">&quot;The returned state transition matrix F is unexpectedly &quot;</span></div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>  f() const -&gt; state_transition;</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span> </div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>  inline constexpr <span class="keywordtype">void</span> f(const state_transition &amp;value);</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span> </div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span>  inline constexpr <span class="keywordtype">void</span> f(state_transition &amp;&amp;value);</div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span> </div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span>  inline constexpr <span class="keywordtype">void</span> f(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span> </div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span>  inline constexpr <span class="keywordtype">void</span> f(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span> </div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1af5e54e44eb78f85c0115037fcda139">  636</a></span>      f(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>,</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00638" name="l00638"></a><span class="lineno">  638</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;..., const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> &amp; &gt;</div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span>  {</div>
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span>    filter.transition_state_f = callable;</div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span>  }</div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span> </div>
<div class="line"><a id="l00657" name="l00657"></a><span class="lineno">  657</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00658" name="l00658"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5bf539f6dbb7e4e69917e5f813178248">  658</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5bf539f6dbb7e4e69917e5f813178248">f</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>,</div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;..., <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> &amp; &gt;</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span>  {</div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span>    filter.transition_state_f = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span>  }</div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span> </div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span>  [[nodiscard(<span class="stringliteral">&quot;The returned observation transition matrix H is unexpectedly &quot;</span></div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>  h() const -&gt; output_model;</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span> </div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span>  inline constexpr <span class="keywordtype">void</span> h(const output_model &amp;value);</div>
<div class="line"><a id="l00680" name="l00680"></a><span class="lineno">  680</span> </div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span>  inline constexpr <span class="keywordtype">void</span> h(output_model &amp;&amp;value);</div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span> </div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>  inline constexpr <span class="keywordtype">void</span> h(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span> </div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>  inline constexpr <span class="keywordtype">void</span> h(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span> </div>
<div class="line"><a id="l00724" name="l00724"></a><span class="lineno">  724</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00725" name="l00725"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a017a8b3600a2b964c13a098bd1138789">  725</a></span>      h(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>,</div>
<div class="line"><a id="l00726" name="l00726"></a><span class="lineno">  726</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00727" name="l00727"></a><span class="lineno">  727</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00728" name="l00728"></a><span class="lineno">  728</span>  {</div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>    filter.observation_state_h = callable;</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span>  }</div>
<div class="line"><a id="l00731" name="l00731"></a><span class="lineno">  731</span> </div>
<div class="line"><a id="l00746" name="l00746"></a><span class="lineno">  746</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00747" name="l00747"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">  747</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">h</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>,</div>
<div class="line"><a id="l00748" name="l00748"></a><span class="lineno">  748</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00749" name="l00749"></a><span class="lineno">  749</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00750" name="l00750"></a><span class="lineno">  750</span>  {</div>
<div class="line"><a id="l00751" name="l00751"></a><span class="lineno">  751</span>    filter.observation_state_h = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00752" name="l00752"></a><span class="lineno">  752</span>  }</div>
<div class="line"><a id="l00753" name="l00753"></a><span class="lineno">  753</span> </div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span>  [[nodiscard(<span class="stringliteral">&quot;The returned control transition matrix G is unexpectedly &quot;</span></div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno">  761</span>  g() const -&gt; input_control;</div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span> </div>
<div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span>  inline constexpr <span class="keywordtype">void</span> g(const input_control &amp;value);</div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span> </div>
<div class="line"><a id="l00775" name="l00775"></a><span class="lineno">  775</span>  inline constexpr <span class="keywordtype">void</span> g(input_control &amp;&amp;value);</div>
<div class="line"><a id="l00776" name="l00776"></a><span class="lineno">  776</span> </div>
<div class="line"><a id="l00785" name="l00785"></a><span class="lineno">  785</span>  inline constexpr <span class="keywordtype">void</span> g(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00786" name="l00786"></a><span class="lineno">  786</span> </div>
<div class="line"><a id="l00795" name="l00795"></a><span class="lineno">  795</span>  inline constexpr <span class="keywordtype">void</span> g(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00796" name="l00796"></a><span class="lineno">  796</span> </div>
<div class="line"><a id="l00806" name="l00806"></a><span class="lineno">  806</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00807" name="l00807"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae3b08856c83a2b5a020ffb7bbbc08108">  807</a></span>      g(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>,</div>
<div class="line"><a id="l00808" name="l00808"></a><span class="lineno">  808</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>  const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span>  {</div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span>    filter.transition_control_g = callable;</div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>  }</div>
<div class="line"><a id="l00813" name="l00813"></a><span class="lineno">  813</span> </div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00824" name="l00824"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">  824</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">g</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>,</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span>  <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00827" name="l00827"></a><span class="lineno">  827</span>  {</div>
<div class="line"><a id="l00828" name="l00828"></a><span class="lineno">  828</span>    filter.transition_control_g = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00829" name="l00829"></a><span class="lineno">  829</span>  }</div>
<div class="line"><a id="l00830" name="l00830"></a><span class="lineno">  830</span> </div>
<div class="line"><a id="l00836" name="l00836"></a><span class="lineno">  836</span>  [[nodiscard(<span class="stringliteral">&quot;The returned gain matrix K is unexpectedly &quot;</span></div>
<div class="line"><a id="l00837" name="l00837"></a><span class="lineno">  837</span>              <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno">  838</span>  k() const -&gt; gain;</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span> </div>
<div class="line"><a id="l00845" name="l00845"></a><span class="lineno">  845</span>  [[nodiscard(&quot;The returned innovation vector Y is unexpectedly &quot;</div>
<div class="line"><a id="l00846" name="l00846"></a><span class="lineno">  846</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00847" name="l00847"></a><span class="lineno">  847</span>  y() const -&gt; innovation;</div>
<div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span> </div>
<div class="line"><a id="l00854" name="l00854"></a><span class="lineno">  854</span>  [[nodiscard(&quot;The returned innovation uncertainty matrix S is unexpectedly &quot;</div>
<div class="line"><a id="l00855" name="l00855"></a><span class="lineno">  855</span>              &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00856" name="l00856"></a><span class="lineno">  856</span>  s() const -&gt; innovation_uncertainty;</div>
<div class="line"><a id="l00857" name="l00857"></a><span class="lineno">  857</span> </div>
<div class="line"><a id="l00869" name="l00869"></a><span class="lineno">  869</span>  inline constexpr <span class="keywordtype">void</span></div>
<div class="line"><a id="l00870" name="l00870"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7846683e1f74966f3c855d1b01ba9c51">  870</a></span>      transition(const auto &amp;callable) requires std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>,</div>
<div class="line"><a id="l00871" name="l00871"></a><span class="lineno">  871</span>      std::decay_t&lt;decltype(callable)&gt;,</div>
<div class="line"><a id="l00872" name="l00872"></a><span class="lineno">  872</span>  const <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, const PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00873" name="l00873"></a><span class="lineno">  873</span>  {</div>
<div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>    filter.transition = callable;</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>  }</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span> </div>
<div class="line"><a id="l00888" name="l00888"></a><span class="lineno">  888</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00889" name="l00889"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">  889</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">transition</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>,</div>
<div class="line"><a id="l00890" name="l00890"></a><span class="lineno">  890</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00891" name="l00891"></a><span class="lineno">  891</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> PredictionArguments &amp;... &gt;</div>
<div class="line"><a id="l00892" name="l00892"></a><span class="lineno">  892</span>  {</div>
<div class="line"><a id="l00893" name="l00893"></a><span class="lineno">  893</span>    filter.transition = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>  }</div>
<div class="line"><a id="l00895" name="l00895"></a><span class="lineno">  895</span> </div>
<div class="line"><a id="l00907" name="l00907"></a><span class="lineno">  907</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00908" name="l00908"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">  908</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">observation</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>,</div>
<div class="line"><a id="l00909" name="l00909"></a><span class="lineno">  909</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00910" name="l00910"></a><span class="lineno">  910</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00911" name="l00911"></a><span class="lineno">  911</span>  {</div>
<div class="line"><a id="l00912" name="l00912"></a><span class="lineno">  912</span>    filter.observation = callable;</div>
<div class="line"><a id="l00913" name="l00913"></a><span class="lineno">  913</span>  }</div>
<div class="line"><a id="l00914" name="l00914"></a><span class="lineno">  914</span> </div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno">  926</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">  927</a></span>      <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">observation</a>(<span class="keyword">auto</span> &amp;&amp;callable) <span class="keyword">requires</span> std::is_invocable_r_v &lt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a>,</div>
<div class="line"><a id="l00928" name="l00928"></a><span class="lineno">  928</span>      std::decay_t&lt;<span class="keyword">decltype</span>(callable)&gt;,</div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;, <span class="keyword">const</span> UpdateArguments &amp;... &gt;</div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span>  {</div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno">  931</span>    filter.observation = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno">  932</span>  }</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span> </div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span> </div>
<div class="line"><a id="l00938" name="l00938"></a><span class="lineno">  938</span> </div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>  <span class="comment">// fair matching rule.</span></div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span><span class="comment"></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00970" name="l00970"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4c611ea603ef3e6b8d77689257615d88">  970</a></span>  <a class="code hl_function" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4c611ea603ef3e6b8d77689257615d88">operator()</a>(<span class="keyword">const</span> PredictionArguments &amp;...prediction_arguments,</div>
<div class="line"><a id="l00971" name="l00971"></a><span class="lineno">  971</span>             <span class="keyword">const</span> UpdateArguments &amp;...update_arguments, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u,</div>
<div class="line"><a id="l00972" name="l00972"></a><span class="lineno">  972</span>             <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z)</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>  {</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span>    filter.update(update_arguments..., output_z...);</div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>    filter.predict(prediction_arguments..., input_u...);</div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>  }</div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno">  977</span> </div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> update(<span class="keyword">const</span> UpdateArguments &amp;...arguments,</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>                               <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z);</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span> </div>
<div class="line"><a id="l01007" name="l01007"></a><span class="lineno"> 1007</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments,</div>
<div class="line"><a id="l01008" name="l01008"></a><span class="lineno"> 1008</span>                                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u);</div>
<div class="line"><a id="l01009" name="l01009"></a><span class="lineno"> 1009</span> </div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"> 1011</span> </div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l01015" name="l01015"></a><span class="lineno"> 1015</span> </div>
<div class="line"><a id="l01017" name="l01017"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664"> 1017</a></span>  <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>;</div>
<div class="line"><a id="l01018" name="l01018"></a><span class="lineno"> 1018</span> </div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"> 1020</span>};</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span> </div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01025" name="l01025"></a><span class="lineno"> 1025</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01026" name="l01026"></a><span class="lineno"> 1026</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01027" name="l01027"></a><span class="lineno"> 1027</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01028" name="l01028"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad2c098ccf298ad413115e454e7246a76"> 1028</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::x()</div>
<div class="line"><a id="l01029" name="l01029"></a><span class="lineno"> 1029</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a></div>
<div class="line"><a id="l01030" name="l01030"></a><span class="lineno"> 1030</span>{</div>
<div class="line"><a id="l01031" name="l01031"></a><span class="lineno"> 1031</span>  <span class="keywordflow">return</span> filter.x;</div>
<div class="line"><a id="l01032" name="l01032"></a><span class="lineno"> 1032</span>}</div>
<div class="line"><a id="l01033" name="l01033"></a><span class="lineno"> 1033</span> </div>
<div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"> 1036</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"> 1037</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4d03c5f472f16df72a2ba8999cffca60"> 1041</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;value)</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span>{</div>
<div class="line"><a id="l01043" name="l01043"></a><span class="lineno"> 1043</span>  filter.x = value;</div>
<div class="line"><a id="l01044" name="l01044"></a><span class="lineno"> 1044</span>}</div>
<div class="line"><a id="l01045" name="l01045"></a><span class="lineno"> 1045</span> </div>
<div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"> 1048</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01049" name="l01049"></a><span class="lineno"> 1049</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01050" name="l01050"></a><span class="lineno"> 1050</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01051" name="l01051"></a><span class="lineno"> 1051</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01052" name="l01052"></a><span class="lineno"> 1052</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01053" name="l01053"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af3a1aaacd95a95705714ee6922992252"> 1053</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;value)</div>
<div class="line"><a id="l01054" name="l01054"></a><span class="lineno"> 1054</span>{</div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"> 1055</span>  filter.x = std::move(value);</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span>}</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span> </div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01061" name="l01061"></a><span class="lineno"> 1061</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01062" name="l01062"></a><span class="lineno"> 1062</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01063" name="l01063"></a><span class="lineno"> 1063</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01064" name="l01064"></a><span class="lineno"> 1064</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01065" name="l01065"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a00c7538ba91b0e915e55ea4b671fd47c"> 1065</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01066" name="l01066"></a><span class="lineno"> 1066</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01067" name="l01067"></a><span class="lineno"> 1067</span>{</div>
<div class="line"><a id="l01068" name="l01068"></a><span class="lineno"> 1068</span>  filter.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ value, values... });</div>
<div class="line"><a id="l01069" name="l01069"></a><span class="lineno"> 1069</span>}</div>
<div class="line"><a id="l01070" name="l01070"></a><span class="lineno"> 1070</span> </div>
<div class="line"><a id="l01071" name="l01071"></a><span class="lineno"> 1071</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01072" name="l01072"></a><span class="lineno"> 1072</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"> 1073</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01074" name="l01074"></a><span class="lineno"> 1074</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01075" name="l01075"></a><span class="lineno"> 1075</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01076" name="l01076"></a><span class="lineno"> 1076</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01077" name="l01077"></a><span class="lineno"> 1077</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01078" name="l01078"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad539bc1c2c592001bb2550722318ac95"> 1078</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::x(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01079" name="l01079"></a><span class="lineno"> 1079</span>{</div>
<div class="line"><a id="l01080" name="l01080"></a><span class="lineno"> 1080</span>  filter.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01081" name="l01081"></a><span class="lineno"> 1081</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01082" name="l01082"></a><span class="lineno"> 1082</span>}</div>
<div class="line"><a id="l01083" name="l01083"></a><span class="lineno"> 1083</span> </div>
<div class="line"><a id="l01084" name="l01084"></a><span class="lineno"> 1084</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01085" name="l01085"></a><span class="lineno"> 1085</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01086" name="l01086"></a><span class="lineno"> 1086</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01087" name="l01087"></a><span class="lineno"> 1087</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01088" name="l01088"></a><span class="lineno"> 1088</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01089" name="l01089"></a><span class="lineno"> 1089</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01090" name="l01090"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1039f28547872c3792f1ee723f3712d5"> 1090</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::z()</div>
<div class="line"><a id="l01091" name="l01091"></a><span class="lineno"> 1091</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a></div>
<div class="line"><a id="l01092" name="l01092"></a><span class="lineno"> 1092</span>{</div>
<div class="line"><a id="l01093" name="l01093"></a><span class="lineno"> 1093</span>  <span class="keywordflow">return</span> filter.z;</div>
<div class="line"><a id="l01094" name="l01094"></a><span class="lineno"> 1094</span>}</div>
<div class="line"><a id="l01095" name="l01095"></a><span class="lineno"> 1095</span> </div>
<div class="line"><a id="l01096" name="l01096"></a><span class="lineno"> 1096</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01097" name="l01097"></a><span class="lineno"> 1097</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01098" name="l01098"></a><span class="lineno"> 1098</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01099" name="l01099"></a><span class="lineno"> 1099</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01100" name="l01100"></a><span class="lineno"> 1100</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01101" name="l01101"></a><span class="lineno"> 1101</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01102" name="l01102"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6e6f32bce6418b0ee9eff0043f60b3b5"> 1102</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::u()</div>
<div class="line"><a id="l01103" name="l01103"></a><span class="lineno"> 1103</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a></div>
<div class="line"><a id="l01104" name="l01104"></a><span class="lineno"> 1104</span>{</div>
<div class="line"><a id="l01105" name="l01105"></a><span class="lineno"> 1105</span>  <span class="keywordflow">return</span> filter.u;</div>
<div class="line"><a id="l01106" name="l01106"></a><span class="lineno"> 1106</span>}</div>
<div class="line"><a id="l01107" name="l01107"></a><span class="lineno"> 1107</span> </div>
<div class="line"><a id="l01108" name="l01108"></a><span class="lineno"> 1108</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01109" name="l01109"></a><span class="lineno"> 1109</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01110" name="l01110"></a><span class="lineno"> 1110</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01111" name="l01111"></a><span class="lineno"> 1111</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01112" name="l01112"></a><span class="lineno"> 1112</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01113" name="l01113"></a><span class="lineno"> 1113</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01114" name="l01114"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afec5a7c22c82c90dd5a16348dcd04837"> 1114</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::p()</div>
<div class="line"><a id="l01115" name="l01115"></a><span class="lineno"> 1115</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a></div>
<div class="line"><a id="l01116" name="l01116"></a><span class="lineno"> 1116</span>{</div>
<div class="line"><a id="l01117" name="l01117"></a><span class="lineno"> 1117</span>  <span class="keywordflow">return</span> filter.p;</div>
<div class="line"><a id="l01118" name="l01118"></a><span class="lineno"> 1118</span>}</div>
<div class="line"><a id="l01119" name="l01119"></a><span class="lineno"> 1119</span> </div>
<div class="line"><a id="l01120" name="l01120"></a><span class="lineno"> 1120</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01121" name="l01121"></a><span class="lineno"> 1121</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01122" name="l01122"></a><span class="lineno"> 1122</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01123" name="l01123"></a><span class="lineno"> 1123</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01126" name="l01126"></a><span class="lineno"> 1126</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01127" name="l01127"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a38ee9c89407b0d5e5ea4628fe9aa5a27"> 1127</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01128" name="l01128"></a><span class="lineno"> 1128</span>{</div>
<div class="line"><a id="l01129" name="l01129"></a><span class="lineno"> 1129</span>  filter.p = value;</div>
<div class="line"><a id="l01130" name="l01130"></a><span class="lineno"> 1130</span>}</div>
<div class="line"><a id="l01131" name="l01131"></a><span class="lineno"> 1131</span> </div>
<div class="line"><a id="l01132" name="l01132"></a><span class="lineno"> 1132</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01133" name="l01133"></a><span class="lineno"> 1133</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01134" name="l01134"></a><span class="lineno"> 1134</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01135" name="l01135"></a><span class="lineno"> 1135</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01136" name="l01136"></a><span class="lineno"> 1136</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01137" name="l01137"></a><span class="lineno"> 1137</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01138" name="l01138"></a><span class="lineno"> 1138</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa38fba84334f874047a9fec46d14199d"> 1139</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01140" name="l01140"></a><span class="lineno"> 1140</span>{</div>
<div class="line"><a id="l01141" name="l01141"></a><span class="lineno"> 1141</span>  filter.p = std::move(value);</div>
<div class="line"><a id="l01142" name="l01142"></a><span class="lineno"> 1142</span>}</div>
<div class="line"><a id="l01143" name="l01143"></a><span class="lineno"> 1143</span> </div>
<div class="line"><a id="l01144" name="l01144"></a><span class="lineno"> 1144</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01145" name="l01145"></a><span class="lineno"> 1145</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01146" name="l01146"></a><span class="lineno"> 1146</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01147" name="l01147"></a><span class="lineno"> 1147</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01148" name="l01148"></a><span class="lineno"> 1148</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01149" name="l01149"></a><span class="lineno"> 1149</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01150" name="l01150"></a><span class="lineno"> 1150</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01151" name="l01151"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aff9046ab09074b5e0c9e95999c96ac16"> 1151</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01152" name="l01152"></a><span class="lineno"> 1152</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01153" name="l01153"></a><span class="lineno"> 1153</span>{</div>
<div class="line"><a id="l01154" name="l01154"></a><span class="lineno"> 1154</span>  filter.p = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01155" name="l01155"></a><span class="lineno"> 1155</span>}</div>
<div class="line"><a id="l01156" name="l01156"></a><span class="lineno"> 1156</span> </div>
<div class="line"><a id="l01157" name="l01157"></a><span class="lineno"> 1157</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01158" name="l01158"></a><span class="lineno"> 1158</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01159" name="l01159"></a><span class="lineno"> 1159</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01160" name="l01160"></a><span class="lineno"> 1160</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01161" name="l01161"></a><span class="lineno"> 1161</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01162" name="l01162"></a><span class="lineno"> 1162</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01163" name="l01163"></a><span class="lineno"> 1163</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01164" name="l01164"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae53be9c76d5617dfc539855e0edb7983"> 1164</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::p(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01165" name="l01165"></a><span class="lineno"> 1165</span>{</div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"> 1166</span>  filter.p = std::move(</div>
<div class="line"><a id="l01167" name="l01167"></a><span class="lineno"> 1167</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01168" name="l01168"></a><span class="lineno"> 1168</span>                            std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01169" name="l01169"></a><span class="lineno"> 1169</span>}</div>
<div class="line"><a id="l01170" name="l01170"></a><span class="lineno"> 1170</span> </div>
<div class="line"><a id="l01171" name="l01171"></a><span class="lineno"> 1171</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01172" name="l01172"></a><span class="lineno"> 1172</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01173" name="l01173"></a><span class="lineno"> 1173</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01174" name="l01174"></a><span class="lineno"> 1174</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01175" name="l01175"></a><span class="lineno"> 1175</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01176" name="l01176"></a><span class="lineno"> 1176</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01177" name="l01177"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad12cd3706e98a4c52fc3579b6e23f849"> 1177</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::q()</div>
<div class="line"><a id="l01178" name="l01178"></a><span class="lineno"> 1178</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a></div>
<div class="line"><a id="l01179" name="l01179"></a><span class="lineno"> 1179</span>{</div>
<div class="line"><a id="l01180" name="l01180"></a><span class="lineno"> 1180</span>  <span class="keywordflow">return</span> filter.q;</div>
<div class="line"><a id="l01181" name="l01181"></a><span class="lineno"> 1181</span>}</div>
<div class="line"><a id="l01182" name="l01182"></a><span class="lineno"> 1182</span> </div>
<div class="line"><a id="l01184" name="l01184"></a><span class="lineno"> 1184</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01185" name="l01185"></a><span class="lineno"> 1185</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01186" name="l01186"></a><span class="lineno"> 1186</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01187" name="l01187"></a><span class="lineno"> 1187</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01188" name="l01188"></a><span class="lineno"> 1188</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01189" name="l01189"></a><span class="lineno"> 1189</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01190" name="l01190"></a><span class="lineno"> 1190</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01191" name="l01191"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a43a8130c43da1665805b4774e77a0308"> 1191</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01192" name="l01192"></a><span class="lineno"> 1192</span>{</div>
<div class="line"><a id="l01193" name="l01193"></a><span class="lineno"> 1193</span>  filter.q = value;</div>
<div class="line"><a id="l01194" name="l01194"></a><span class="lineno"> 1194</span>}</div>
<div class="line"><a id="l01195" name="l01195"></a><span class="lineno"> 1195</span> </div>
<div class="line"><a id="l01197" name="l01197"></a><span class="lineno"> 1197</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01198" name="l01198"></a><span class="lineno"> 1198</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01199" name="l01199"></a><span class="lineno"> 1199</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01200" name="l01200"></a><span class="lineno"> 1200</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01201" name="l01201"></a><span class="lineno"> 1201</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01202" name="l01202"></a><span class="lineno"> 1202</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01203" name="l01203"></a><span class="lineno"> 1203</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01204" name="l01204"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac534ebd63b2620769c4bbb76830df6b8"> 1204</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01205" name="l01205"></a><span class="lineno"> 1205</span>{</div>
<div class="line"><a id="l01206" name="l01206"></a><span class="lineno"> 1206</span>  filter.q = std::move(value);</div>
<div class="line"><a id="l01207" name="l01207"></a><span class="lineno"> 1207</span>}</div>
<div class="line"><a id="l01208" name="l01208"></a><span class="lineno"> 1208</span> </div>
<div class="line"><a id="l01210" name="l01210"></a><span class="lineno"> 1210</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01211" name="l01211"></a><span class="lineno"> 1211</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01212" name="l01212"></a><span class="lineno"> 1212</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01213" name="l01213"></a><span class="lineno"> 1213</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01214" name="l01214"></a><span class="lineno"> 1214</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01215" name="l01215"></a><span class="lineno"> 1215</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01216" name="l01216"></a><span class="lineno"> 1216</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01217" name="l01217"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac35e3b90fc17719c1a8c0d4d8a008785"> 1217</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01218" name="l01218"></a><span class="lineno"> 1218</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01219" name="l01219"></a><span class="lineno"> 1219</span>{</div>
<div class="line"><a id="l01220" name="l01220"></a><span class="lineno"> 1220</span>  filter.q = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01221" name="l01221"></a><span class="lineno"> 1221</span>}</div>
<div class="line"><a id="l01222" name="l01222"></a><span class="lineno"> 1222</span> </div>
<div class="line"><a id="l01224" name="l01224"></a><span class="lineno"> 1224</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01225" name="l01225"></a><span class="lineno"> 1225</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01226" name="l01226"></a><span class="lineno"> 1226</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01227" name="l01227"></a><span class="lineno"> 1227</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01228" name="l01228"></a><span class="lineno"> 1228</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01229" name="l01229"></a><span class="lineno"> 1229</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01230" name="l01230"></a><span class="lineno"> 1230</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01231" name="l01231"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af82ffde1dadd3bf88e215a3ac0bd1a0b"> 1231</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::q(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01232" name="l01232"></a><span class="lineno"> 1232</span>{</div>
<div class="line"><a id="l01233" name="l01233"></a><span class="lineno"> 1233</span>  filter.q = std::move(</div>
<div class="line"><a id="l01234" name="l01234"></a><span class="lineno"> 1234</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01235" name="l01235"></a><span class="lineno"> 1235</span>                           std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01236" name="l01236"></a><span class="lineno"> 1236</span>}</div>
<div class="line"><a id="l01237" name="l01237"></a><span class="lineno"> 1237</span> </div>
<div class="line"><a id="l01238" name="l01238"></a><span class="lineno"> 1238</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01239" name="l01239"></a><span class="lineno"> 1239</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01240" name="l01240"></a><span class="lineno"> 1240</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01241" name="l01241"></a><span class="lineno"> 1241</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01242" name="l01242"></a><span class="lineno"> 1242</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01243" name="l01243"></a><span class="lineno"> 1243</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01244" name="l01244"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aad10f87648f333b36312f9afe50c5407"> 1244</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::r()</div>
<div class="line"><a id="l01245" name="l01245"></a><span class="lineno"> 1245</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a></div>
<div class="line"><a id="l01246" name="l01246"></a><span class="lineno"> 1246</span>{</div>
<div class="line"><a id="l01247" name="l01247"></a><span class="lineno"> 1247</span>  <span class="keywordflow">return</span> filter.r;</div>
<div class="line"><a id="l01248" name="l01248"></a><span class="lineno"> 1248</span>}</div>
<div class="line"><a id="l01249" name="l01249"></a><span class="lineno"> 1249</span> </div>
<div class="line"><a id="l01250" name="l01250"></a><span class="lineno"> 1250</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01251" name="l01251"></a><span class="lineno"> 1251</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01252" name="l01252"></a><span class="lineno"> 1252</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01253" name="l01253"></a><span class="lineno"> 1253</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01254" name="l01254"></a><span class="lineno"> 1254</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01255" name="l01255"></a><span class="lineno"> 1255</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01256" name="l01256"></a><span class="lineno"> 1256</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01257" name="l01257"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6084a664fcde706247f91de2d441f6ac"> 1257</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;value)</div>
<div class="line"><a id="l01258" name="l01258"></a><span class="lineno"> 1258</span>{</div>
<div class="line"><a id="l01259" name="l01259"></a><span class="lineno"> 1259</span>  filter.r = value;</div>
<div class="line"><a id="l01260" name="l01260"></a><span class="lineno"> 1260</span>}</div>
<div class="line"><a id="l01261" name="l01261"></a><span class="lineno"> 1261</span> </div>
<div class="line"><a id="l01262" name="l01262"></a><span class="lineno"> 1262</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01263" name="l01263"></a><span class="lineno"> 1263</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01264" name="l01264"></a><span class="lineno"> 1264</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01265" name="l01265"></a><span class="lineno"> 1265</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01266" name="l01266"></a><span class="lineno"> 1266</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01267" name="l01267"></a><span class="lineno"> 1267</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01268" name="l01268"></a><span class="lineno"> 1268</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01269" name="l01269"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#acaefb648cec4a50998444d982e21c942"> 1269</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;&amp;value)</div>
<div class="line"><a id="l01270" name="l01270"></a><span class="lineno"> 1270</span>{</div>
<div class="line"><a id="l01271" name="l01271"></a><span class="lineno"> 1271</span>  filter.r = std::move(value);</div>
<div class="line"><a id="l01272" name="l01272"></a><span class="lineno"> 1272</span>}</div>
<div class="line"><a id="l01273" name="l01273"></a><span class="lineno"> 1273</span> </div>
<div class="line"><a id="l01274" name="l01274"></a><span class="lineno"> 1274</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01275" name="l01275"></a><span class="lineno"> 1275</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01276" name="l01276"></a><span class="lineno"> 1276</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01277" name="l01277"></a><span class="lineno"> 1277</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01278" name="l01278"></a><span class="lineno"> 1278</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01279" name="l01279"></a><span class="lineno"> 1279</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01280" name="l01280"></a><span class="lineno"> 1280</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01281" name="l01281"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a687ad5deeb6467a2ff72a1fbb40c6565"> 1281</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01282" name="l01282"></a><span class="lineno"> 1282</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01283" name="l01283"></a><span class="lineno"> 1283</span>{</div>
<div class="line"><a id="l01284" name="l01284"></a><span class="lineno"> 1284</span>  filter.r = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ value, values... };</div>
<div class="line"><a id="l01285" name="l01285"></a><span class="lineno"> 1285</span>}</div>
<div class="line"><a id="l01286" name="l01286"></a><span class="lineno"> 1286</span> </div>
<div class="line"><a id="l01287" name="l01287"></a><span class="lineno"> 1287</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01288" name="l01288"></a><span class="lineno"> 1288</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01289" name="l01289"></a><span class="lineno"> 1289</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01290" name="l01290"></a><span class="lineno"> 1290</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01291" name="l01291"></a><span class="lineno"> 1291</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01292" name="l01292"></a><span class="lineno"> 1292</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01293" name="l01293"></a><span class="lineno"> 1293</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01294" name="l01294"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad61f5815088a806f5c744e4b48bc9c70"> 1294</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::r(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01295" name="l01295"></a><span class="lineno"> 1295</span>{</div>
<div class="line"><a id="l01296" name="l01296"></a><span class="lineno"> 1296</span>  filter.r = std::move(</div>
<div class="line"><a id="l01297" name="l01297"></a><span class="lineno"> 1297</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01298" name="l01298"></a><span class="lineno"> 1298</span>                          std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01299" name="l01299"></a><span class="lineno"> 1299</span>}</div>
<div class="line"><a id="l01300" name="l01300"></a><span class="lineno"> 1300</span> </div>
<div class="line"><a id="l01301" name="l01301"></a><span class="lineno"> 1301</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01302" name="l01302"></a><span class="lineno"> 1302</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01303" name="l01303"></a><span class="lineno"> 1303</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01304" name="l01304"></a><span class="lineno"> 1304</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01305" name="l01305"></a><span class="lineno"> 1305</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01306" name="l01306"></a><span class="lineno"> 1306</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01307" name="l01307"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa5f2a19b89842335b53d5777820211ff"> 1307</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::f()</div>
<div class="line"><a id="l01308" name="l01308"></a><span class="lineno"> 1308</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a></div>
<div class="line"><a id="l01309" name="l01309"></a><span class="lineno"> 1309</span>{</div>
<div class="line"><a id="l01310" name="l01310"></a><span class="lineno"> 1310</span>  <span class="keywordflow">return</span> filter.f;</div>
<div class="line"><a id="l01311" name="l01311"></a><span class="lineno"> 1311</span>}</div>
<div class="line"><a id="l01312" name="l01312"></a><span class="lineno"> 1312</span> </div>
<div class="line"><a id="l01313" name="l01313"></a><span class="lineno"> 1313</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01314" name="l01314"></a><span class="lineno"> 1314</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01315" name="l01315"></a><span class="lineno"> 1315</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01316" name="l01316"></a><span class="lineno"> 1316</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01317" name="l01317"></a><span class="lineno"> 1317</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01318" name="l01318"></a><span class="lineno"> 1318</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01319" name="l01319"></a><span class="lineno"> 1319</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01320" name="l01320"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5620ce64a25fbf4f9322798e22d13433"> 1320</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;value)</div>
<div class="line"><a id="l01321" name="l01321"></a><span class="lineno"> 1321</span>{</div>
<div class="line"><a id="l01322" name="l01322"></a><span class="lineno"> 1322</span>  filter.f = value;</div>
<div class="line"><a id="l01323" name="l01323"></a><span class="lineno"> 1323</span>}</div>
<div class="line"><a id="l01324" name="l01324"></a><span class="lineno"> 1324</span> </div>
<div class="line"><a id="l01325" name="l01325"></a><span class="lineno"> 1325</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01326" name="l01326"></a><span class="lineno"> 1326</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01327" name="l01327"></a><span class="lineno"> 1327</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01328" name="l01328"></a><span class="lineno"> 1328</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01329" name="l01329"></a><span class="lineno"> 1329</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01330" name="l01330"></a><span class="lineno"> 1330</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01331" name="l01331"></a><span class="lineno"> 1331</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01332" name="l01332"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6556dd42246c90ec83502a670ef26d93"> 1332</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;&amp;value)</div>
<div class="line"><a id="l01333" name="l01333"></a><span class="lineno"> 1333</span>{</div>
<div class="line"><a id="l01334" name="l01334"></a><span class="lineno"> 1334</span>  filter.f = std::move(value);</div>
<div class="line"><a id="l01335" name="l01335"></a><span class="lineno"> 1335</span>}</div>
<div class="line"><a id="l01336" name="l01336"></a><span class="lineno"> 1336</span> </div>
<div class="line"><a id="l01337" name="l01337"></a><span class="lineno"> 1337</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01338" name="l01338"></a><span class="lineno"> 1338</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01339" name="l01339"></a><span class="lineno"> 1339</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01340" name="l01340"></a><span class="lineno"> 1340</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01341" name="l01341"></a><span class="lineno"> 1341</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01342" name="l01342"></a><span class="lineno"> 1342</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01343" name="l01343"></a><span class="lineno"> 1343</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01344" name="l01344"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a171f8e535b7962fd5413eb2f1079f47c"> 1344</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01345" name="l01345"></a><span class="lineno"> 1345</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01346" name="l01346"></a><span class="lineno"> 1346</span>{</div>
<div class="line"><a id="l01347" name="l01347"></a><span class="lineno"> 1347</span>  filter.f = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ value, values... };</div>
<div class="line"><a id="l01348" name="l01348"></a><span class="lineno"> 1348</span>}</div>
<div class="line"><a id="l01349" name="l01349"></a><span class="lineno"> 1349</span> </div>
<div class="line"><a id="l01350" name="l01350"></a><span class="lineno"> 1350</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01351" name="l01351"></a><span class="lineno"> 1351</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01352" name="l01352"></a><span class="lineno"> 1352</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01353" name="l01353"></a><span class="lineno"> 1353</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01354" name="l01354"></a><span class="lineno"> 1354</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01355" name="l01355"></a><span class="lineno"> 1355</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01356" name="l01356"></a><span class="lineno"> 1356</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01357" name="l01357"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6518991f343d0da14df76b6724e8deaa"> 1357</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::f(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01358" name="l01358"></a><span class="lineno"> 1358</span>{</div>
<div class="line"><a id="l01359" name="l01359"></a><span class="lineno"> 1359</span>  filter.f =</div>
<div class="line"><a id="l01360" name="l01360"></a><span class="lineno"> 1360</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01361" name="l01361"></a><span class="lineno"> 1361</span>                                  std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01362" name="l01362"></a><span class="lineno"> 1362</span>}</div>
<div class="line"><a id="l01363" name="l01363"></a><span class="lineno"> 1363</span> </div>
<div class="line"><a id="l01364" name="l01364"></a><span class="lineno"> 1364</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01365" name="l01365"></a><span class="lineno"> 1365</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01366" name="l01366"></a><span class="lineno"> 1366</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01367" name="l01367"></a><span class="lineno"> 1367</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01368" name="l01368"></a><span class="lineno"> 1368</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01369" name="l01369"></a><span class="lineno"> 1369</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01370" name="l01370"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0370a8ea6f1be4372d0c25fd4645442d"> 1370</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::h()</div>
<div class="line"><a id="l01371" name="l01371"></a><span class="lineno"> 1371</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a></div>
<div class="line"><a id="l01372" name="l01372"></a><span class="lineno"> 1372</span>{</div>
<div class="line"><a id="l01373" name="l01373"></a><span class="lineno"> 1373</span>  <span class="keywordflow">return</span> filter.h;</div>
<div class="line"><a id="l01374" name="l01374"></a><span class="lineno"> 1374</span>}</div>
<div class="line"><a id="l01375" name="l01375"></a><span class="lineno"> 1375</span> </div>
<div class="line"><a id="l01376" name="l01376"></a><span class="lineno"> 1376</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01377" name="l01377"></a><span class="lineno"> 1377</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01378" name="l01378"></a><span class="lineno"> 1378</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01379" name="l01379"></a><span class="lineno"> 1379</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01380" name="l01380"></a><span class="lineno"> 1380</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01381" name="l01381"></a><span class="lineno"> 1381</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01382" name="l01382"></a><span class="lineno"> 1382</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01383" name="l01383"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac7f7b0dd72e6f3591649dc5394dcf0e1"> 1383</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;value)</div>
<div class="line"><a id="l01384" name="l01384"></a><span class="lineno"> 1384</span>{</div>
<div class="line"><a id="l01385" name="l01385"></a><span class="lineno"> 1385</span>  filter.h = value;</div>
<div class="line"><a id="l01386" name="l01386"></a><span class="lineno"> 1386</span>}</div>
<div class="line"><a id="l01387" name="l01387"></a><span class="lineno"> 1387</span> </div>
<div class="line"><a id="l01388" name="l01388"></a><span class="lineno"> 1388</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01389" name="l01389"></a><span class="lineno"> 1389</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01390" name="l01390"></a><span class="lineno"> 1390</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01391" name="l01391"></a><span class="lineno"> 1391</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01392" name="l01392"></a><span class="lineno"> 1392</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01393" name="l01393"></a><span class="lineno"> 1393</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01394" name="l01394"></a><span class="lineno"> 1394</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01395" name="l01395"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3440f4c242173d9f28d92a05701054b6"> 1395</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;&amp;value)</div>
<div class="line"><a id="l01396" name="l01396"></a><span class="lineno"> 1396</span>{</div>
<div class="line"><a id="l01397" name="l01397"></a><span class="lineno"> 1397</span>  filter.h = std::move(value);</div>
<div class="line"><a id="l01398" name="l01398"></a><span class="lineno"> 1398</span>}</div>
<div class="line"><a id="l01399" name="l01399"></a><span class="lineno"> 1399</span> </div>
<div class="line"><a id="l01400" name="l01400"></a><span class="lineno"> 1400</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01401" name="l01401"></a><span class="lineno"> 1401</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01402" name="l01402"></a><span class="lineno"> 1402</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01403" name="l01403"></a><span class="lineno"> 1403</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01404" name="l01404"></a><span class="lineno"> 1404</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01405" name="l01405"></a><span class="lineno"> 1405</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01406" name="l01406"></a><span class="lineno"> 1406</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01407" name="l01407"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0d55dcd95188a8c92238cefd64cb2fe3"> 1407</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01408" name="l01408"></a><span class="lineno"> 1408</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01409" name="l01409"></a><span class="lineno"> 1409</span>{</div>
<div class="line"><a id="l01410" name="l01410"></a><span class="lineno"> 1410</span>  filter.h = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ value, values... };</div>
<div class="line"><a id="l01411" name="l01411"></a><span class="lineno"> 1411</span>}</div>
<div class="line"><a id="l01412" name="l01412"></a><span class="lineno"> 1412</span> </div>
<div class="line"><a id="l01413" name="l01413"></a><span class="lineno"> 1413</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01414" name="l01414"></a><span class="lineno"> 1414</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01415" name="l01415"></a><span class="lineno"> 1415</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01416" name="l01416"></a><span class="lineno"> 1416</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01417" name="l01417"></a><span class="lineno"> 1417</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01418" name="l01418"></a><span class="lineno"> 1418</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01419" name="l01419"></a><span class="lineno"> 1419</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01420" name="l01420"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a95c2efbee9a3a29482282faef3d1b367"> 1420</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::h(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01421" name="l01421"></a><span class="lineno"> 1421</span>{</div>
<div class="line"><a id="l01422" name="l01422"></a><span class="lineno"> 1422</span>  filter.h =</div>
<div class="line"><a id="l01423" name="l01423"></a><span class="lineno"> 1423</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01424" name="l01424"></a><span class="lineno"> 1424</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01425" name="l01425"></a><span class="lineno"> 1425</span>}</div>
<div class="line"><a id="l01426" name="l01426"></a><span class="lineno"> 1426</span> </div>
<div class="line"><a id="l01427" name="l01427"></a><span class="lineno"> 1427</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01428" name="l01428"></a><span class="lineno"> 1428</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01429" name="l01429"></a><span class="lineno"> 1429</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01430" name="l01430"></a><span class="lineno"> 1430</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01431" name="l01431"></a><span class="lineno"> 1431</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01432" name="l01432"></a><span class="lineno"> 1432</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01433" name="l01433"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cade2af2ad1e4f3cde979cfe9c1439b"> 1433</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::g()</div>
<div class="line"><a id="l01434" name="l01434"></a><span class="lineno"> 1434</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a></div>
<div class="line"><a id="l01435" name="l01435"></a><span class="lineno"> 1435</span>{</div>
<div class="line"><a id="l01436" name="l01436"></a><span class="lineno"> 1436</span>  <span class="keywordflow">return</span> filter.g;</div>
<div class="line"><a id="l01437" name="l01437"></a><span class="lineno"> 1437</span>}</div>
<div class="line"><a id="l01438" name="l01438"></a><span class="lineno"> 1438</span> </div>
<div class="line"><a id="l01439" name="l01439"></a><span class="lineno"> 1439</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01440" name="l01440"></a><span class="lineno"> 1440</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01441" name="l01441"></a><span class="lineno"> 1441</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01442" name="l01442"></a><span class="lineno"> 1442</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01443" name="l01443"></a><span class="lineno"> 1443</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01444" name="l01444"></a><span class="lineno"> 1444</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01445" name="l01445"></a><span class="lineno"> 1445</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01446" name="l01446"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aacc8ff5d8536cdb89bde5fe3c9e42d3d"> 1446</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;value)</div>
<div class="line"><a id="l01447" name="l01447"></a><span class="lineno"> 1447</span>{</div>
<div class="line"><a id="l01448" name="l01448"></a><span class="lineno"> 1448</span>  filter.g = value;</div>
<div class="line"><a id="l01449" name="l01449"></a><span class="lineno"> 1449</span>}</div>
<div class="line"><a id="l01450" name="l01450"></a><span class="lineno"> 1450</span> </div>
<div class="line"><a id="l01451" name="l01451"></a><span class="lineno"> 1451</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01452" name="l01452"></a><span class="lineno"> 1452</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01453" name="l01453"></a><span class="lineno"> 1453</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01454" name="l01454"></a><span class="lineno"> 1454</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01455" name="l01455"></a><span class="lineno"> 1455</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01456" name="l01456"></a><span class="lineno"> 1456</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01457" name="l01457"></a><span class="lineno"> 1457</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01458" name="l01458"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3c2ad8ac4b5f2a4a213df1cfc2422f2a"> 1458</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;&amp;value)</div>
<div class="line"><a id="l01459" name="l01459"></a><span class="lineno"> 1459</span>{</div>
<div class="line"><a id="l01460" name="l01460"></a><span class="lineno"> 1460</span>  filter.g = std::move(value);</div>
<div class="line"><a id="l01461" name="l01461"></a><span class="lineno"> 1461</span>}</div>
<div class="line"><a id="l01462" name="l01462"></a><span class="lineno"> 1462</span> </div>
<div class="line"><a id="l01463" name="l01463"></a><span class="lineno"> 1463</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01464" name="l01464"></a><span class="lineno"> 1464</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01465" name="l01465"></a><span class="lineno"> 1465</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01466" name="l01466"></a><span class="lineno"> 1466</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01467" name="l01467"></a><span class="lineno"> 1467</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01468" name="l01468"></a><span class="lineno"> 1468</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01469" name="l01469"></a><span class="lineno"> 1469</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01470" name="l01470"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac5a26886bcb2b17876bb2a516bc025df"> 1470</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01471" name="l01471"></a><span class="lineno"> 1471</span>                                              <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01472" name="l01472"></a><span class="lineno"> 1472</span>{</div>
<div class="line"><a id="l01473" name="l01473"></a><span class="lineno"> 1473</span>  filter.g = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ value, values... };</div>
<div class="line"><a id="l01474" name="l01474"></a><span class="lineno"> 1474</span>}</div>
<div class="line"><a id="l01475" name="l01475"></a><span class="lineno"> 1475</span> </div>
<div class="line"><a id="l01476" name="l01476"></a><span class="lineno"> 1476</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01477" name="l01477"></a><span class="lineno"> 1477</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01478" name="l01478"></a><span class="lineno"> 1478</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01479" name="l01479"></a><span class="lineno"> 1479</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01480" name="l01480"></a><span class="lineno"> 1480</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01481" name="l01481"></a><span class="lineno"> 1481</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01482" name="l01482"></a><span class="lineno"> 1482</span>       std::tuple&lt;UpdateArguments...&gt;,</div>
<div class="line"><a id="l01483" name="l01483"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a92feb96774f92926d421a6ded5ce81dd"> 1483</a></span>       std::tuple&lt;PredictionArguments...&gt;&gt;::g(<span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01484" name="l01484"></a><span class="lineno"> 1484</span>{</div>
<div class="line"><a id="l01485" name="l01485"></a><span class="lineno"> 1485</span>  filter.g =</div>
<div class="line"><a id="l01486" name="l01486"></a><span class="lineno"> 1486</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01487" name="l01487"></a><span class="lineno"> 1487</span>                               std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01488" name="l01488"></a><span class="lineno"> 1488</span>}</div>
<div class="line"><a id="l01489" name="l01489"></a><span class="lineno"> 1489</span> </div>
<div class="line"><a id="l01490" name="l01490"></a><span class="lineno"> 1490</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01491" name="l01491"></a><span class="lineno"> 1491</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01492" name="l01492"></a><span class="lineno"> 1492</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01493" name="l01493"></a><span class="lineno"> 1493</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01494" name="l01494"></a><span class="lineno"> 1494</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01495" name="l01495"></a><span class="lineno"> 1495</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01496" name="l01496"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8aa520d3dd110e616c665b516328aaa0"> 1496</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::k()</div>
<div class="line"><a id="l01497" name="l01497"></a><span class="lineno"> 1497</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a></div>
<div class="line"><a id="l01498" name="l01498"></a><span class="lineno"> 1498</span>{</div>
<div class="line"><a id="l01499" name="l01499"></a><span class="lineno"> 1499</span>  <span class="keywordflow">return</span> filter.k;</div>
<div class="line"><a id="l01500" name="l01500"></a><span class="lineno"> 1500</span>}</div>
<div class="line"><a id="l01501" name="l01501"></a><span class="lineno"> 1501</span> </div>
<div class="line"><a id="l01502" name="l01502"></a><span class="lineno"> 1502</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01503" name="l01503"></a><span class="lineno"> 1503</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01504" name="l01504"></a><span class="lineno"> 1504</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01505" name="l01505"></a><span class="lineno"> 1505</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01506" name="l01506"></a><span class="lineno"> 1506</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01507" name="l01507"></a><span class="lineno"> 1507</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01508" name="l01508"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a859ab007e6da085502cb3415022e1182"> 1508</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::y()</div>
<div class="line"><a id="l01509" name="l01509"></a><span class="lineno"> 1509</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a></div>
<div class="line"><a id="l01510" name="l01510"></a><span class="lineno"> 1510</span>{</div>
<div class="line"><a id="l01511" name="l01511"></a><span class="lineno"> 1511</span>  <span class="keywordflow">return</span> filter.y;</div>
<div class="line"><a id="l01512" name="l01512"></a><span class="lineno"> 1512</span>}</div>
<div class="line"><a id="l01513" name="l01513"></a><span class="lineno"> 1513</span> </div>
<div class="line"><a id="l01514" name="l01514"></a><span class="lineno"> 1514</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01515" name="l01515"></a><span class="lineno"> 1515</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01516" name="l01516"></a><span class="lineno"> 1516</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01517" name="l01517"></a><span class="lineno"> 1517</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01518" name="l01518"></a><span class="lineno"> 1518</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01519" name="l01519"></a><span class="lineno"> 1519</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01520" name="l01520"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a85d0d89138b16394f874299e720a5334"> 1520</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::s()</div>
<div class="line"><a id="l01521" name="l01521"></a><span class="lineno"> 1521</span>    const -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a></div>
<div class="line"><a id="l01522" name="l01522"></a><span class="lineno"> 1522</span>{</div>
<div class="line"><a id="l01523" name="l01523"></a><span class="lineno"> 1523</span>  <span class="keywordflow">return</span> filter.s;</div>
<div class="line"><a id="l01524" name="l01524"></a><span class="lineno"> 1524</span>}</div>
<div class="line"><a id="l01525" name="l01525"></a><span class="lineno"> 1525</span> </div>
<div class="line"><a id="l01526" name="l01526"></a><span class="lineno"> 1526</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01527" name="l01527"></a><span class="lineno"> 1527</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01528" name="l01528"></a><span class="lineno"> 1528</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01529" name="l01529"></a><span class="lineno"> 1529</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01530" name="l01530"></a><span class="lineno"> 1530</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01531" name="l01531"></a><span class="lineno"> 1531</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01532" name="l01532"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aaba5bd00471dd86bb62ab433e601e290"> 1532</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::</div>
<div class="line"><a id="l01533" name="l01533"></a><span class="lineno"> 1533</span>    update(<span class="keyword">const</span> UpdateArguments &amp;...arguments, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...output_z)</div>
<div class="line"><a id="l01534" name="l01534"></a><span class="lineno"> 1534</span>{</div>
<div class="line"><a id="l01535" name="l01535"></a><span class="lineno"> 1535</span>  filter.update(arguments..., output_z...);</div>
<div class="line"><a id="l01536" name="l01536"></a><span class="lineno"> 1536</span>}</div>
<div class="line"><a id="l01537" name="l01537"></a><span class="lineno"> 1537</span> </div>
<div class="line"><a id="l01538" name="l01538"></a><span class="lineno"> 1538</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input,</div>
<div class="line"><a id="l01539" name="l01539"></a><span class="lineno"> 1539</span>          <span class="keyword">typename</span> Transpose, <span class="keyword">typename</span> Symmetrize, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01540" name="l01540"></a><span class="lineno"> 1540</span>          <span class="keyword">typename</span> Identity, <span class="keyword">typename</span>... UpdateArguments,</div>
<div class="line"><a id="l01541" name="l01541"></a><span class="lineno"> 1541</span>          <span class="keyword">typename</span>... PredictionArguments&gt;</div>
<div class="line"><a id="l01542" name="l01542"></a><span class="lineno"> 1542</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01543" name="l01543"></a><span class="lineno"> 1543</span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity,</div>
<div class="line"><a id="l01544" name="l01544"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7aace08260b714dcf1b71505db6e9c4d"> 1544</a></span>       std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt;&gt;::</div>
<div class="line"><a id="l01545" name="l01545"></a><span class="lineno"> 1545</span>    predict(<span class="keyword">const</span> PredictionArguments &amp;...arguments, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...input_u)</div>
<div class="line"><a id="l01546" name="l01546"></a><span class="lineno"> 1546</span>{</div>
<div class="line"><a id="l01547" name="l01547"></a><span class="lineno"> 1547</span>  filter.predict(arguments..., input_u...);</div>
<div class="line"><a id="l01548" name="l01548"></a><span class="lineno"> 1548</span>}</div>
<div class="line"><a id="l01549" name="l01549"></a><span class="lineno"> 1549</span> </div>
<div class="line"><a id="l01550" name="l01550"></a><span class="lineno"> 1550</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l01551" name="l01551"></a><span class="lineno"> 1551</span> </div>
<div class="line"><a id="l01552" name="l01552"></a><span class="lineno"> 1552</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_KALMAN_HPP</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a070b4a229b25866e0315c655a4f45363"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00227">kalman.hpp:227</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a07a2833cb8987cf23bdd246e055b77bc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator=</a></div><div class="ttdeci">constexpr auto operator=(const kalman &amp;other) -&gt; kalman &amp;=default</div><div class="ttdoc">Copy assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a0c2588a07e489c62a864f7d24f092fe8"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q</a></div><div class="ttdeci">constexpr void q(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the process noise covariance matrix Q function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00489">kalman.hpp:489</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a0cbdd537cd7db2c2ed505771a1c6335d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation</a></div><div class="ttdeci">constexpr void observation(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the extended state observation function h(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00927">kalman.hpp:927</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a184350446243f42901c5e19304884cfc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation</a></div><div class="ttdeci">constexpr void observation(const auto &amp;callable)</div><div class="ttdoc">Sets the extended state observation function h(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00908">kalman.hpp:908</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a29380c51a414f04b711824a5bca511fd"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00209">kalman.hpp:209</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a36d968ee3fb917205d9fc45c8159e016"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman(kalman &amp;&amp;other) noexcept=default</div><div class="ttdoc">Move constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a3980092faa4f88756aa1356d1ff03b07"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation</a></div><div class="ttdeci">typename implementation::innovation innovation</div><div class="ttdoc">Type of the innovation vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00233">kalman.hpp:233</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a4644c6c5e8987a82e6c2f39a9079d84d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition</a></div><div class="ttdeci">constexpr void transition(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the extended state transition function f(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00889">kalman.hpp:889</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a4c611ea603ef3e6b8d77689257615d88"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4c611ea603ef3e6b8d77689257615d88">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator()</a></div><div class="ttdeci">constexpr void operator()(const PredictionArguments &amp;...prediction_arguments, const UpdateArguments &amp;...update_arguments, const auto &amp;...input_u, const auto &amp;...output_z)</div><div class="ttdoc">Runs a step of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00970">kalman.hpp:970</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a5bf539f6dbb7e4e69917e5f813178248"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5bf539f6dbb7e4e69917e5f813178248">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f</a></div><div class="ttdeci">constexpr void f(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the state transition matrix F function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00658">kalman.hpp:658</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a6d75c3fd77c3e71c27f557d8dee66ec7"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::implementation</a></div><div class="ttdeci">internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; implementation</div><div class="ttdoc">Implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00178">kalman.hpp:181</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a6ef9c58b523be1333b7d52ff4c770d0d"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::gain</a></div><div class="ttdeci">typename implementation::gain gain</div><div class="ttdoc">Type of the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00230">kalman.hpp:230</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a7cc076d3e919201547efb890de7b58af"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00193">kalman.hpp:193</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a8ef1d10626818a47f20e82f4340f56e4"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::innovation_uncertainty</a></div><div class="ttdeci">typename implementation::innovation_uncertainty innovation_uncertainty</div><div class="ttdoc">Type of the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00236">kalman.hpp:237</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a980d74a57d065ea83ca60e6235f24e63"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::~kalman</a></div><div class="ttdeci">constexpr ~kalman()=default</div><div class="ttdoc">Destructs the kalman filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a98278129bb6899f98c55ffd09799b560"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r</a></div><div class="ttdeci">constexpr void r(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation noise covariance matrix R function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00571">kalman.hpp:571</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00217">kalman.hpp:217</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ab4c0442b59d66e51ae2dfd705876748b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00222">kalman.hpp:222</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ab977824cf95c0c283d19b0beaa0b30fc"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman(const kalman &amp;other)=default</div><div class="ttdoc">Copy constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aba118611184d7370e9883f64c9fc99af"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::kalman</a></div><div class="ttdeci">constexpr kalman()=default</div><div class="ttdoc">Constructs a Kalman filter without configuration.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac0a58c8388997fee7b09ecd3fed65343"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator=</a></div><div class="ttdeci">constexpr auto operator=(kalman &amp;&amp;other) noexcept -&gt; kalman &amp;=default</div><div class="ttdoc">Move assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac0e89d56a929c5bd839886da696f274f"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00206">kalman.hpp:206</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac8aa1578e6ffb2fda2cd615afef13258"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00201">kalman.hpp:201</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ad8f6d60f3a75cdd1d8035f0335dac243"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output</a></div><div class="ttdeci">typename implementation::output output</div><div class="ttdoc">Type of the observation vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00198">kalman.hpp:198</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_adb1ffad6570a90c0ed3b846d952a96a8"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h</a></div><div class="ttdeci">constexpr void h(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the observation, measurement transition matrix H function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00747">kalman.hpp:747</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_add51c4fb72502581f7dfba667ea613ed"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g</a></div><div class="ttdeci">constexpr void g(auto &amp;&amp;callable)</div><div class="ttdoc">Sets the control transition matrix G function.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00824">kalman.hpp:824</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ae8f29b2f6cd2256440c5eb669d7c11f1"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::value_type</a></div><div class="ttdeci">Type value_type</div><div class="ttdoc">The type of the filtered data elements.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00190">kalman.hpp:190</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_af0e798a32b80dee9a86b68e6ea8fb664"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01017">kalman.hpp:1017</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_afacd9014b33d545e83c4e84881f5258c"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00212">kalman.hpp:212</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00083">kalman.hpp:84</a></div></div>
<div class="ttc" id="aformat_8hpp_xhtml"><div class="ttname"><a href="format_8hpp.xhtml">format.hpp</a></div></div>
<div class="ttc" id="ainternal_2kalman_8hpp_xhtml"><div class="ttname"><a href="internal_2kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The main Kalman filter class.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_1_1internal_xhtml_a41a6a60c1495641760e4ac1dfffca2b8"><div class="ttname"><a href="namespacefcarouge_1_1eigen_1_1internal.xhtml#a41a6a60c1495641760e4ac1dfffca2b8">fcarouge::eigen::internal::kalman</a></div><div class="ttdeci">fcarouge::kalman&lt; Type, std::conditional_t&lt; State==1, Type, Eigen::Vector&lt; Type, State &gt; &gt;, std::conditional_t&lt; Output==1, Type, Eigen::Vector&lt; Type, Output &gt; &gt;, std::conditional_t&lt; Input==1, Type, Eigen::Vector&lt; Type, Input &gt; &gt;, transpose, symmetrize, divide, identity_matrix, UpdateArguments, PredictionArguments &gt; kalman</div><div class="ttdef"><b>Definition:</b> <a href="eigen_8hpp_source.xhtml#l00250">eigen.hpp:254</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_ab99c4b80cb5488c202a697e056134bae"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#ab99c4b80cb5488c202a697e056134bae">fcarouge::eigen::identity_matrix</a></div><div class="ttdeci">internal::identity_matrix identity_matrix</div><div class="ttdoc">Function object for providing an Eigen identity matrix.</div><div class="ttdef"><b>Definition:</b> <a href="kalman__eigen_8hpp_source.xhtml#l00062">kalman_eigen.hpp:62</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition:</b> <a href="benchmark__full_8cpp_source.xhtml#l00046">benchmark_full.cpp:47</a></div></div>
<div class="ttc" id="astructfcarouge_1_1identity__matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1identity__matrix.xhtml">fcarouge::identity_matrix</a></div><div class="ttdoc">Function object for providing an identity matrix.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00063">kalman.hpp:63</a></div></div>
<div class="ttc" id="astructfcarouge_1_1identity__matrix_xhtml_a3bc3899543cf8c8e0b11afc1412cf087"><div class="ttname"><a href="structfcarouge_1_1identity__matrix.xhtml#a3bc3899543cf8c8e0b11afc1412cf087">fcarouge::identity_matrix::operator()</a></div><div class="ttdeci">constexpr auto operator()() const noexcept</div><div class="ttdoc">Returns 1, the 1-by-1 identity matrix equivalent.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00070">kalman.hpp:70</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="kalman_8hpp.xhtml">kalman.hpp</a></li>
    <li class="footer">Generated on Wed Jul 13 2022 00:59:13 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
