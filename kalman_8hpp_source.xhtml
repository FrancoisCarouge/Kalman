<!-- HTML header for doxygen 1.9.6-->
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$langISO">
<head>
  <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=11" />
  <meta name="generator" content="Doxygen 1.9.4" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Kalman: /github/workspace/include/fcarouge/kalman.hpp Source File</title>
  <link href="tabs.css" rel="stylesheet" type="text/css" />
  <script type="text/javascript" src="jquery.js"></script>
  <script type="text/javascript" src="dynsections.js"></script>
  <link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
  <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
  $darkmode
  <link href="doxygen.css" rel="stylesheet" type="text/css" />
  <link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
  <!-- ... other metadata & script includes ... -->
  <script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
  <script type="text/javascript">
    DoxygenAwesomeDarkModeToggle.init()
  </script>
  <script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
  <script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
  </script>
  <script type="text/javascript" src="doxygen-awesome-paragraph-link.js"></script>
  <script type="text/javascript">
    DoxygenAwesomeParagraphLink.init()
  </script>
  <script type="text/javascript" src="doxygen-awesome-interactive-toc.js"></script>
  <script type="text/javascript">
    DoxygenAwesomeInteractiveToc.init()
  </script>
</head>
<body>
    <div id="top">
      <!-- do not remove this div, it is closed by doxygen! -->
      <div id="titlearea">
        <table cellspacing="0" cellpadding="0">
          <tbody>
            <tr id="projectrow">
              <td id="projectalign">
                <div id="projectname">Kalman
                  <span id="projectnumber">&#160;0.1.0</span>
                </div>
                <div id="projectbrief">Kalman Filter for C++</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- end header part --><!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kalman_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kalman.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kalman_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter for C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_KALMAN_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &quot;<a class="code" href="format_8hpp.xhtml">internal/format.hpp</a>&quot;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &quot;<a class="code" href="internal_2kalman_8hpp.xhtml">internal/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="preprocessor">#include &quot;<a class="code" href="utility_8hpp.xhtml">internal/utility.hpp</a>&quot;</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a> {</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#af07a5637ebbb4bd8c0244134151732ca">   58</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge.xhtml#af07a5637ebbb4bd8c0244134151732ca">empty_pack</a> = <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a990c3b3d2e7c4889c7f666cc8e82c503">internal::empty_pack</a>;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#aa5a28afb4550bbcbd55d875351de6e27">   61</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge.xhtml#aa5a28afb4550bbcbd55d875351de6e27">pack</a> = <a class="code hl_typedef" href="namespacefcarouge.xhtml#aa5a28afb4550bbcbd55d875351de6e27">internal::pack</a>&lt;Types...&gt;;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State = double, <span class="keyword">typename</span> Output = double,</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>          <span class="keyword">typename</span> Input = void, <span class="keyword">typename</span> Divide = std::divides&lt;void&gt;,</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>          <span class="keyword">typename</span> UpdateTypes = <a class="code hl_typedef" href="namespacefcarouge.xhtml#af07a5637ebbb4bd8c0244134151732ca">empty_pack</a>,</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>          <span class="keyword">typename</span> PredictionTypes = <a class="code hl_typedef" href="namespacefcarouge.xhtml#af07a5637ebbb4bd8c0244134151732ca">empty_pack</a>&gt;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml">  167</a></span><span class="keyword">class </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> final {</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a6341f1c65cfaa51580fe95fac790b6dc">  176</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a6341f1c65cfaa51580fe95fac790b6dc">implementation</a> = internal::kalman&lt;State, Output, Input, Divide,</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>                                          <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t&lt;UpdateTypes&gt;</a>,</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>                                          <a class="code hl_typedef" href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">internal::repack_t&lt;PredictionTypes&gt;</a>&gt;;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">  186</a></span>  <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a6341f1c65cfaa51580fe95fac790b6dc">implementation</a> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">  195</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> = <span class="keyword">typename</span> implementation::state;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#af56b8ad91ef0452ff3da4e94ce0b7436">  200</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af56b8ad91ef0452ff3da4e94ce0b7436">output</a> = <span class="keyword">typename</span> implementation::output;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">  205</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">input</a> = <span class="keyword">typename</span> implementation::input;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">  210</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a> = <span class="keyword">typename</span> implementation::estimate_uncertainty;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">  213</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a> = <span class="keyword">typename</span> implementation::process_uncertainty;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">  216</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a> = <span class="keyword">typename</span> implementation::output_uncertainty;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">  221</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a> = <span class="keyword">typename</span> implementation::state_transition;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">  226</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a> = <span class="keyword">typename</span> implementation::output_model;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">  233</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a> = <span class="keyword">typename</span> implementation::input_control;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab7895cfe42821ddfbe0f28b89f48baba">  236</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab7895cfe42821ddfbe0f28b89f48baba">gain</a> = <span class="keyword">typename</span> implementation::gain;</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a4defeafa4957fc2e247792fd0883776d">  239</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a4defeafa4957fc2e247792fd0883776d">innovation</a> = <span class="keyword">typename</span> implementation::innovation;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#adea589845c322523f9af114f5f500cba">  242</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#adea589845c322523f9af114f5f500cba">innovation_uncertainty</a> =</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>      <span class="keyword">typename</span> implementation::innovation_uncertainty;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a5a02dcd9ae659726a2593f2e3dd91f34">  253</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a5a02dcd9ae659726a2593f2e3dd91f34">kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ad2babc95183dbf7e9f4969d2edb9bee1">  264</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ad2babc95183dbf7e9f4969d2edb9bee1">kalman</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9870b7b78addbe1c9ab75cdd896f95e8">  276</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9870b7b78addbe1c9ab75cdd896f95e8">kalman</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span> = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a27dda59bc0e63d5691cfc50344999c4e">  290</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a27dda59bc0e63d5691cfc50344999c4e">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aa294a055b5e3a9568cfc7d9f2fb19b11">  306</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#aa294a055b5e3a9568cfc7d9f2fb19b11">operator=</a>(<a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>      -&gt; <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp; = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a432db2db2655d52094bae8d72559c936">  312</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a432db2db2655d52094bae8d72559c936">~kalman</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span> </div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span> </div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> &amp;;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> &amp;;</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afe87bffe9950ca5fbb77b3ef8b610dac">z</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af56b8ad91ef0452ff3da4e94ce0b7436">output</a> &amp;;</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span> </div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a75faf76f6d2e995276409a50a216f36b">u</a>() const</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>      -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">input</a> &amp;requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;);</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span> </div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span> </div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span> </div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">q</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">q</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span> </div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">q</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span> </div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">q</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">r</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">r</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span> </div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">r</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span> </div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">r</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span> </div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">f</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a> &amp;;</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">f</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a> &amp;;</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span> </div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">f</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span> </div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">f</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span> </div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">h</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a> &amp;;</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">h</a>() -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a> &amp;;</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span> </div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">h</a>(const auto &amp;value, const auto &amp;...values);</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span> </div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">h</a>(auto &amp;&amp;value, auto &amp;&amp;...values);</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span> </div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">g</a>() const</div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span>      -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a> &amp;requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;);</div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">g</a>()</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>      -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a> &amp;requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;);</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span> </div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">g</a>(const auto &amp;value, const auto &amp;...values)</div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span>    requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;);</div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span> </div>
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno">  628</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">g</a>(auto &amp;&amp;value, auto &amp;&amp;...values)</div>
<div class="line"><a id="l00629" name="l00629"></a><span class="lineno">  629</span>    requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;);</div>
<div class="line"><a id="l00630" name="l00630"></a><span class="lineno">  630</span> </div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a74e44ad09f9cfef290aa929c3cc9a7e9">k</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab7895cfe42821ddfbe0f28b89f48baba">gain</a> &amp;;</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span> </div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ae595d0ba1c0ede697b3669db0ff2dc20">y</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a4defeafa4957fc2e247792fd0883776d">innovation</a> &amp;;</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span> </div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span>  inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a366196a038db0f54b7322b29f1862be0">s</a>() const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#adea589845c322523f9af114f5f500cba">innovation_uncertainty</a> &amp;;</div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span> </div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41">transition</a>(const auto &amp;callable);</div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span> </div>
<div class="line"><a id="l00678" name="l00678"></a><span class="lineno">  678</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41">transition</a>(auto &amp;&amp;callable);</div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span> </div>
<div class="line"><a id="l00692" name="l00692"></a><span class="lineno">  692</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b">observation</a>(const auto &amp;callable);</div>
<div class="line"><a id="l00693" name="l00693"></a><span class="lineno">  693</span> </div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b">observation</a>(auto &amp;&amp;callable);</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span> </div>
<div class="line"><a id="l00709" name="l00709"></a><span class="lineno">  709</span> </div>
<div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span> </div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f">predict</a>(const auto &amp;...arguments);</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span> </div>
<div class="line"><a id="l00742" name="l00742"></a><span class="lineno">  742</span>  template &lt;std::<span class="keywordtype">size_t</span> Position&gt; inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f">predict</a>() const;</div>
<div class="line"><a id="l00743" name="l00743"></a><span class="lineno">  743</span> </div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno">  761</span>  inline constexpr <span class="keywordtype">void</span> <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f">update</a>(const auto &amp;...arguments);</div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span> </div>
<div class="line"><a id="l00774" name="l00774"></a><span class="lineno">  774</span>  template &lt;std::<span class="keywordtype">size_t</span> Position&gt; inline constexpr auto <a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f">update</a>() const;</div>
<div class="line"><a id="l00775" name="l00775"></a><span class="lineno">  775</span> </div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno">  777</span>};</div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span> </div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>template &lt;typename State, typename Output, typename Input, typename Divide,</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>          typename UpdateTypes, typename PredictionTypes&gt;</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span>[[nodiscard(&quot;The returned <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> estimate column <a class="code hl_typedef" href="namespacefcarouge_1_1benchmark_1_1anonymous__namespace_02eigen__predict__x1x_8cpp_03.xhtml#aafec824f2dcfe764a8b4c25afbe47df7">vector</a> X is unexpectedly &quot;</div>
<div class="line"><a id="l00782" name="l00782"></a><span class="lineno">  782</span>            &quot;discarded.&quot;)]] inline constexpr auto</div>
<div class="line"><a id="l00783" name="l00783"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">  783</a></span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>() const</div>
<div class="line"><a id="l00784" name="l00784"></a><span class="lineno">  784</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> &amp; {</div>
<div class="line"><a id="l00785" name="l00785"></a><span class="lineno">  785</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.x;</div>
<div class="line"><a id="l00786" name="l00786"></a><span class="lineno">  786</span>}</div>
<div class="line"><a id="l00787" name="l00787"></a><span class="lineno">  787</span> </div>
<div class="line"><a id="l00788" name="l00788"></a><span class="lineno">  788</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>[[nodiscard(<span class="stringliteral">&quot;The returned state estimate column vector X is unexpectedly &quot;</span></div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00792" name="l00792"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ad6c5038878226d41df38540eff2de8e1">  792</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::x</a>()</div>
<div class="line"><a id="l00793" name="l00793"></a><span class="lineno">  793</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a> &amp; {</div>
<div class="line"><a id="l00794" name="l00794"></a><span class="lineno">  794</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.x;</div>
<div class="line"><a id="l00795" name="l00795"></a><span class="lineno">  795</span>}</div>
<div class="line"><a id="l00796" name="l00796"></a><span class="lineno">  796</span> </div>
<div class="line"><a id="l00797" name="l00797"></a><span class="lineno">  797</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00798" name="l00798"></a><span class="lineno">  798</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00799" name="l00799"></a><span class="lineno">  799</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00800" name="l00800"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#affc713c9d1b380f2200587dae227f9e6">  800</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::x</a>(</div>
<div class="line"><a id="l00801" name="l00801"></a><span class="lineno">  801</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l00802" name="l00802"></a><span class="lineno">  802</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a>{value, values...});</div>
<div class="line"><a id="l00803" name="l00803"></a><span class="lineno">  803</span>}</div>
<div class="line"><a id="l00804" name="l00804"></a><span class="lineno">  804</span> </div>
<div class="line"><a id="l00805" name="l00805"></a><span class="lineno">  805</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00806" name="l00806"></a><span class="lineno">  806</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00807" name="l00807"></a><span class="lineno">  807</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00808" name="l00808"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a0a5061f4ebd7062cdee276f62a5e5cba">  808</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::x</a>(</div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.x = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">state</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span>                             std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>}</div>
<div class="line"><a id="l00813" name="l00813"></a><span class="lineno">  813</span> </div>
<div class="line"><a id="l00814" name="l00814"></a><span class="lineno">  814</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00815" name="l00815"></a><span class="lineno">  815</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00816" name="l00816"></a><span class="lineno">  816</span>[[nodiscard(<span class="stringliteral">&quot;The returned observation column vector Z is unexpectedly &quot;</span></div>
<div class="line"><a id="l00817" name="l00817"></a><span class="lineno">  817</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00818" name="l00818"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#afe87bffe9950ca5fbb77b3ef8b610dac">  818</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afe87bffe9950ca5fbb77b3ef8b610dac">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::z</a>() const</div>
<div class="line"><a id="l00819" name="l00819"></a><span class="lineno">  819</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af56b8ad91ef0452ff3da4e94ce0b7436">output</a> &amp; {</div>
<div class="line"><a id="l00820" name="l00820"></a><span class="lineno">  820</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.z;</div>
<div class="line"><a id="l00821" name="l00821"></a><span class="lineno">  821</span>}</div>
<div class="line"><a id="l00822" name="l00822"></a><span class="lineno">  822</span> </div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00824" name="l00824"></a><span class="lineno">  824</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span>[[nodiscard(<span class="stringliteral">&quot;The returned control column vector U is unexpectedly &quot;</span></div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00827" name="l00827"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a75faf76f6d2e995276409a50a216f36b">  827</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a75faf76f6d2e995276409a50a216f36b">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::u</a>() const</div>
<div class="line"><a id="l00828" name="l00828"></a><span class="lineno">  828</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">input</a> &amp;requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;) {</div>
<div class="line"><a id="l00829" name="l00829"></a><span class="lineno">  829</span>                      <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.u;</div>
<div class="line"><a id="l00830" name="l00830"></a><span class="lineno">  830</span>                    }</div>
<div class="line"><a id="l00831" name="l00831"></a><span class="lineno">  831</span> </div>
<div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00834" name="l00834"></a><span class="lineno">  834</span>[[nodiscard(<span class="stringliteral">&quot;The returned estimated covariance matrix P is unexpectedly &quot;</span></div>
<div class="line"><a id="l00835" name="l00835"></a><span class="lineno">  835</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;State, Output, Input,</div>
<div class="line"><a id="l00836" name="l00836"></a><span class="lineno">  836</span>                                                         Divide, UpdateTypes,</div>
<div class="line"><a id="l00837" name="l00837"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">  837</a></span>                                                         PredictionTypes&gt;<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">::p</a>()</div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno">  838</span>    const -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.p;</div>
<div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>}</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span> </div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00843" name="l00843"></a><span class="lineno">  843</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00844" name="l00844"></a><span class="lineno">  844</span>[[nodiscard(<span class="stringliteral">&quot;The returned estimated covariance matrix P is unexpectedly &quot;</span></div>
<div class="line"><a id="l00845" name="l00845"></a><span class="lineno">  845</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00846" name="l00846"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9b8b82c116c5d0f6bda1be4906d74fb3">  846</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::p</a>()</div>
<div class="line"><a id="l00847" name="l00847"></a><span class="lineno">  847</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.p;</div>
<div class="line"><a id="l00849" name="l00849"></a><span class="lineno">  849</span>}</div>
<div class="line"><a id="l00850" name="l00850"></a><span class="lineno">  850</span> </div>
<div class="line"><a id="l00851" name="l00851"></a><span class="lineno">  851</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00852" name="l00852"></a><span class="lineno">  852</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00853" name="l00853"></a><span class="lineno">  853</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00854" name="l00854"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a6943317c8507c0ac7f42810e43ecfa84">  854</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::p</a>(</div>
<div class="line"><a id="l00855" name="l00855"></a><span class="lineno">  855</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l00856" name="l00856"></a><span class="lineno">  856</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.p = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a>{value, values...});</div>
<div class="line"><a id="l00857" name="l00857"></a><span class="lineno">  857</span>}</div>
<div class="line"><a id="l00858" name="l00858"></a><span class="lineno">  858</span> </div>
<div class="line"><a id="l00859" name="l00859"></a><span class="lineno">  859</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00860" name="l00860"></a><span class="lineno">  860</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00861" name="l00861"></a><span class="lineno">  861</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00862" name="l00862"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aea3eae445c7d6e953c463aca74d47e1f">  862</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::p</a>(</div>
<div class="line"><a id="l00863" name="l00863"></a><span class="lineno">  863</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l00864" name="l00864"></a><span class="lineno">  864</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.p = std::move(</div>
<div class="line"><a id="l00865" name="l00865"></a><span class="lineno">  865</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">estimate_uncertainty</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00866" name="l00866"></a><span class="lineno">  866</span>                           std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00867" name="l00867"></a><span class="lineno">  867</span>}</div>
<div class="line"><a id="l00868" name="l00868"></a><span class="lineno">  868</span> </div>
<div class="line"><a id="l00869" name="l00869"></a><span class="lineno">  869</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00870" name="l00870"></a><span class="lineno">  870</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00871" name="l00871"></a><span class="lineno">  871</span>[[nodiscard(<span class="stringliteral">&quot;The returned process noise covariance matrix Q is unexpectedly &quot;</span></div>
<div class="line"><a id="l00872" name="l00872"></a><span class="lineno">  872</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00873" name="l00873"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">  873</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::q</a>() const</div>
<div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.q;</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span>}</div>
<div class="line"><a id="l00877" name="l00877"></a><span class="lineno">  877</span> </div>
<div class="line"><a id="l00878" name="l00878"></a><span class="lineno">  878</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00879" name="l00879"></a><span class="lineno">  879</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00880" name="l00880"></a><span class="lineno">  880</span>[[nodiscard(<span class="stringliteral">&quot;The returned process noise covariance matrix Q is unexpectedly &quot;</span></div>
<div class="line"><a id="l00881" name="l00881"></a><span class="lineno">  881</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00882" name="l00882"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1cb2e62aae0d3cca44269aac7e36cdc1">  882</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::q</a>()</div>
<div class="line"><a id="l00883" name="l00883"></a><span class="lineno">  883</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00884" name="l00884"></a><span class="lineno">  884</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.q;</div>
<div class="line"><a id="l00885" name="l00885"></a><span class="lineno">  885</span>}</div>
<div class="line"><a id="l00886" name="l00886"></a><span class="lineno">  886</span> </div>
<div class="line"><a id="l00887" name="l00887"></a><span class="lineno">  887</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00888" name="l00888"></a><span class="lineno">  888</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00889" name="l00889"></a><span class="lineno">  889</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00890" name="l00890"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a572e6899627301526b3b61b75fd5c642">  890</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::q</a>(</div>
<div class="line"><a id="l00891" name="l00891"></a><span class="lineno">  891</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l00892" name="l00892"></a><span class="lineno">  892</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a>&gt;) {</div>
<div class="line"><a id="l00893" name="l00893"></a><span class="lineno">  893</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.q = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a>{value, values...});</div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00895" name="l00895"></a><span class="lineno">  895</span>    <span class="keyword">using </span>noise_process_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_process_q);</div>
<div class="line"><a id="l00896" name="l00896"></a><span class="lineno">  896</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_process_q =</div>
<div class="line"><a id="l00897" name="l00897"></a><span class="lineno">  897</span>        std::move(noise_process_function{value, values...});</div>
<div class="line"><a id="l00898" name="l00898"></a><span class="lineno">  898</span>  }</div>
<div class="line"><a id="l00899" name="l00899"></a><span class="lineno">  899</span>}</div>
<div class="line"><a id="l00900" name="l00900"></a><span class="lineno">  900</span> </div>
<div class="line"><a id="l00901" name="l00901"></a><span class="lineno">  901</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00902" name="l00902"></a><span class="lineno">  902</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00903" name="l00903"></a><span class="lineno">  903</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00904" name="l00904"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a68940e921fc1c4041c2543ff42c7e21e">  904</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::q</a>(</div>
<div class="line"><a id="l00905" name="l00905"></a><span class="lineno">  905</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l00906" name="l00906"></a><span class="lineno">  906</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a>&gt;) {</div>
<div class="line"><a id="l00907" name="l00907"></a><span class="lineno">  907</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.q = std::move(</div>
<div class="line"><a id="l00908" name="l00908"></a><span class="lineno">  908</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">process_uncertainty</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00909" name="l00909"></a><span class="lineno">  909</span>                            std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00910" name="l00910"></a><span class="lineno">  910</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00911" name="l00911"></a><span class="lineno">  911</span>    <span class="keyword">using </span>noise_process_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_process_q);</div>
<div class="line"><a id="l00912" name="l00912"></a><span class="lineno">  912</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_process_q = std::move(</div>
<div class="line"><a id="l00913" name="l00913"></a><span class="lineno">  913</span>        noise_process_function{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00914" name="l00914"></a><span class="lineno">  914</span>                               std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00915" name="l00915"></a><span class="lineno">  915</span>  }</div>
<div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span>}</div>
<div class="line"><a id="l00917" name="l00917"></a><span class="lineno">  917</span> </div>
<div class="line"><a id="l00918" name="l00918"></a><span class="lineno">  918</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00919" name="l00919"></a><span class="lineno">  919</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00920" name="l00920"></a><span class="lineno">  920</span>[[nodiscard(<span class="stringliteral">&quot;The returned observation noise covariance matrix R is &quot;</span></div>
<div class="line"><a id="l00921" name="l00921"></a><span class="lineno">  921</span>            <span class="stringliteral">&quot;unexpectedly discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00922" name="l00922"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">  922</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::r</a>() const</div>
<div class="line"><a id="l00923" name="l00923"></a><span class="lineno">  923</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00924" name="l00924"></a><span class="lineno">  924</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.r;</div>
<div class="line"><a id="l00925" name="l00925"></a><span class="lineno">  925</span>}</div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno">  926</span> </div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno">  927</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00928" name="l00928"></a><span class="lineno">  928</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span>[[nodiscard(<span class="stringliteral">&quot;The returned observation noise covariance matrix R is &quot;</span></div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span>            <span class="stringliteral">&quot;unexpectedly discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7e1eba9eca64dcbe6dafff106d8f2288">  931</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::r</a>()</div>
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno">  932</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a> &amp; {</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.r;</div>
<div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>}</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span> </div>
<div class="line"><a id="l00936" name="l00936"></a><span class="lineno">  936</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00937" name="l00937"></a><span class="lineno">  937</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00938" name="l00938"></a><span class="lineno">  938</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00939" name="l00939"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a8b2ed49c4ebbb1d1bfa7028f6835f301">  939</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::r</a>(</div>
<div class="line"><a id="l00940" name="l00940"></a><span class="lineno">  940</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l00941" name="l00941"></a><span class="lineno">  941</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a>&gt;) {</div>
<div class="line"><a id="l00942" name="l00942"></a><span class="lineno">  942</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.r = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a>{value, values...});</div>
<div class="line"><a id="l00943" name="l00943"></a><span class="lineno">  943</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00944" name="l00944"></a><span class="lineno">  944</span>    <span class="keyword">using </span>noise_observation_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_observation_r);</div>
<div class="line"><a id="l00945" name="l00945"></a><span class="lineno">  945</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_observation_r =</div>
<div class="line"><a id="l00946" name="l00946"></a><span class="lineno">  946</span>        std::move(noise_observation_function{value, values...});</div>
<div class="line"><a id="l00947" name="l00947"></a><span class="lineno">  947</span>  }</div>
<div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span>}</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span> </div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00953" name="l00953"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a52d4518585f2dd3ae3e4fc2b5effce13">  953</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::r</a>(</div>
<div class="line"><a id="l00954" name="l00954"></a><span class="lineno">  954</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l00955" name="l00955"></a><span class="lineno">  955</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a>&gt;) {</div>
<div class="line"><a id="l00956" name="l00956"></a><span class="lineno">  956</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.r = std::move(</div>
<div class="line"><a id="l00957" name="l00957"></a><span class="lineno">  957</span>        <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">output_uncertainty</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00958" name="l00958"></a><span class="lineno">  958</span>                           std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00959" name="l00959"></a><span class="lineno">  959</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00960" name="l00960"></a><span class="lineno">  960</span>    <span class="keyword">using </span>noise_observation_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_observation_r);</div>
<div class="line"><a id="l00961" name="l00961"></a><span class="lineno">  961</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.noise_observation_r = std::move(</div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno">  962</span>        noise_observation_function{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span>                                   std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span>  }</div>
<div class="line"><a id="l00965" name="l00965"></a><span class="lineno">  965</span>}</div>
<div class="line"><a id="l00966" name="l00966"></a><span class="lineno">  966</span> </div>
<div class="line"><a id="l00967" name="l00967"></a><span class="lineno">  967</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00968" name="l00968"></a><span class="lineno">  968</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span>[[nodiscard(<span class="stringliteral">&quot;The returned state transition matrix F is unexpectedly &quot;</span></div>
<div class="line"><a id="l00970" name="l00970"></a><span class="lineno">  970</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00971" name="l00971"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">  971</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::f</a>() const</div>
<div class="line"><a id="l00972" name="l00972"></a><span class="lineno">  972</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a> &amp; {</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.f;</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span>}</div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span> </div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno">  977</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00978" name="l00978"></a><span class="lineno">  978</span>[[nodiscard(<span class="stringliteral">&quot;The returned state transition matrix F is unexpectedly &quot;</span></div>
<div class="line"><a id="l00979" name="l00979"></a><span class="lineno">  979</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00980" name="l00980"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a07962db146b254062900b92e42206161">  980</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::f</a>()</div>
<div class="line"><a id="l00981" name="l00981"></a><span class="lineno">  981</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a> &amp; {</div>
<div class="line"><a id="l00982" name="l00982"></a><span class="lineno">  982</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.f;</div>
<div class="line"><a id="l00983" name="l00983"></a><span class="lineno">  983</span>}</div>
<div class="line"><a id="l00984" name="l00984"></a><span class="lineno">  984</span> </div>
<div class="line"><a id="l00985" name="l00985"></a><span class="lineno">  985</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a423332ade623ff83c56ad8eb96689897">  988</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::f</a>(</div>
<div class="line"><a id="l00989" name="l00989"></a><span class="lineno">  989</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a>&gt;) {</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.f = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a>{value, values...});</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00993" name="l00993"></a><span class="lineno">  993</span>    <span class="keyword">using </span>transition_state_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_state_f);</div>
<div class="line"><a id="l00994" name="l00994"></a><span class="lineno">  994</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_state_f =</div>
<div class="line"><a id="l00995" name="l00995"></a><span class="lineno">  995</span>        std::move(transition_state_function{value, values...});</div>
<div class="line"><a id="l00996" name="l00996"></a><span class="lineno">  996</span>  }</div>
<div class="line"><a id="l00997" name="l00997"></a><span class="lineno">  997</span>}</div>
<div class="line"><a id="l00998" name="l00998"></a><span class="lineno">  998</span> </div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno">  999</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01001" name="l01001"></a><span class="lineno"> 1001</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01002" name="l01002"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1049e1ad56e1f3300c27f9f16b253a5f"> 1002</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::f</a>(</div>
<div class="line"><a id="l01003" name="l01003"></a><span class="lineno"> 1003</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a>&gt;) {</div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.f =</div>
<div class="line"><a id="l01006" name="l01006"></a><span class="lineno"> 1006</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">state_transition</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01007" name="l01007"></a><span class="lineno"> 1007</span>                                   std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01008" name="l01008"></a><span class="lineno"> 1008</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01009" name="l01009"></a><span class="lineno"> 1009</span>    <span class="keyword">using </span>transition_state_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_state_f);</div>
<div class="line"><a id="l01010" name="l01010"></a><span class="lineno"> 1010</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_state_f = std::move(</div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"> 1011</span>        transition_state_function{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span>                                  std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01013" name="l01013"></a><span class="lineno"> 1013</span>  }</div>
<div class="line"><a id="l01014" name="l01014"></a><span class="lineno"> 1014</span>}</div>
<div class="line"><a id="l01015" name="l01015"></a><span class="lineno"> 1015</span> </div>
<div class="line"><a id="l01016" name="l01016"></a><span class="lineno"> 1016</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01017" name="l01017"></a><span class="lineno"> 1017</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01018" name="l01018"></a><span class="lineno"> 1018</span>[[nodiscard(<span class="stringliteral">&quot;The returned observation transition matrix H is unexpectedly &quot;</span></div>
<div class="line"><a id="l01019" name="l01019"></a><span class="lineno"> 1019</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98"> 1020</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::h</a>() const</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a> &amp; {</div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.h;</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>}</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span> </div>
<div class="line"><a id="l01025" name="l01025"></a><span class="lineno"> 1025</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01026" name="l01026"></a><span class="lineno"> 1026</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01027" name="l01027"></a><span class="lineno"> 1027</span>[[nodiscard(<span class="stringliteral">&quot;The returned observation transition matrix H is unexpectedly &quot;</span></div>
<div class="line"><a id="l01028" name="l01028"></a><span class="lineno"> 1028</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01029" name="l01029"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a7fe9446253d84cd6b45128fa9652d35d"> 1029</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::h</a>()</div>
<div class="line"><a id="l01030" name="l01030"></a><span class="lineno"> 1030</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a> &amp; {</div>
<div class="line"><a id="l01031" name="l01031"></a><span class="lineno"> 1031</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.h;</div>
<div class="line"><a id="l01032" name="l01032"></a><span class="lineno"> 1032</span>}</div>
<div class="line"><a id="l01033" name="l01033"></a><span class="lineno"> 1033</span> </div>
<div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"> 1036</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ad491fbf0c333c7da89abfa58a4e2fc9c"> 1037</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::h</a>(</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values) {</div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a>&gt;) {</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.h = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a>{value, values...});</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span>    <span class="keyword">using </span>observation_state_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation_state_h);</div>
<div class="line"><a id="l01043" name="l01043"></a><span class="lineno"> 1043</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation_state_h =</div>
<div class="line"><a id="l01044" name="l01044"></a><span class="lineno"> 1044</span>        std::move(observation_state_function{value, values...});</div>
<div class="line"><a id="l01045" name="l01045"></a><span class="lineno"> 1045</span>  }</div>
<div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span>}</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span> </div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"> 1048</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01049" name="l01049"></a><span class="lineno"> 1049</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01050" name="l01050"></a><span class="lineno"> 1050</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01051" name="l01051"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ac608d593a19dc336ab5440c631033a82"> 1051</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::h</a>(</div>
<div class="line"><a id="l01052" name="l01052"></a><span class="lineno"> 1052</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values) {</div>
<div class="line"><a id="l01053" name="l01053"></a><span class="lineno"> 1053</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a>&gt;) {</div>
<div class="line"><a id="l01054" name="l01054"></a><span class="lineno"> 1054</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.h =</div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"> 1055</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">output_model</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span>                               std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>    <span class="keyword">using </span>observation_state_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation_state_h);</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation_state_h = std::move(</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>        observation_state_function{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01061" name="l01061"></a><span class="lineno"> 1061</span>                                   std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01062" name="l01062"></a><span class="lineno"> 1062</span>  }</div>
<div class="line"><a id="l01063" name="l01063"></a><span class="lineno"> 1063</span>}</div>
<div class="line"><a id="l01064" name="l01064"></a><span class="lineno"> 1064</span> </div>
<div class="line"><a id="l01065" name="l01065"></a><span class="lineno"> 1065</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01066" name="l01066"></a><span class="lineno"> 1066</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01067" name="l01067"></a><span class="lineno"> 1067</span>[[nodiscard(<span class="stringliteral">&quot;The returned control transition matrix G is unexpectedly &quot;</span></div>
<div class="line"><a id="l01068" name="l01068"></a><span class="lineno"> 1068</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01069" name="l01069"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7"> 1069</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::g</a>() const</div>
<div class="line"><a id="l01070" name="l01070"></a><span class="lineno"> 1070</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a> &amp;requires(not std::is_same_v&lt;Input, <span class="keywordtype">void</span>&gt;) {</div>
<div class="line"><a id="l01071" name="l01071"></a><span class="lineno"> 1071</span>                              <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.g;</div>
<div class="line"><a id="l01072" name="l01072"></a><span class="lineno"> 1072</span>                            }</div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"> 1073</span> </div>
<div class="line"><a id="l01074" name="l01074"></a><span class="lineno"> 1074</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01075" name="l01075"></a><span class="lineno"> 1075</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01076" name="l01076"></a><span class="lineno"> 1076</span>[[nodiscard(<span class="stringliteral">&quot;The returned control transition matrix G is unexpectedly &quot;</span></div>
<div class="line"><a id="l01077" name="l01077"></a><span class="lineno"> 1077</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;State, Output, Input,</div>
<div class="line"><a id="l01078" name="l01078"></a><span class="lineno"> 1078</span>                                                         Divide, UpdateTypes,</div>
<div class="line"><a id="l01079" name="l01079"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a88a19fdd1af2a50cf4f510be7d98bb13"> 1079</a></span>                                                         PredictionTypes&gt;<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">::g</a>()</div>
<div class="line"><a id="l01080" name="l01080"></a><span class="lineno"> 1080</span>    -&gt; <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a> &amp;<span class="keyword">requires</span>(not std::is_same_v&lt;Input, void&gt;) {</div>
<div class="line"><a id="l01081" name="l01081"></a><span class="lineno"> 1081</span>                        <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.g;</div>
<div class="line"><a id="l01082" name="l01082"></a><span class="lineno"> 1082</span>                      }</div>
<div class="line"><a id="l01083" name="l01083"></a><span class="lineno"> 1083</span> </div>
<div class="line"><a id="l01084" name="l01084"></a><span class="lineno"> 1084</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01085" name="l01085"></a><span class="lineno"> 1085</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01086" name="l01086"></a><span class="lineno"> 1086</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt;State, Output, Input, Divide, UpdateTypes,</div>
<div class="line"><a id="l01087" name="l01087"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a594760bcd19296b31308616efc680f92"> 1087</a></span>                             PredictionTypes&gt;<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">::g</a>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;value,</div>
<div class="line"><a id="l01088" name="l01088"></a><span class="lineno"> 1088</span>                                                 <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...values)</div>
<div class="line"><a id="l01089" name="l01089"></a><span class="lineno"> 1089</span>  <span class="keyword">requires</span>(not std::is_same_v&lt;Input, void&gt;)</div>
<div class="line"><a id="l01090" name="l01090"></a><span class="lineno"> 1090</span>{</div>
<div class="line"><a id="l01091" name="l01091"></a><span class="lineno"> 1091</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a>&gt;) {</div>
<div class="line"><a id="l01092" name="l01092"></a><span class="lineno"> 1092</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.g = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a>{value, values...});</div>
<div class="line"><a id="l01093" name="l01093"></a><span class="lineno"> 1093</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01094" name="l01094"></a><span class="lineno"> 1094</span>    <span class="keyword">using </span>transition_control_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_control_g);</div>
<div class="line"><a id="l01095" name="l01095"></a><span class="lineno"> 1095</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_control_g =</div>
<div class="line"><a id="l01096" name="l01096"></a><span class="lineno"> 1096</span>        std::move(transition_control_function{value, values...});</div>
<div class="line"><a id="l01097" name="l01097"></a><span class="lineno"> 1097</span>  }</div>
<div class="line"><a id="l01098" name="l01098"></a><span class="lineno"> 1098</span>}</div>
<div class="line"><a id="l01099" name="l01099"></a><span class="lineno"> 1099</span> </div>
<div class="line"><a id="l01100" name="l01100"></a><span class="lineno"> 1100</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01101" name="l01101"></a><span class="lineno"> 1101</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01102" name="l01102"></a><span class="lineno"> 1102</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01103" name="l01103"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a283bc43fff9ded2744d0649a353896da"> 1103</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::g</a>(</div>
<div class="line"><a id="l01104" name="l01104"></a><span class="lineno"> 1104</span>    <span class="keyword">auto</span> &amp;&amp;value, <span class="keyword">auto</span> &amp;&amp;...values)</div>
<div class="line"><a id="l01105" name="l01105"></a><span class="lineno"> 1105</span>  <span class="keyword">requires</span>(not std::is_same_v&lt;Input, void&gt;)</div>
<div class="line"><a id="l01106" name="l01106"></a><span class="lineno"> 1106</span>{</div>
<div class="line"><a id="l01107" name="l01107"></a><span class="lineno"> 1107</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_convertible_v&lt;<span class="keyword">decltype</span>(value), <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a>&gt;) {</div>
<div class="line"><a id="l01108" name="l01108"></a><span class="lineno"> 1108</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.g =</div>
<div class="line"><a id="l01109" name="l01109"></a><span class="lineno"> 1109</span>        std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">input_control</a>{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01110" name="l01110"></a><span class="lineno"> 1110</span>                                std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01111" name="l01111"></a><span class="lineno"> 1111</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l01112" name="l01112"></a><span class="lineno"> 1112</span>    <span class="keyword">using </span>transition_control_function = <span class="keyword">decltype</span>(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_control_g);</div>
<div class="line"><a id="l01113" name="l01113"></a><span class="lineno"> 1113</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition_control_g = std::move(</div>
<div class="line"><a id="l01114" name="l01114"></a><span class="lineno"> 1114</span>        transition_control_function{std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01115" name="l01115"></a><span class="lineno"> 1115</span>                                    std::forward&lt;decltype(values)&gt;(values)...});</div>
<div class="line"><a id="l01116" name="l01116"></a><span class="lineno"> 1116</span>  }</div>
<div class="line"><a id="l01117" name="l01117"></a><span class="lineno"> 1117</span>}</div>
<div class="line"><a id="l01118" name="l01118"></a><span class="lineno"> 1118</span> </div>
<div class="line"><a id="l01119" name="l01119"></a><span class="lineno"> 1119</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01120" name="l01120"></a><span class="lineno"> 1120</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01121" name="l01121"></a><span class="lineno"> 1121</span>[[nodiscard(<span class="stringliteral">&quot;The returned gain matrix K is unexpectedly &quot;</span></div>
<div class="line"><a id="l01122" name="l01122"></a><span class="lineno"> 1122</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01123" name="l01123"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a74e44ad09f9cfef290aa929c3cc9a7e9"> 1123</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a74e44ad09f9cfef290aa929c3cc9a7e9">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::k</a>() const</div>
<div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ab7895cfe42821ddfbe0f28b89f48baba">gain</a> &amp; {</div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.k;</div>
<div class="line"><a id="l01126" name="l01126"></a><span class="lineno"> 1126</span>}</div>
<div class="line"><a id="l01127" name="l01127"></a><span class="lineno"> 1127</span> </div>
<div class="line"><a id="l01128" name="l01128"></a><span class="lineno"> 1128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01129" name="l01129"></a><span class="lineno"> 1129</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01130" name="l01130"></a><span class="lineno"> 1130</span>[[nodiscard(<span class="stringliteral">&quot;The returned innovation column vector Y is unexpectedly &quot;</span></div>
<div class="line"><a id="l01131" name="l01131"></a><span class="lineno"> 1131</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01132" name="l01132"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ae595d0ba1c0ede697b3669db0ff2dc20"> 1132</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ae595d0ba1c0ede697b3669db0ff2dc20">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::y</a>() const</div>
<div class="line"><a id="l01133" name="l01133"></a><span class="lineno"> 1133</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a4defeafa4957fc2e247792fd0883776d">innovation</a> &amp; {</div>
<div class="line"><a id="l01134" name="l01134"></a><span class="lineno"> 1134</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.y;</div>
<div class="line"><a id="l01135" name="l01135"></a><span class="lineno"> 1135</span>}</div>
<div class="line"><a id="l01136" name="l01136"></a><span class="lineno"> 1136</span> </div>
<div class="line"><a id="l01137" name="l01137"></a><span class="lineno"> 1137</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01138" name="l01138"></a><span class="lineno"> 1138</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"> 1139</span>[[nodiscard(<span class="stringliteral">&quot;The returned innovation uncertainty matrix S is unexpectedly &quot;</span></div>
<div class="line"><a id="l01140" name="l01140"></a><span class="lineno"> 1140</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01141" name="l01141"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a366196a038db0f54b7322b29f1862be0"> 1141</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a366196a038db0f54b7322b29f1862be0">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::s</a>() const</div>
<div class="line"><a id="l01142" name="l01142"></a><span class="lineno"> 1142</span>    -&gt; const <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#adea589845c322523f9af114f5f500cba">innovation_uncertainty</a> &amp; {</div>
<div class="line"><a id="l01143" name="l01143"></a><span class="lineno"> 1143</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.s;</div>
<div class="line"><a id="l01144" name="l01144"></a><span class="lineno"> 1144</span>}</div>
<div class="line"><a id="l01145" name="l01145"></a><span class="lineno"> 1145</span> </div>
<div class="line"><a id="l01146" name="l01146"></a><span class="lineno"> 1146</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01147" name="l01147"></a><span class="lineno"> 1147</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01148" name="l01148"></a><span class="lineno"> 1148</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01149" name="l01149"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41"> 1149</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::transition</a>(</div>
<div class="line"><a id="l01150" name="l01150"></a><span class="lineno"> 1150</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) {</div>
<div class="line"><a id="l01151" name="l01151"></a><span class="lineno"> 1151</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition = callable;</div>
<div class="line"><a id="l01152" name="l01152"></a><span class="lineno"> 1152</span>}</div>
<div class="line"><a id="l01153" name="l01153"></a><span class="lineno"> 1153</span> </div>
<div class="line"><a id="l01154" name="l01154"></a><span class="lineno"> 1154</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01155" name="l01155"></a><span class="lineno"> 1155</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01156" name="l01156"></a><span class="lineno"> 1156</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01157" name="l01157"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a9b08ea814d5e059fe8cdc1a65f7f80b8"> 1157</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::transition</a>(</div>
<div class="line"><a id="l01158" name="l01158"></a><span class="lineno"> 1158</span>    <span class="keyword">auto</span> &amp;&amp;callable) {</div>
<div class="line"><a id="l01159" name="l01159"></a><span class="lineno"> 1159</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.transition = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01160" name="l01160"></a><span class="lineno"> 1160</span>}</div>
<div class="line"><a id="l01161" name="l01161"></a><span class="lineno"> 1161</span> </div>
<div class="line"><a id="l01162" name="l01162"></a><span class="lineno"> 1162</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01163" name="l01163"></a><span class="lineno"> 1163</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01164" name="l01164"></a><span class="lineno"> 1164</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01165" name="l01165"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b"> 1165</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::observation</a>(</div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"> 1166</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;callable) {</div>
<div class="line"><a id="l01167" name="l01167"></a><span class="lineno"> 1167</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation = callable;</div>
<div class="line"><a id="l01168" name="l01168"></a><span class="lineno"> 1168</span>}</div>
<div class="line"><a id="l01169" name="l01169"></a><span class="lineno"> 1169</span> </div>
<div class="line"><a id="l01170" name="l01170"></a><span class="lineno"> 1170</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01171" name="l01171"></a><span class="lineno"> 1171</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01172" name="l01172"></a><span class="lineno"> 1172</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01173" name="l01173"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#aaf4cc3418fdf64a4c7ab235714d19494"> 1173</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::observation</a>(</div>
<div class="line"><a id="l01174" name="l01174"></a><span class="lineno"> 1174</span>    <span class="keyword">auto</span> &amp;&amp;callable) {</div>
<div class="line"><a id="l01175" name="l01175"></a><span class="lineno"> 1175</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.observation = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l01176" name="l01176"></a><span class="lineno"> 1176</span>}</div>
<div class="line"><a id="l01177" name="l01177"></a><span class="lineno"> 1177</span> </div>
<div class="line"><a id="l01178" name="l01178"></a><span class="lineno"> 1178</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01179" name="l01179"></a><span class="lineno"> 1179</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01180" name="l01180"></a><span class="lineno"> 1180</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01181" name="l01181"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a2697eb6865282a481107ec3aa4d42af5"> 1181</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::update</a>(</div>
<div class="line"><a id="l01182" name="l01182"></a><span class="lineno"> 1182</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...arguments) {</div>
<div class="line"><a id="l01183" name="l01183"></a><span class="lineno"> 1183</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.update(arguments...);</div>
<div class="line"><a id="l01184" name="l01184"></a><span class="lineno"> 1184</span>}</div>
<div class="line"><a id="l01185" name="l01185"></a><span class="lineno"> 1185</span> </div>
<div class="line"><a id="l01186" name="l01186"></a><span class="lineno"> 1186</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01187" name="l01187"></a><span class="lineno"> 1187</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01188" name="l01188"></a><span class="lineno"> 1188</span><span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Position&gt;</div>
<div class="line"><a id="l01189" name="l01189"></a><span class="lineno"> 1189</span>[[nodiscard(<span class="stringliteral">&quot;The returned update argument is unexpectedly &quot;</span></div>
<div class="line"><a id="l01190" name="l01190"></a><span class="lineno"> 1190</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01191" name="l01191"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f"> 1191</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::update</a>()<span class="keyword"></span></div>
<div class="line"><a id="l01192" name="l01192"></a><span class="lineno"> 1192</span><span class="keyword">    const </span>{</div>
<div class="line"><a id="l01193" name="l01193"></a><span class="lineno"> 1193</span>  <span class="keywordflow">return</span> std::get&lt;Position&gt;(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.update_arguments);</div>
<div class="line"><a id="l01194" name="l01194"></a><span class="lineno"> 1194</span>}</div>
<div class="line"><a id="l01195" name="l01195"></a><span class="lineno"> 1195</span> </div>
<div class="line"><a id="l01196" name="l01196"></a><span class="lineno"> 1196</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01197" name="l01197"></a><span class="lineno"> 1197</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01198" name="l01198"></a><span class="lineno"> 1198</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span></div>
<div class="line"><a id="l01199" name="l01199"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56"> 1199</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::predict</a>(</div>
<div class="line"><a id="l01200" name="l01200"></a><span class="lineno"> 1200</span>    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;...arguments) {</div>
<div class="line"><a id="l01201" name="l01201"></a><span class="lineno"> 1201</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.predict(arguments...);</div>
<div class="line"><a id="l01202" name="l01202"></a><span class="lineno"> 1202</span>}</div>
<div class="line"><a id="l01203" name="l01203"></a><span class="lineno"> 1203</span> </div>
<div class="line"><a id="l01204" name="l01204"></a><span class="lineno"> 1204</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> State, <span class="keyword">typename</span> Output, <span class="keyword">typename</span> Input, <span class="keyword">typename</span> Divide,</div>
<div class="line"><a id="l01205" name="l01205"></a><span class="lineno"> 1205</span>          <span class="keyword">typename</span> UpdateTypes, <span class="keyword">typename</span> PredictionTypes&gt;</div>
<div class="line"><a id="l01206" name="l01206"></a><span class="lineno"> 1206</span><span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Position&gt;</div>
<div class="line"><a id="l01207" name="l01207"></a><span class="lineno"> 1207</span>[[nodiscard(<span class="stringliteral">&quot;The returned prediction argument is unexpectedly &quot;</span></div>
<div class="line"><a id="l01208" name="l01208"></a><span class="lineno"> 1208</span>            <span class="stringliteral">&quot;discarded.&quot;</span>)]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l01209" name="l01209"></a><span class="lineno"><a class="line" href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f"> 1209</a></span><a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f">kalman&lt;State, Output, Input, Divide, UpdateTypes, PredictionTypes&gt;::predict</a>()<span class="keyword"></span></div>
<div class="line"><a id="l01210" name="l01210"></a><span class="lineno"> 1210</span><span class="keyword">    const </span>{</div>
<div class="line"><a id="l01211" name="l01211"></a><span class="lineno"> 1211</span>  <span class="keywordflow">return</span> std::get&lt;Position&gt;(<a class="code hl_variable" href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">filter</a>.prediction_arguments);</div>
<div class="line"><a id="l01212" name="l01212"></a><span class="lineno"> 1212</span>}</div>
<div class="line"><a id="l01213" name="l01213"></a><span class="lineno"> 1213</span> </div>
<div class="line"><a id="l01214" name="l01214"></a><span class="lineno"> 1214</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l01215" name="l01215"></a><span class="lineno"> 1215</span> </div>
<div class="line"><a id="l01216" name="l01216"></a><span class="lineno"> 1216</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_KALMAN_HPP</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdoc">A generic Kalman filter for C++23.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00167">kalman.hpp:167</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a052507ea7e38da8fbbc78e3bf04c96b2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00221">kalman.hpp:221</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a0b119b5d090c39ddf0a5aaafbeeb8f6c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00216">kalman.hpp:216</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1916944cc648bdddbab53fa431058f7f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1916944cc648bdddbab53fa431058f7f">fcarouge::kalman::update</a></div><div class="ttdeci">constexpr auto update() const</div><div class="ttdoc">Returns the Nth update argument.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01191">kalman.hpp:1191</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1d1f1dacf69723b9a2027df00faa44d7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00210">kalman.hpp:210</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a20e4a128994e061d95c7cc8547edeae2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr auto q() const -&gt; const process_uncertainty &amp;</div><div class="ttdoc">Returns the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00873">kalman.hpp:873</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a27dda59bc0e63d5691cfc50344999c4e"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a27dda59bc0e63d5691cfc50344999c4e">fcarouge::kalman::operator=</a></div><div class="ttdeci">constexpr auto operator=(const kalman &amp;other) -&gt; kalman &amp;=default</div><div class="ttdoc">Copy assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a321ed407a09472e739e593efd9d89dd7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr auto p() const -&gt; const estimate_uncertainty &amp;</div><div class="ttdoc">Returns the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00837">kalman.hpp:837</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a366196a038db0f54b7322b29f1862be0"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a366196a038db0f54b7322b29f1862be0">fcarouge::kalman::s</a></div><div class="ttdeci">constexpr auto s() const -&gt; const innovation_uncertainty &amp;</div><div class="ttdoc">Returns the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01141">kalman.hpp:1141</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a379932f428ca47291e1153a674a1077b"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a379932f428ca47291e1153a674a1077b">fcarouge::kalman::observation</a></div><div class="ttdeci">constexpr void observation(const auto &amp;callable)</div><div class="ttdoc">Sets the extended state observation function h(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01165">kalman.hpp:1165</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a432db2db2655d52094bae8d72559c936"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a432db2db2655d52094bae8d72559c936">fcarouge::kalman::~kalman</a></div><div class="ttdeci">constexpr ~kalman()=default</div><div class="ttdoc">Destructs the kalman filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4734807882ed3bd3aeaffbb678e37be7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr auto g() const -&gt; const input_control &amp;requires(not std::is_same_v&lt; Input, void &gt;)</div><div class="ttdoc">Returns the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01069">kalman.hpp:1069</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4defeafa4957fc2e247792fd0883776d"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4defeafa4957fc2e247792fd0883776d">fcarouge::kalman::innovation</a></div><div class="ttdeci">typename implementation::innovation innovation</div><div class="ttdoc">Type of the innovation column vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00239">kalman.hpp:239</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a57bfc90129e1eff359b9750cf7e3c38a"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00195">kalman.hpp:195</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a5a02dcd9ae659726a2593f2e3dd91f34"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a5a02dcd9ae659726a2593f2e3dd91f34">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman()=default</div><div class="ttdoc">Constructs a Kalman filter without configuration.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a6341f1c65cfaa51580fe95fac790b6dc"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a6341f1c65cfaa51580fe95fac790b6dc">fcarouge::kalman::implementation</a></div><div class="ttdeci">internal::kalman&lt; State, Output, Input, Divide, internal::repack_t&lt; UpdateTypes &gt;, internal::repack_t&lt; PredictionTypes &gt; &gt; implementation</div><div class="ttdoc">Implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00176">kalman.hpp:178</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a70e5dcb292b21eb58a81edf2b50bdf98"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr auto h() const -&gt; const output_model &amp;</div><div class="ttdoc">Returns the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01020">kalman.hpp:1020</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a74e44ad09f9cfef290aa929c3cc9a7e9"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a74e44ad09f9cfef290aa929c3cc9a7e9">fcarouge::kalman::k</a></div><div class="ttdeci">constexpr auto k() const -&gt; const gain &amp;</div><div class="ttdoc">Returns the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01123">kalman.hpp:1123</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a75faf76f6d2e995276409a50a216f36b"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a75faf76f6d2e995276409a50a216f36b">fcarouge::kalman::u</a></div><div class="ttdeci">constexpr auto u() const -&gt; const input &amp;requires(not std::is_same_v&lt; Input, void &gt;)</div><div class="ttdoc">Returns the last control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00827">kalman.hpp:827</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a8fe68f6c32515ec3e338c9c3d205a753"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00233">kalman.hpp:233</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a94d03e7176de95c51894d0f37d83e2cf"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a94d03e7176de95c51894d0f37d83e2cf">fcarouge::kalman::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00186">kalman.hpp:186</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a97aceea287d6f047b294f556db529baa"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr auto f() const -&gt; const state_transition &amp;</div><div class="ttdoc">Returns the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00971">kalman.hpp:971</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9870b7b78addbe1c9ab75cdd896f95e8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9870b7b78addbe1c9ab75cdd896f95e8">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman(kalman &amp;&amp;other) noexcept=default</div><div class="ttdoc">Move constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a9d60faef054e3b26f2f23fa5cdd0aa41"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a9d60faef054e3b26f2f23fa5cdd0aa41">fcarouge::kalman::transition</a></div><div class="ttdeci">constexpr void transition(const auto &amp;callable)</div><div class="ttdoc">Sets the extended state transition function f(x).</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01149">kalman.hpp:1149</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa294a055b5e3a9568cfc7d9f2fb19b11"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa294a055b5e3a9568cfc7d9f2fb19b11">fcarouge::kalman::operator=</a></div><div class="ttdeci">constexpr auto operator=(kalman &amp;&amp;other) noexcept -&gt; kalman &amp;=default</div><div class="ttdoc">Move assignment operator.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aadb2093697f3eb6b26b80d0f1af5fbed"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00226">kalman.hpp:226</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab129b3dd58d760c5630a451541590f6f"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab129b3dd58d760c5630a451541590f6f">fcarouge::kalman::predict</a></div><div class="ttdeci">constexpr auto predict() const</div><div class="ttdoc">Returns the Nth prediction argument.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01209">kalman.hpp:1209</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ab7895cfe42821ddfbe0f28b89f48baba"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ab7895cfe42821ddfbe0f28b89f48baba">fcarouge::kalman::gain</a></div><div class="ttdeci">typename implementation::gain gain</div><div class="ttdoc">Type of the gain matrix K.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00236">kalman.hpp:236</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aba3d1735b4c0ee10bfa6b2dfa2266ad7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00213">kalman.hpp:213</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ac1f06b20e6494b0301d5b2ab8e4214b3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr auto x() const -&gt; const state &amp;</div><div class="ttdoc">Returns the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00783">kalman.hpp:783</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ad2babc95183dbf7e9f4969d2edb9bee1"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ad2babc95183dbf7e9f4969d2edb9bee1">fcarouge::kalman::kalman</a></div><div class="ttdeci">constexpr kalman(const kalman &amp;other)=default</div><div class="ttdoc">Copy constructs a filter.</div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_adea589845c322523f9af114f5f500cba"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#adea589845c322523f9af114f5f500cba">fcarouge::kalman::innovation_uncertainty</a></div><div class="ttdeci">typename implementation::innovation_uncertainty innovation_uncertainty</div><div class="ttdoc">Type of the innovation uncertainty matrix S.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00242">kalman.hpp:243</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae50bc6a7b064ac6c91ddab3791b120db"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">fcarouge::kalman::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00205">kalman.hpp:205</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae595d0ba1c0ede697b3669db0ff2dc20"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae595d0ba1c0ede697b3669db0ff2dc20">fcarouge::kalman::y</a></div><div class="ttdeci">constexpr auto y() const -&gt; const innovation &amp;</div><div class="ttdoc">Returns the innovation column vector Y.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l01132">kalman.hpp:1132</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af56b8ad91ef0452ff3da4e94ce0b7436"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af56b8ad91ef0452ff3da4e94ce0b7436">fcarouge::kalman::output</a></div><div class="ttdeci">typename implementation::output output</div><div class="ttdoc">Type of the observation column vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00200">kalman.hpp:200</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_afd422d2d0b9bdf85ffc00df9ae380be3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr auto r() const -&gt; const output_uncertainty &amp;</div><div class="ttdoc">Returns the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00922">kalman.hpp:922</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_afe87bffe9950ca5fbb77b3ef8b610dac"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#afe87bffe9950ca5fbb77b3ef8b610dac">fcarouge::kalman::z</a></div><div class="ttdeci">constexpr auto z() const -&gt; const output &amp;</div><div class="ttdoc">Returns the last observation column vector Z.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00818">kalman.hpp:818</a></div></div>
<div class="ttc" id="aformat_8hpp_xhtml"><div class="ttname"><a href="format_8hpp.xhtml">format.hpp</a></div></div>
<div class="ttc" id="ainternal_2kalman_8hpp_xhtml"><div class="ttname"><a href="internal_2kalman_8hpp.xhtml">kalman.hpp</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1benchmark_1_1anonymous__namespace_02eigen__predict__x1x_8cpp_03_xhtml_aafec824f2dcfe764a8b4c25afbe47df7"><div class="ttname"><a href="namespacefcarouge_1_1benchmark_1_1anonymous__namespace_02eigen__predict__x1x_8cpp_03.xhtml#aafec824f2dcfe764a8b4c25afbe47df7">fcarouge::benchmark::anonymous_namespace{eigen_predict_x1x.cpp}::vector</a></div><div class="ttdeci">Eigen::Vector&lt; Type, Size &gt; vector</div><div class="ttdef"><b>Definition:</b> <a href="eigen__predict__x1x_8cpp_source.xhtml#l00057">eigen_predict_x1x.cpp:57</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1internal_xhtml_a567d18fbfbf6f8d1543bca57ba706f22"><div class="ttname"><a href="namespacefcarouge_1_1internal.xhtml#a567d18fbfbf6f8d1543bca57ba706f22">fcarouge::internal::repack_t</a></div><div class="ttdeci">typename repack&lt; From &gt;::type repack_t</div><div class="ttdef"><b>Definition:</b> <a href="utility_8hpp_source.xhtml#l00071">utility.hpp:71</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1internal_xhtml_a990c3b3d2e7c4889c7f666cc8e82c503"><div class="ttname"><a href="namespacefcarouge_1_1internal.xhtml#a990c3b3d2e7c4889c7f666cc8e82c503">fcarouge::internal::empty_pack</a></div><div class="ttdeci">pack&lt;&gt; empty_pack</div><div class="ttdef"><b>Definition:</b> <a href="utility_8hpp_source.xhtml#l00059">utility.hpp:59</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition:</b> <a href="baseline_8cpp_source.xhtml#l00046">baseline.cpp:46</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_aa5a28afb4550bbcbd55d875351de6e27"><div class="ttname"><a href="namespacefcarouge.xhtml#aa5a28afb4550bbcbd55d875351de6e27">fcarouge::pack</a></div><div class="ttdeci">internal::pack&lt; Types... &gt; pack</div><div class="ttdoc">Convenience tuple-like pack type.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00061">kalman.hpp:61</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_af07a5637ebbb4bd8c0244134151732ca"><div class="ttname"><a href="namespacefcarouge.xhtml#af07a5637ebbb4bd8c0244134151732ca">fcarouge::empty_pack</a></div><div class="ttdeci">internal::empty_pack empty_pack</div><div class="ttdoc">Convenience tuple-like empty pack type.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00058">kalman.hpp:58</a></div></div>
<div class="ttc" id="autility_8hpp_xhtml"><div class="ttname"><a href="utility_8hpp.xhtml">utility.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="kalman_8hpp.xhtml">kalman.hpp</a></li>
    <li class="footer">Generated on Thu Nov 24 2022 02:35:00 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
