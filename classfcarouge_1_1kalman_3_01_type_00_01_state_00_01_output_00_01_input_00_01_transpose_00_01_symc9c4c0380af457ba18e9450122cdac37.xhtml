<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Kalman Filter for C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.2 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_syma0010a1672b5391780ac6e864eb72fd2.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_sym88fca00c8ff67227248815b09642797b.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:ae8f29b2f6cd2256440c5eb669d7c11f1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">value_type</a> = Type</td></tr>
<tr class="memdesc:ae8f29b2f6cd2256440c5eb669d7c11f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the filtered data elements.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">More...</a><br /></td></tr>
<tr class="separator:ae8f29b2f6cd2256440c5eb669d7c11f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cc076d3e919201547efb890de7b58af"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2fc9d9e4b18006d41a642a5740b39675">implementation::state</a></td></tr>
<tr class="memdesc:a7cc076d3e919201547efb890de7b58af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">More...</a><br /></td></tr>
<tr class="separator:a7cc076d3e919201547efb890de7b58af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8f6d60f3a75cdd1d8035f0335dac243"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad58389f483104f70dbee002813577af9">implementation::output</a></td></tr>
<tr class="memdesc:ad8f6d60f3a75cdd1d8035f0335dac243"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation vector Z.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">More...</a><br /></td></tr>
<tr class="separator:ad8f6d60f3a75cdd1d8035f0335dac243"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8aa1578e6ffb2fda2cd615afef13258"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad5b850e202b48f07b71f0faf54a9b122">implementation::input</a></td></tr>
<tr class="memdesc:ac8aa1578e6ffb2fda2cd615afef13258"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control vector U.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">More...</a><br /></td></tr>
<tr class="separator:ac8aa1578e6ffb2fda2cd615afef13258"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e89d56a929c5bd839886da696f274f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aac4677d90d6b11eb8691da8ac7fa4442">implementation::estimate_uncertainty</a></td></tr>
<tr class="memdesc:ac0e89d56a929c5bd839886da696f274f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the estimated correlated variance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">More...</a><br /></td></tr>
<tr class="separator:ac0e89d56a929c5bd839886da696f274f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29380c51a414f04b711824a5bca511fd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a043a8fbb71c1359963b47e8cd58a1be1">implementation::process_uncertainty</a></td></tr>
<tr class="memdesc:a29380c51a414f04b711824a5bca511fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the process noise correlated variance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">More...</a><br /></td></tr>
<tr class="separator:a29380c51a414f04b711824a5bca511fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afacd9014b33d545e83c4e84881f5258c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a525901e2c4fb95260f40a39d2a8fdfe8">implementation::output_uncertainty</a></td></tr>
<tr class="memdesc:afacd9014b33d545e83c4e84881f5258c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation noise correlated variance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">More...</a><br /></td></tr>
<tr class="separator:afacd9014b33d545e83c4e84881f5258c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ae0ffef3ffdc1f0fa9065e643c712a033">implementation::state_transition</a></td></tr>
<tr class="memdesc:aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">More...</a><br /></td></tr>
<tr class="separator:aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4c0442b59d66e51ae2dfd705876748b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a45a5b9989ab5de531a03e0f8ce3c8675">implementation::output_model</a></td></tr>
<tr class="memdesc:ab4c0442b59d66e51ae2dfd705876748b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the observation transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">More...</a><br /></td></tr>
<tr class="separator:ab4c0442b59d66e51ae2dfd705876748b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a070b4a229b25866e0315c655a4f45363"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a5f894d43b3b9c0693c1312b681625822">implementation::input_control</a></td></tr>
<tr class="memdesc:a070b4a229b25866e0315c655a4f45363"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">More...</a><br /></td></tr>
<tr class="separator:a070b4a229b25866e0315c655a4f45363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ef9c58b523be1333b7d52ff4c770d0d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#abf6256a9aef7db5ffb70bc68f64e2439">implementation::gain</a></td></tr>
<tr class="memdesc:a6ef9c58b523be1333b7d52ff4c770d0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the gain matrix K.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">More...</a><br /></td></tr>
<tr class="separator:a6ef9c58b523be1333b7d52ff4c770d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3980092faa4f88756aa1356d1ff03b07"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a29af619a6a44c07d93e4b6a742137915">implementation::innovation</a></td></tr>
<tr class="memdesc:a3980092faa4f88756aa1356d1ff03b07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation vector Y.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">More...</a><br /></td></tr>
<tr class="separator:a3980092faa4f88756aa1356d1ff03b07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ef1d10626818a47f20e82f4340f56e4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a> = typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a65b55c102d2bbc6de21033f5672c09bf">implementation::innovation_uncertainty</a></td></tr>
<tr class="memdesc:a8ef1d10626818a47f20e82f4340f56e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the innovation uncertainty matrix S.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">More...</a><br /></td></tr>
<tr class="separator:a8ef1d10626818a47f20e82f4340f56e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Functions</div></td></tr>
<tr class="memitem:aba118611184d7370e9883f64c9fc99af"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">kalman</a> ()=default</td></tr>
<tr class="memdesc:aba118611184d7370e9883f64c9fc99af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a Kalman filter without configuration.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aba118611184d7370e9883f64c9fc99af">More...</a><br /></td></tr>
<tr class="separator:aba118611184d7370e9883f64c9fc99af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab977824cf95c0c283d19b0beaa0b30fc"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">kalman</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other)=default</td></tr>
<tr class="memdesc:ab977824cf95c0c283d19b0beaa0b30fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab977824cf95c0c283d19b0beaa0b30fc">More...</a><br /></td></tr>
<tr class="separator:ab977824cf95c0c283d19b0beaa0b30fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36d968ee3fb917205d9fc45c8159e016"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">kalman</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="memdesc:a36d968ee3fb917205d9fc45c8159e016"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a36d968ee3fb917205d9fc45c8159e016">More...</a><br /></td></tr>
<tr class="separator:a36d968ee3fb917205d9fc45c8159e016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07a2833cb8987cf23bdd246e055b77bc"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">operator=</a> (const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;other) -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td></tr>
<tr class="memdesc:a07a2833cb8987cf23bdd246e055b77bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a07a2833cb8987cf23bdd246e055b77bc">More...</a><br /></td></tr>
<tr class="separator:a07a2833cb8987cf23bdd246e055b77bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0a58c8388997fee7b09ecd3fed65343"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">operator=</a> (<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;&amp;other) noexcept -&gt; <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td></tr>
<tr class="memdesc:ac0a58c8388997fee7b09ecd3fed65343"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment operator.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0a58c8388997fee7b09ecd3fed65343">More...</a><br /></td></tr>
<tr class="separator:ac0a58c8388997fee7b09ecd3fed65343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a980d74a57d065ea83ca60e6235f24e63"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">~kalman</a> ()=default</td></tr>
<tr class="memdesc:a980d74a57d065ea83ca60e6235f24e63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs the kalman filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a980d74a57d065ea83ca60e6235f24e63">More...</a><br /></td></tr>
<tr class="separator:a980d74a57d065ea83ca60e6235f24e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Characteristics Member Functions</div></td></tr>
<tr class="memitem:ad2c098ccf298ad413115e454e7246a76"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad2c098ccf298ad413115e454e7246a76">x</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a></td></tr>
<tr class="memdesc:ad2c098ccf298ad413115e454e7246a76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad2c098ccf298ad413115e454e7246a76">More...</a><br /></td></tr>
<tr class="separator:ad2c098ccf298ad413115e454e7246a76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d03c5f472f16df72a2ba8999cffca60"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4d03c5f472f16df72a2ba8999cffca60">x</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;value)</td></tr>
<tr class="memdesc:a4d03c5f472f16df72a2ba8999cffca60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4d03c5f472f16df72a2ba8999cffca60">More...</a><br /></td></tr>
<tr class="separator:a4d03c5f472f16df72a2ba8999cffca60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3a1aaacd95a95705714ee6922992252"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af3a1aaacd95a95705714ee6922992252">x</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:af3a1aaacd95a95705714ee6922992252"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af3a1aaacd95a95705714ee6922992252">More...</a><br /></td></tr>
<tr class="separator:af3a1aaacd95a95705714ee6922992252"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c7538ba91b0e915e55ea4b671fd47c"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a00c7538ba91b0e915e55ea4b671fd47c">x</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a00c7538ba91b0e915e55ea4b671fd47c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a00c7538ba91b0e915e55ea4b671fd47c">More...</a><br /></td></tr>
<tr class="separator:a00c7538ba91b0e915e55ea4b671fd47c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad539bc1c2c592001bb2550722318ac95"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad539bc1c2c592001bb2550722318ac95">x</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:ad539bc1c2c592001bb2550722318ac95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state estimate vector X.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad539bc1c2c592001bb2550722318ac95">More...</a><br /></td></tr>
<tr class="separator:ad539bc1c2c592001bb2550722318ac95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1039f28547872c3792f1ee723f3712d5"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1039f28547872c3792f1ee723f3712d5">z</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a></td></tr>
<tr class="memdesc:a1039f28547872c3792f1ee723f3712d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation vector Z.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1039f28547872c3792f1ee723f3712d5">More...</a><br /></td></tr>
<tr class="separator:a1039f28547872c3792f1ee723f3712d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e6f32bce6418b0ee9eff0043f60b3b5"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6e6f32bce6418b0ee9eff0043f60b3b5">u</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a></td></tr>
<tr class="memdesc:a6e6f32bce6418b0ee9eff0043f60b3b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control vector U.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6e6f32bce6418b0ee9eff0043f60b3b5">More...</a><br /></td></tr>
<tr class="separator:a6e6f32bce6418b0ee9eff0043f60b3b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afec5a7c22c82c90dd5a16348dcd04837"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afec5a7c22c82c90dd5a16348dcd04837">p</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a></td></tr>
<tr class="memdesc:afec5a7c22c82c90dd5a16348dcd04837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afec5a7c22c82c90dd5a16348dcd04837">More...</a><br /></td></tr>
<tr class="separator:afec5a7c22c82c90dd5a16348dcd04837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ee9c89407b0d5e5ea4628fe9aa5a27"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a38ee9c89407b0d5e5ea4628fe9aa5a27">p</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a38ee9c89407b0d5e5ea4628fe9aa5a27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a38ee9c89407b0d5e5ea4628fe9aa5a27">More...</a><br /></td></tr>
<tr class="separator:a38ee9c89407b0d5e5ea4628fe9aa5a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa38fba84334f874047a9fec46d14199d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa38fba84334f874047a9fec46d14199d">p</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:aa38fba84334f874047a9fec46d14199d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa38fba84334f874047a9fec46d14199d">More...</a><br /></td></tr>
<tr class="separator:aa38fba84334f874047a9fec46d14199d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff9046ab09074b5e0c9e95999c96ac16"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aff9046ab09074b5e0c9e95999c96ac16">p</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:aff9046ab09074b5e0c9e95999c96ac16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aff9046ab09074b5e0c9e95999c96ac16">More...</a><br /></td></tr>
<tr class="separator:aff9046ab09074b5e0c9e95999c96ac16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae53be9c76d5617dfc539855e0edb7983"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae53be9c76d5617dfc539855e0edb7983">p</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:ae53be9c76d5617dfc539855e0edb7983"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the estimated covariance matrix P.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae53be9c76d5617dfc539855e0edb7983">More...</a><br /></td></tr>
<tr class="separator:ae53be9c76d5617dfc539855e0edb7983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad12cd3706e98a4c52fc3579b6e23f849"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad12cd3706e98a4c52fc3579b6e23f849">q</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a></td></tr>
<tr class="memdesc:ad12cd3706e98a4c52fc3579b6e23f849"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad12cd3706e98a4c52fc3579b6e23f849">More...</a><br /></td></tr>
<tr class="separator:ad12cd3706e98a4c52fc3579b6e23f849"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a8130c43da1665805b4774e77a0308"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a43a8130c43da1665805b4774e77a0308">q</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a43a8130c43da1665805b4774e77a0308"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a43a8130c43da1665805b4774e77a0308">More...</a><br /></td></tr>
<tr class="separator:a43a8130c43da1665805b4774e77a0308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac534ebd63b2620769c4bbb76830df6b8"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac534ebd63b2620769c4bbb76830df6b8">q</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:ac534ebd63b2620769c4bbb76830df6b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac534ebd63b2620769c4bbb76830df6b8">More...</a><br /></td></tr>
<tr class="separator:ac534ebd63b2620769c4bbb76830df6b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac35e3b90fc17719c1a8c0d4d8a008785"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac35e3b90fc17719c1a8c0d4d8a008785">q</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:ac35e3b90fc17719c1a8c0d4d8a008785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac35e3b90fc17719c1a8c0d4d8a008785">More...</a><br /></td></tr>
<tr class="separator:ac35e3b90fc17719c1a8c0d4d8a008785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af82ffde1dadd3bf88e215a3ac0bd1a0b"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af82ffde1dadd3bf88e215a3ac0bd1a0b">q</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:af82ffde1dadd3bf88e215a3ac0bd1a0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af82ffde1dadd3bf88e215a3ac0bd1a0b">More...</a><br /></td></tr>
<tr class="separator:af82ffde1dadd3bf88e215a3ac0bd1a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac348954166df8e25dc64d67a03caca79"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac348954166df8e25dc64d67a03caca79">q</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:ac348954166df8e25dc64d67a03caca79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac348954166df8e25dc64d67a03caca79">More...</a><br /></td></tr>
<tr class="separator:ac348954166df8e25dc64d67a03caca79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c2588a07e489c62a864f7d24f092fe8"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">q</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a0c2588a07e489c62a864f7d24f092fe8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the process noise covariance matrix Q function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0c2588a07e489c62a864f7d24f092fe8">More...</a><br /></td></tr>
<tr class="separator:a0c2588a07e489c62a864f7d24f092fe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad10f87648f333b36312f9afe50c5407"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aad10f87648f333b36312f9afe50c5407">r</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a></td></tr>
<tr class="memdesc:aad10f87648f333b36312f9afe50c5407"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aad10f87648f333b36312f9afe50c5407">More...</a><br /></td></tr>
<tr class="separator:aad10f87648f333b36312f9afe50c5407"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6084a664fcde706247f91de2d441f6ac"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6084a664fcde706247f91de2d441f6ac">r</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;value)</td></tr>
<tr class="memdesc:a6084a664fcde706247f91de2d441f6ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6084a664fcde706247f91de2d441f6ac">More...</a><br /></td></tr>
<tr class="separator:a6084a664fcde706247f91de2d441f6ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaefb648cec4a50998444d982e21c942"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#acaefb648cec4a50998444d982e21c942">r</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:acaefb648cec4a50998444d982e21c942"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#acaefb648cec4a50998444d982e21c942">More...</a><br /></td></tr>
<tr class="separator:acaefb648cec4a50998444d982e21c942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a687ad5deeb6467a2ff72a1fbb40c6565"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a687ad5deeb6467a2ff72a1fbb40c6565">r</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a687ad5deeb6467a2ff72a1fbb40c6565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a687ad5deeb6467a2ff72a1fbb40c6565">More...</a><br /></td></tr>
<tr class="separator:a687ad5deeb6467a2ff72a1fbb40c6565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad61f5815088a806f5c744e4b48bc9c70"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad61f5815088a806f5c744e4b48bc9c70">r</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:ad61f5815088a806f5c744e4b48bc9c70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad61f5815088a806f5c744e4b48bc9c70">More...</a><br /></td></tr>
<tr class="separator:ad61f5815088a806f5c744e4b48bc9c70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa201c6a10caab1e37fa12e10b67c55"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#affa201c6a10caab1e37fa12e10b67c55">r</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:affa201c6a10caab1e37fa12e10b67c55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#affa201c6a10caab1e37fa12e10b67c55">More...</a><br /></td></tr>
<tr class="separator:affa201c6a10caab1e37fa12e10b67c55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98278129bb6899f98c55ffd09799b560"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">r</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a98278129bb6899f98c55ffd09799b560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation noise covariance matrix R function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a98278129bb6899f98c55ffd09799b560">More...</a><br /></td></tr>
<tr class="separator:a98278129bb6899f98c55ffd09799b560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f2a19b89842335b53d5777820211ff"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa5f2a19b89842335b53d5777820211ff">f</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a></td></tr>
<tr class="memdesc:aa5f2a19b89842335b53d5777820211ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa5f2a19b89842335b53d5777820211ff">More...</a><br /></td></tr>
<tr class="separator:aa5f2a19b89842335b53d5777820211ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5620ce64a25fbf4f9322798e22d13433"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5620ce64a25fbf4f9322798e22d13433">f</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;value)</td></tr>
<tr class="memdesc:a5620ce64a25fbf4f9322798e22d13433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5620ce64a25fbf4f9322798e22d13433">More...</a><br /></td></tr>
<tr class="separator:a5620ce64a25fbf4f9322798e22d13433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6556dd42246c90ec83502a670ef26d93"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6556dd42246c90ec83502a670ef26d93">f</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a6556dd42246c90ec83502a670ef26d93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6556dd42246c90ec83502a670ef26d93">More...</a><br /></td></tr>
<tr class="separator:a6556dd42246c90ec83502a670ef26d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a171f8e535b7962fd5413eb2f1079f47c"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a171f8e535b7962fd5413eb2f1079f47c">f</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a171f8e535b7962fd5413eb2f1079f47c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a171f8e535b7962fd5413eb2f1079f47c">More...</a><br /></td></tr>
<tr class="separator:a171f8e535b7962fd5413eb2f1079f47c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6518991f343d0da14df76b6724e8deaa"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6518991f343d0da14df76b6724e8deaa">f</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a6518991f343d0da14df76b6724e8deaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6518991f343d0da14df76b6724e8deaa">More...</a><br /></td></tr>
<tr class="separator:a6518991f343d0da14df76b6724e8deaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1af5e54e44eb78f85c0115037fcda139"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1af5e54e44eb78f85c0115037fcda139">f</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a1af5e54e44eb78f85c0115037fcda139"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a1af5e54e44eb78f85c0115037fcda139">More...</a><br /></td></tr>
<tr class="separator:a1af5e54e44eb78f85c0115037fcda139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bf539f6dbb7e4e69917e5f813178248"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5bf539f6dbb7e4e69917e5f813178248">f</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:a5bf539f6dbb7e4e69917e5f813178248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state transition matrix F function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a5bf539f6dbb7e4e69917e5f813178248">More...</a><br /></td></tr>
<tr class="separator:a5bf539f6dbb7e4e69917e5f813178248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0370a8ea6f1be4372d0c25fd4645442d"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0370a8ea6f1be4372d0c25fd4645442d">h</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a></td></tr>
<tr class="memdesc:a0370a8ea6f1be4372d0c25fd4645442d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the observation transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0370a8ea6f1be4372d0c25fd4645442d">More...</a><br /></td></tr>
<tr class="separator:a0370a8ea6f1be4372d0c25fd4645442d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7f7b0dd72e6f3591649dc5394dcf0e1"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac7f7b0dd72e6f3591649dc5394dcf0e1">h</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;value)</td></tr>
<tr class="memdesc:ac7f7b0dd72e6f3591649dc5394dcf0e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac7f7b0dd72e6f3591649dc5394dcf0e1">More...</a><br /></td></tr>
<tr class="separator:ac7f7b0dd72e6f3591649dc5394dcf0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3440f4c242173d9f28d92a05701054b6"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3440f4c242173d9f28d92a05701054b6">h</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a3440f4c242173d9f28d92a05701054b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3440f4c242173d9f28d92a05701054b6">More...</a><br /></td></tr>
<tr class="separator:a3440f4c242173d9f28d92a05701054b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d55dcd95188a8c92238cefd64cb2fe3"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0d55dcd95188a8c92238cefd64cb2fe3">h</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:a0d55dcd95188a8c92238cefd64cb2fe3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0d55dcd95188a8c92238cefd64cb2fe3">More...</a><br /></td></tr>
<tr class="separator:a0d55dcd95188a8c92238cefd64cb2fe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c2efbee9a3a29482282faef3d1b367"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a95c2efbee9a3a29482282faef3d1b367">h</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a95c2efbee9a3a29482282faef3d1b367"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a95c2efbee9a3a29482282faef3d1b367">More...</a><br /></td></tr>
<tr class="separator:a95c2efbee9a3a29482282faef3d1b367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a017a8b3600a2b964c13a098bd1138789"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a017a8b3600a2b964c13a098bd1138789">h</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:a017a8b3600a2b964c13a098bd1138789"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a017a8b3600a2b964c13a098bd1138789">More...</a><br /></td></tr>
<tr class="separator:a017a8b3600a2b964c13a098bd1138789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb1ffad6570a90c0ed3b846d952a96a8"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">h</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:adb1ffad6570a90c0ed3b846d952a96a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the observation, measurement transition matrix H function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#adb1ffad6570a90c0ed3b846d952a96a8">More...</a><br /></td></tr>
<tr class="separator:adb1ffad6570a90c0ed3b846d952a96a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cade2af2ad1e4f3cde979cfe9c1439b"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cade2af2ad1e4f3cde979cfe9c1439b">g</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a></td></tr>
<tr class="memdesc:a0cade2af2ad1e4f3cde979cfe9c1439b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cade2af2ad1e4f3cde979cfe9c1439b">More...</a><br /></td></tr>
<tr class="separator:a0cade2af2ad1e4f3cde979cfe9c1439b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacc8ff5d8536cdb89bde5fe3c9e42d3d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aacc8ff5d8536cdb89bde5fe3c9e42d3d">g</a> (const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;value)</td></tr>
<tr class="memdesc:aacc8ff5d8536cdb89bde5fe3c9e42d3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aacc8ff5d8536cdb89bde5fe3c9e42d3d">More...</a><br /></td></tr>
<tr class="separator:aacc8ff5d8536cdb89bde5fe3c9e42d3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c2ad8ac4b5f2a4a213df1cfc2422f2a"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3c2ad8ac4b5f2a4a213df1cfc2422f2a">g</a> (<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;&amp;value)</td></tr>
<tr class="memdesc:a3c2ad8ac4b5f2a4a213df1cfc2422f2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3c2ad8ac4b5f2a4a213df1cfc2422f2a">More...</a><br /></td></tr>
<tr class="separator:a3c2ad8ac4b5f2a4a213df1cfc2422f2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5a26886bcb2b17876bb2a516bc025df"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac5a26886bcb2b17876bb2a516bc025df">g</a> (const auto &amp;value, const auto &amp;...values)</td></tr>
<tr class="memdesc:ac5a26886bcb2b17876bb2a516bc025df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac5a26886bcb2b17876bb2a516bc025df">More...</a><br /></td></tr>
<tr class="separator:ac5a26886bcb2b17876bb2a516bc025df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92feb96774f92926d421a6ded5ce81dd"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a92feb96774f92926d421a6ded5ce81dd">g</a> (auto &amp;&amp;value, auto &amp;&amp;...values)</td></tr>
<tr class="memdesc:a92feb96774f92926d421a6ded5ce81dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a92feb96774f92926d421a6ded5ce81dd">More...</a><br /></td></tr>
<tr class="separator:a92feb96774f92926d421a6ded5ce81dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3b08856c83a2b5a020ffb7bbbc08108"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae3b08856c83a2b5a020ffb7bbbc08108">g</a> (const auto &amp;callable)</td></tr>
<tr class="memdesc:ae3b08856c83a2b5a020ffb7bbbc08108"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae3b08856c83a2b5a020ffb7bbbc08108">More...</a><br /></td></tr>
<tr class="separator:ae3b08856c83a2b5a020ffb7bbbc08108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add51c4fb72502581f7dfba667ea613ed"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">g</a> (auto &amp;&amp;callable)</td></tr>
<tr class="memdesc:add51c4fb72502581f7dfba667ea613ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the control transition matrix G function.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#add51c4fb72502581f7dfba667ea613ed">More...</a><br /></td></tr>
<tr class="separator:add51c4fb72502581f7dfba667ea613ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aa520d3dd110e616c665b516328aaa0"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8aa520d3dd110e616c665b516328aaa0">k</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a></td></tr>
<tr class="memdesc:a8aa520d3dd110e616c665b516328aaa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the gain matrix K.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8aa520d3dd110e616c665b516328aaa0">More...</a><br /></td></tr>
<tr class="separator:a8aa520d3dd110e616c665b516328aaa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859ab007e6da085502cb3415022e1182"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a859ab007e6da085502cb3415022e1182">y</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a></td></tr>
<tr class="memdesc:a859ab007e6da085502cb3415022e1182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation vector Y.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a859ab007e6da085502cb3415022e1182">More...</a><br /></td></tr>
<tr class="separator:a859ab007e6da085502cb3415022e1182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d0d89138b16394f874299e720a5334"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a85d0d89138b16394f874299e720a5334">s</a> () const -&gt; <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a></td></tr>
<tr class="memdesc:a85d0d89138b16394f874299e720a5334"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the innovation uncertainty matrix S.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a85d0d89138b16394f874299e720a5334">More...</a><br /></td></tr>
<tr class="separator:a85d0d89138b16394f874299e720a5334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7846683e1f74966f3c855d1b01ba9c51"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7846683e1f74966f3c855d1b01ba9c51">transition</a> (const auto &amp;callable)</td></tr>
<tr class="separator:a7846683e1f74966f3c855d1b01ba9c51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4644c6c5e8987a82e6c2f39a9079d84d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4644c6c5e8987a82e6c2f39a9079d84d">transition</a> (auto &amp;&amp;callable)</td></tr>
<tr class="separator:a4644c6c5e8987a82e6c2f39a9079d84d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a184350446243f42901c5e19304884cfc"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a184350446243f42901c5e19304884cfc">observation</a> (const auto &amp;callable)</td></tr>
<tr class="separator:a184350446243f42901c5e19304884cfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cbdd537cd7db2c2ed505771a1c6335d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a0cbdd537cd7db2c2ed505771a1c6335d">observation</a> (auto &amp;&amp;callable)</td></tr>
<tr class="separator:a0cbdd537cd7db2c2ed505771a1c6335d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Filtering Member Functions</div></td></tr>
<tr class="memitem:a4c611ea603ef3e6b8d77689257615d88"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4c611ea603ef3e6b8d77689257615d88">operator()</a> (const PredictionArguments &amp;...prediction_arguments, const UpdateArguments &amp;...update_arguments, const auto &amp;...input_u, const auto &amp;...output_z)</td></tr>
<tr class="memdesc:a4c611ea603ef3e6b8d77689257615d88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs a step of the filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a4c611ea603ef3e6b8d77689257615d88">More...</a><br /></td></tr>
<tr class="separator:a4c611ea603ef3e6b8d77689257615d88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaba5bd00471dd86bb62ab433e601e290"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aaba5bd00471dd86bb62ab433e601e290">update</a> (const UpdateArguments &amp;...arguments, const auto &amp;...output_z)</td></tr>
<tr class="memdesc:aaba5bd00471dd86bb62ab433e601e290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the estimates with the outcome of a measurement.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aaba5bd00471dd86bb62ab433e601e290">More...</a><br /></td></tr>
<tr class="separator:aaba5bd00471dd86bb62ab433e601e290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aace08260b714dcf1b71505db6e9c4d"><td class="memItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7aace08260b714dcf1b71505db6e9c4d">predict</a> (const PredictionArguments &amp;...arguments, const auto &amp;...input_u)</td></tr>
<tr class="memdesc:a7aace08260b714dcf1b71505db6e9c4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Produces estimates of the state variables and uncertainties.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7aace08260b714dcf1b71505db6e9c4d">More...</a><br /></td></tr>
<tr class="separator:a7aace08260b714dcf1b71505db6e9c4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-types" name="pri-types"></a>
Private Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Types</div></td></tr>
<tr class="memitem:a6d75c3fd77c3e71c27f557d8dee66ec7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a> = <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml">internal::kalman</a>&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;</td></tr>
<tr class="memdesc:a6d75c3fd77c3e71c27f557d8dee66ec7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation details of the filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">More...</a><br /></td></tr>
<tr class="separator:a6d75c3fd77c3e71c27f557d8dee66ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:af0e798a32b80dee9a86b68e6ea8fb664"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a></td></tr>
<tr class="memdesc:af0e798a32b80dee9a86b68e6ea8fb664"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encapsulates the implementation details of the filter.  <a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">More...</a><br /></td></tr>
<tr class="separator:af0e798a32b80dee9a86b68e6ea8fb664"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type, typename State, typename Output, typename Input, typename Transpose, typename Symmetrize, typename Divide, typename Identity, typename... UpdateArguments, typename... PredictionArguments&gt;<br />
class fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;</div>
<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00151">151</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ac0e89d56a929c5bd839886da696f274f" name="ac0e89d56a929c5bd839886da696f274f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0e89d56a929c5bd839886da696f274f">&#9670;&nbsp;</a></span>estimate_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aac4677d90d6b11eb8691da8ac7fa4442">implementation::estimate_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the estimated correlated variance matrix P. </p>
<p >Also known as Σ. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00188">188</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a6ef9c58b523be1333b7d52ff4c770d0d" name="a6ef9c58b523be1333b7d52ff4c770d0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ef9c58b523be1333b7d52ff4c770d0d">&#9670;&nbsp;</a></span>gain</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6ef9c58b523be1333b7d52ff4c770d0d">gain</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#abf6256a9aef7db5ffb70bc68f64e2439">implementation::gain</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the gain matrix K. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00212">212</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a6d75c3fd77c3e71c27f557d8dee66ec7" name="a6d75c3fd77c3e71c27f557d8dee66ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d75c3fd77c3e71c27f557d8dee66ec7">&#9670;&nbsp;</a></span>implementation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a> =  <a class="el" href="structfcarouge_1_1internal_1_1kalman.xhtml">internal::kalman</a>&lt;State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt;UpdateArguments...&gt;, std::tuple&lt;PredictionArguments...&gt; &gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implementation details of the filter. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00160">160</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a3980092faa4f88756aa1356d1ff03b07" name="a3980092faa4f88756aa1356d1ff03b07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3980092faa4f88756aa1356d1ff03b07">&#9670;&nbsp;</a></span>innovation</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a3980092faa4f88756aa1356d1ff03b07">innovation</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a29af619a6a44c07d93e4b6a742137915">implementation::innovation</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation vector Y. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00215">215</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a8ef1d10626818a47f20e82f4340f56e4" name="a8ef1d10626818a47f20e82f4340f56e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ef1d10626818a47f20e82f4340f56e4">&#9670;&nbsp;</a></span>innovation_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a8ef1d10626818a47f20e82f4340f56e4">innovation_uncertainty</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a65b55c102d2bbc6de21033f5672c09bf">implementation::innovation_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the innovation uncertainty matrix S. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00218">218</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ac8aa1578e6ffb2fda2cd615afef13258" name="ac8aa1578e6ffb2fda2cd615afef13258"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8aa1578e6ffb2fda2cd615afef13258">&#9670;&nbsp;</a></span>input</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac8aa1578e6ffb2fda2cd615afef13258">input</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad5b850e202b48f07b71f0faf54a9b122">implementation::input</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control vector U. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00183">183</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a070b4a229b25866e0315c655a4f45363" name="a070b4a229b25866e0315c655a4f45363"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a070b4a229b25866e0315c655a4f45363">&#9670;&nbsp;</a></span>input_control</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a5f894d43b3b9c0693c1312b681625822">implementation::input_control</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the control transition matrix G. </p>
<p >Also known as B. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00209">209</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ad8f6d60f3a75cdd1d8035f0335dac243" name="ad8f6d60f3a75cdd1d8035f0335dac243"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8f6d60f3a75cdd1d8035f0335dac243">&#9670;&nbsp;</a></span>output</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ad8f6d60f3a75cdd1d8035f0335dac243">output</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ad58389f483104f70dbee002813577af9">implementation::output</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation vector Z. </p>
<p >Also known as Y or O. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00180">180</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ab4c0442b59d66e51ae2dfd705876748b" name="ab4c0442b59d66e51ae2dfd705876748b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4c0442b59d66e51ae2dfd705876748b">&#9670;&nbsp;</a></span>output_model</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a45a5b9989ab5de531a03e0f8ce3c8675">implementation::output_model</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation transition matrix H. </p>
<p >Also known as the measurement transition matrix or C. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00204">204</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="afacd9014b33d545e83c4e84881f5258c" name="afacd9014b33d545e83c4e84881f5258c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afacd9014b33d545e83c4e84881f5258c">&#9670;&nbsp;</a></span>output_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a525901e2c4fb95260f40a39d2a8fdfe8">implementation::output_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the observation noise correlated variance matrix R. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00194">194</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a29380c51a414f04b711824a5bca511fd" name="a29380c51a414f04b711824a5bca511fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29380c51a414f04b711824a5bca511fd">&#9670;&nbsp;</a></span>process_uncertainty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a043a8fbb71c1359963b47e8cd58a1be1">implementation::process_uncertainty</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the process noise correlated variance matrix Q. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00191">191</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="a7cc076d3e919201547efb890de7b58af" name="a7cc076d3e919201547efb890de7b58af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cc076d3e919201547efb890de7b58af">&#9670;&nbsp;</a></span>state</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2fc9d9e4b18006d41a642a5740b39675">implementation::state</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state estimate vector X. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00175">175</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="aa9aa9ed2bc7f4299f2cbdc119a0ed57b" name="aa9aa9ed2bc7f4299f2cbdc119a0ed57b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">&#9670;&nbsp;</a></span>state_transition</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> =  typename <a class="el" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ae0ffef3ffdc1f0fa9065e643c712a033">implementation::state_transition</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the state transition matrix F. </p>
<p >Also known as the fundamental matrix, propagation, Φ, or A. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00199">199</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<a id="ae8f29b2f6cd2256440c5eb669d7c11f1" name="ae8f29b2f6cd2256440c5eb669d7c11f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8f29b2f6cd2256440c5eb669d7c11f1">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ae8f29b2f6cd2256440c5eb669d7c11f1">value_type</a> =  Type</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the filtered data elements. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00172">172</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aba118611184d7370e9883f64c9fc99af" name="aba118611184d7370e9883f64c9fc99af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba118611184d7370e9883f64c9fc99af">&#9670;&nbsp;</a></span>kalman() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a Kalman filter without configuration. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="ab977824cf95c0c283d19b0beaa0b30fc" name="ab977824cf95c0c283d19b0beaa0b30fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab977824cf95c0c283d19b0beaa0b30fc">&#9670;&nbsp;</a></span>kalman() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructs a filter. </p>
<p >Constructs the filter with the copy of the contents of the <code>other</code> filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a36d968ee3fb917205d9fc45c8159e016" name="a36d968ee3fb917205d9fc45c8159e016"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36d968ee3fb917205d9fc45c8159e016">&#9670;&nbsp;</a></span>kalman() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructs a filter. </p>
<p >Move constructor. Constructs the filter with the contents of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="a980d74a57d065ea83ca60e6235f24e63" name="a980d74a57d065ea83ca60e6235f24e63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a980d74a57d065ea83ca60e6235f24e63">&#9670;&nbsp;</a></span>~kalman()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::~<a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructs the kalman filter. </p>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa5f2a19b89842335b53d5777820211ff" name="aa5f2a19b89842335b53d5777820211ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5f2a19b89842335b53d5777820211ff">&#9670;&nbsp;</a></span>f() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state transition matrix F. </p>
<dl class="section return"><dt>Returns</dt><dd>The state transition matrix F.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01225">1225</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01227" name="l01227"></a><span class="lineno"> 1227</span>{</div>
<div class="line"><a id="l01228" name="l01228"></a><span class="lineno"> 1228</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">f</a>;</div>
<div class="line"><a id="l01229" name="l01229"></a><span class="lineno"> 1229</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_af0e798a32b80dee9a86b68e6ea8fb664"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::filter</a></div><div class="ttdeci">implementation filter</div><div class="ttdoc">Encapsulates the implementation details of the filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00935">kalman.hpp:935</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aa69abffd72727a761892466eb684a5ef"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f</a></div><div class="ttdeci">state_transition f</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00163">kalman.hpp:163</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5bf539f6dbb7e4e69917e5f813178248" name="a5bf539f6dbb7e4e69917e5f813178248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bf539f6dbb7e4e69917e5f813178248">&#9670;&nbsp;</a></span>f() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the state transition matrix F function on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00630">630</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span>  {</div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a7b8a1f820f5a73d6b6ec4a90e3ec48a3">transition_state_f</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a7b8a1f820f5a73d6b6ec4a90e3ec48a3"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a7b8a1f820f5a73d6b6ec4a90e3ec48a3">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition_state_f</a></div><div class="ttdeci">std::function&lt; state_transition(const state &amp;, const PredictionArguments &amp;..., const input &amp;)&gt; transition_state_f</div><div class="ttdoc">Compute the state transition F matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00228">kalman.hpp:228</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6518991f343d0da14df76b6724e8deaa" name="a6518991f343d0da14df76b6724e8deaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6518991f343d0da14df76b6724e8deaa">&#9670;&nbsp;</a></span>f() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the state transition matrix F. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01275">1275</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01276" name="l01276"></a><span class="lineno"> 1276</span>{</div>
<div class="line"><a id="l01277" name="l01277"></a><span class="lineno"> 1277</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">f</a> =</div>
<div class="line"><a id="l01278" name="l01278"></a><span class="lineno"> 1278</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01279" name="l01279"></a><span class="lineno"> 1279</span>                                  std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01280" name="l01280"></a><span class="lineno"> 1280</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_aa9aa9ed2bc7f4299f2cbdc119a0ed57b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00199">kalman.hpp:199</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1af5e54e44eb78f85c0115037fcda139" name="a1af5e54e44eb78f85c0115037fcda139"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1af5e54e44eb78f85c0115037fcda139">&#9670;&nbsp;</a></span>f() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the state transition matrix F function on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00613">613</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span>  {</div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a7b8a1f820f5a73d6b6ec4a90e3ec48a3">transition_state_f</a> = callable;</div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a171f8e535b7962fd5413eb2f1079f47c" name="a171f8e535b7962fd5413eb2f1079f47c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a171f8e535b7962fd5413eb2f1079f47c">&#9670;&nbsp;</a></span>f() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the state transition matrix F. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01262">1262</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01264" name="l01264"></a><span class="lineno"> 1264</span>{</div>
<div class="line"><a id="l01265" name="l01265"></a><span class="lineno"> 1265</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">f</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a>{ value, values... };</div>
<div class="line"><a id="l01266" name="l01266"></a><span class="lineno"> 1266</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5620ce64a25fbf4f9322798e22d13433" name="a5620ce64a25fbf4f9322798e22d13433"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5620ce64a25fbf4f9322798e22d13433">&#9670;&nbsp;</a></span>f() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01238">1238</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01239" name="l01239"></a><span class="lineno"> 1239</span>{</div>
<div class="line"><a id="l01240" name="l01240"></a><span class="lineno"> 1240</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">f</a> = value;</div>
<div class="line"><a id="l01241" name="l01241"></a><span class="lineno"> 1241</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6556dd42246c90ec83502a670ef26d93" name="a6556dd42246c90ec83502a670ef26d93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6556dd42246c90ec83502a670ef26d93">&#9670;&nbsp;</a></span>f() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::f </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#aa9aa9ed2bc7f4299f2cbdc119a0ed57b">state_transition</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state transition matrix F. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved state transition matrix F.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01250">1250</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01251" name="l01251"></a><span class="lineno"> 1251</span>{</div>
<div class="line"><a id="l01252" name="l01252"></a><span class="lineno"> 1252</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa69abffd72727a761892466eb684a5ef">f</a> = std::move(value);</div>
<div class="line"><a id="l01253" name="l01253"></a><span class="lineno"> 1253</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0cade2af2ad1e4f3cde979cfe9c1439b" name="a0cade2af2ad1e4f3cde979cfe9c1439b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cade2af2ad1e4f3cde979cfe9c1439b">&#9670;&nbsp;</a></span>g() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control transition matrix G. </p>
<dl class="section return"><dt>Returns</dt><dd>The control transition matrix G.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01351">1351</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01353" name="l01353"></a><span class="lineno"> 1353</span>{</div>
<div class="line"><a id="l01354" name="l01354"></a><span class="lineno"> 1354</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">g</a>;</div>
<div class="line"><a id="l01355" name="l01355"></a><span class="lineno"> 1355</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_af6919e64102a3956686bd36da15f8d34"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g</a></div><div class="ttdeci">input_control g</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00166">kalman.hpp:166</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="add51c4fb72502581f7dfba667ea613ed" name="add51c4fb72502581f7dfba667ea613ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add51c4fb72502581f7dfba667ea613ed">&#9670;&nbsp;</a></span>g() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the control transition matrix G on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00786">786</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>  {</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a9d091451db6b411b0a076635240ed19c">transition_control_g</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a9d091451db6b411b0a076635240ed19c"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a9d091451db6b411b0a076635240ed19c">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition_control_g</a></div><div class="ttdeci">std::function&lt; input_control(const PredictionArguments &amp;...)&gt; transition_control_g</div><div class="ttdoc">Compute control transition G matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00251">kalman.hpp:251</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a92feb96774f92926d421a6ded5ce81dd" name="a92feb96774f92926d421a6ded5ce81dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92feb96774f92926d421a6ded5ce81dd">&#9670;&nbsp;</a></span>g() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the control transition matrix G. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01401">1401</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01402" name="l01402"></a><span class="lineno"> 1402</span>{</div>
<div class="line"><a id="l01403" name="l01403"></a><span class="lineno"> 1403</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">g</a> =</div>
<div class="line"><a id="l01404" name="l01404"></a><span class="lineno"> 1404</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01405" name="l01405"></a><span class="lineno"> 1405</span>                               std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01406" name="l01406"></a><span class="lineno"> 1406</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a070b4a229b25866e0315c655a4f45363"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00209">kalman.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae3b08856c83a2b5a020ffb7bbbc08108" name="ae3b08856c83a2b5a020ffb7bbbc08108"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3b08856c83a2b5a020ffb7bbbc08108">&#9670;&nbsp;</a></span>g() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the control transition matrix G on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00769">769</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00772" name="l00772"></a><span class="lineno">  772</span>  {</div>
<div class="line"><a id="l00773" name="l00773"></a><span class="lineno">  773</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a9d091451db6b411b0a076635240ed19c">transition_control_g</a> = callable;</div>
<div class="line"><a id="l00774" name="l00774"></a><span class="lineno">  774</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac5a26886bcb2b17876bb2a516bc025df" name="ac5a26886bcb2b17876bb2a516bc025df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5a26886bcb2b17876bb2a516bc025df">&#9670;&nbsp;</a></span>g() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the control transition matrix G. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01388">1388</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01390" name="l01390"></a><span class="lineno"> 1390</span>{</div>
<div class="line"><a id="l01391" name="l01391"></a><span class="lineno"> 1391</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">g</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a>{ value, values... };</div>
<div class="line"><a id="l01392" name="l01392"></a><span class="lineno"> 1392</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aacc8ff5d8536cdb89bde5fe3c9e42d3d" name="aacc8ff5d8536cdb89bde5fe3c9e42d3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacc8ff5d8536cdb89bde5fe3c9e42d3d">&#9670;&nbsp;</a></span>g() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01364">1364</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01365" name="l01365"></a><span class="lineno"> 1365</span>{</div>
<div class="line"><a id="l01366" name="l01366"></a><span class="lineno"> 1366</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">g</a> = value;</div>
<div class="line"><a id="l01367" name="l01367"></a><span class="lineno"> 1367</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c2ad8ac4b5f2a4a213df1cfc2422f2a" name="a3c2ad8ac4b5f2a4a213df1cfc2422f2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c2ad8ac4b5f2a4a213df1cfc2422f2a">&#9670;&nbsp;</a></span>g() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::g </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a070b4a229b25866e0315c655a4f45363">input_control</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the control transition matrix G. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved control transition matrix G.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01376">1376</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01377" name="l01377"></a><span class="lineno"> 1377</span>{</div>
<div class="line"><a id="l01378" name="l01378"></a><span class="lineno"> 1378</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af6919e64102a3956686bd36da15f8d34">g</a> = std::move(value);</div>
<div class="line"><a id="l01379" name="l01379"></a><span class="lineno"> 1379</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0370a8ea6f1be4372d0c25fd4645442d" name="a0370a8ea6f1be4372d0c25fd4645442d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0370a8ea6f1be4372d0c25fd4645442d">&#9670;&nbsp;</a></span>h() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation transition matrix H. </p>
<dl class="section return"><dt>Returns</dt><dd>The observation, measurement transition matrix H.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01288">1288</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01290" name="l01290"></a><span class="lineno"> 1290</span>{</div>
<div class="line"><a id="l01291" name="l01291"></a><span class="lineno"> 1291</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">h</a>;</div>
<div class="line"><a id="l01292" name="l01292"></a><span class="lineno"> 1292</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a11e07e73bc9c6e2746be37ea919bb3a8"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h</a></div><div class="ttdeci">output_model h</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00162">kalman.hpp:162</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adb1ffad6570a90c0ed3b846d952a96a8" name="adb1ffad6570a90c0ed3b846d952a96a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb1ffad6570a90c0ed3b846d952a96a8">&#9670;&nbsp;</a></span>h() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the observation, measurement transition matrix H on update steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00709">709</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span>  {</div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa2445b05ea9c828d98d60cb4ffc3c92e">observation_state_h</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aa2445b05ea9c828d98d60cb4ffc3c92e"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa2445b05ea9c828d98d60cb4ffc3c92e">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation_state_h</a></div><div class="ttdeci">std::function&lt; output_model(const state &amp;, const UpdateArguments &amp;...)&gt; observation_state_h</div><div class="ttdoc">Compute the state observation H matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00195">kalman.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95c2efbee9a3a29482282faef3d1b367" name="a95c2efbee9a3a29482282faef3d1b367"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c2efbee9a3a29482282faef3d1b367">&#9670;&nbsp;</a></span>h() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the observation, measurement transition matrix H. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the observation, measurement transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01338">1338</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01339" name="l01339"></a><span class="lineno"> 1339</span>{</div>
<div class="line"><a id="l01340" name="l01340"></a><span class="lineno"> 1340</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">h</a> =</div>
<div class="line"><a id="l01341" name="l01341"></a><span class="lineno"> 1341</span>      std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01342" name="l01342"></a><span class="lineno"> 1342</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01343" name="l01343"></a><span class="lineno"> 1343</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ab4c0442b59d66e51ae2dfd705876748b"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00204">kalman.hpp:204</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a017a8b3600a2b964c13a098bd1138789" name="a017a8b3600a2b964c13a098bd1138789"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a017a8b3600a2b964c13a098bd1138789">&#9670;&nbsp;</a></span>h() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the observation, measurement transition matrix H on update steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000022">Todo:</a></b></dt><dd>Understand why Clang Tidy doesn't find the out-of-line definition. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00692">692</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00695" name="l00695"></a><span class="lineno">  695</span>  {</div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa2445b05ea9c828d98d60cb4ffc3c92e">observation_state_h</a> = callable;</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0d55dcd95188a8c92238cefd64cb2fe3" name="a0d55dcd95188a8c92238cefd64cb2fe3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d55dcd95188a8c92238cefd64cb2fe3">&#9670;&nbsp;</a></span>h() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation, measurement transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the observation, measurement transition matrix H. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the observation, measurement transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01325">1325</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01327" name="l01327"></a><span class="lineno"> 1327</span>{</div>
<div class="line"><a id="l01328" name="l01328"></a><span class="lineno"> 1328</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">h</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a>{ value, values... };</div>
<div class="line"><a id="l01329" name="l01329"></a><span class="lineno"> 1329</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac7f7b0dd72e6f3591649dc5394dcf0e1" name="ac7f7b0dd72e6f3591649dc5394dcf0e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7f7b0dd72e6f3591649dc5394dcf0e1">&#9670;&nbsp;</a></span>h() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied observation transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01301">1301</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01302" name="l01302"></a><span class="lineno"> 1302</span>{</div>
<div class="line"><a id="l01303" name="l01303"></a><span class="lineno"> 1303</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">h</a> = value;</div>
<div class="line"><a id="l01304" name="l01304"></a><span class="lineno"> 1304</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3440f4c242173d9f28d92a05701054b6" name="a3440f4c242173d9f28d92a05701054b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3440f4c242173d9f28d92a05701054b6">&#9670;&nbsp;</a></span>h() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::h </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ab4c0442b59d66e51ae2dfd705876748b">output_model</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation transition matrix H. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved observation transition matrix H.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01313">1313</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01314" name="l01314"></a><span class="lineno"> 1314</span>{</div>
<div class="line"><a id="l01315" name="l01315"></a><span class="lineno"> 1315</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a11e07e73bc9c6e2746be37ea919bb3a8">h</a> = std::move(value);</div>
<div class="line"><a id="l01316" name="l01316"></a><span class="lineno"> 1316</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8aa520d3dd110e616c665b516328aaa0" name="a8aa520d3dd110e616c665b516328aaa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8aa520d3dd110e616c665b516328aaa0">&#9670;&nbsp;</a></span>k()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::k</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the gain matrix K. </p>
<dl class="section return"><dt>Returns</dt><dd>The gain matrix K.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01414">1414</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01416" name="l01416"></a><span class="lineno"> 1416</span>{</div>
<div class="line"><a id="l01417" name="l01417"></a><span class="lineno"> 1417</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a03ce6e3922af86685f9ad41d11fc93b8">k</a>;</div>
<div class="line"><a id="l01418" name="l01418"></a><span class="lineno"> 1418</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a03ce6e3922af86685f9ad41d11fc93b8"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a03ce6e3922af86685f9ad41d11fc93b8">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::k</a></div><div class="ttdeci">gain k</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00169">kalman.hpp:169</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0cbdd537cd7db2c2ed505771a1c6335d" name="a0cbdd537cd7db2c2ed505771a1c6335d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cbdd537cd7db2c2ed505771a1c6335d">&#9670;&nbsp;</a></span>observation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00845">845</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span>  {</div>
<div class="line"><a id="l00849" name="l00849"></a><span class="lineno">  849</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2745bd4ac1765c51edbb8bc10cf38940">observation</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00850" name="l00850"></a><span class="lineno">  850</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a2745bd4ac1765c51edbb8bc10cf38940"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2745bd4ac1765c51edbb8bc10cf38940">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation</a></div><div class="ttdeci">std::function&lt; output(const state &amp;, const UpdateArguments &amp;...arguments)&gt; observation</div><div class="ttdoc">State observation function h.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00278">kalman.hpp:278</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a184350446243f42901c5e19304884cfc" name="a184350446243f42901c5e19304884cfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a184350446243f42901c5e19304884cfc">&#9670;&nbsp;</a></span>observation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::observation </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00837">837</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>  {</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2745bd4ac1765c51edbb8bc10cf38940">observation</a> = callable;</div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c611ea603ef3e6b8d77689257615d88" name="a4c611ea603ef3e6b8d77689257615d88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c611ea603ef3e6b8d77689257615d88">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const PredictionArguments &amp;...&#160;</td>
          <td class="paramname"><em>prediction_arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const UpdateArguments &amp;...&#160;</td>
          <td class="paramname"><em>update_arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>input_u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>output_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs a step of the filter. </p>
<p >Predicts and updates the estimates per prediction arguments, control input, and measurement output.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">prediction_arguments</td><td>Optional prediction parameters passed through for computations of prediction matrices. </td></tr>
    <tr><td class="paramname">update_arguments</td><td>Optional update parameters passed through for computations of update matrices. </td></tr>
    <tr><td class="paramname">input_u</td><td>Optional control parameters. Types must be compatible with the <code>Input</code> types. The parameter pack types must always be explicitly defined per the </td></tr>
    <tr><td class="paramname">output_z</td><td>Observation parameters. Types must be compatible with the <code>output</code> type. The parameter pack types are always deduced per the greedy matching rule.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Called as <code>k(...);</code> with prediction values and output values when the filter has no input parameters. The input type list is explicitly empty. Otherwise can be called as <code>k.template operator()&lt;input1_t, input2_t, ...&gt;(...);</code> with prediction values, input values, and output values. The input type list being explicitly specified. A lambda can come in handy to reduce the verbose call `const auto kf{ <a href="const auto
&amp;...args">&amp;k</a> { k.template operator()&lt;input1_t, input2_t, ...&gt;(args...); } };<code>then called as</code>kf(...);`.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000023">Todo:</a></b></dt><dd><p class="startdd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
<p class="interdd">Understand why the implementation cannot be moved out of the class. </p>
<p class="enddd">What should be the order of the parameters? Update first? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00888">888</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00891" name="l00891"></a><span class="lineno">  891</span>  {</div>
<div class="line"><a id="l00892" name="l00892"></a><span class="lineno">  892</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ada982df51bf70f5e21f6b5a7fa81cf7e">update</a>(update_arguments..., output_z...);</div>
<div class="line"><a id="l00893" name="l00893"></a><span class="lineno">  893</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2bba3eed22dd16a58476f26a66fe7204">predict</a>(prediction_arguments..., input_u...);</div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a2bba3eed22dd16a58476f26a66fe7204"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2bba3eed22dd16a58476f26a66fe7204">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::predict</a></div><div class="ttdeci">constexpr void predict(const PredictionArguments &amp;...arguments, const auto &amp;...input_u)</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00315">kalman.hpp:315</a></div></div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_ada982df51bf70f5e21f6b5a7fa81cf7e"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ada982df51bf70f5e21f6b5a7fa81cf7e">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::update</a></div><div class="ttdeci">constexpr void update(const UpdateArguments &amp;...arguments, const auto &amp;...output_z)</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00298">kalman.hpp:298</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a07a2833cb8987cf23bdd246e055b77bc" name="a07a2833cb8987cf23bdd246e055b77bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07a2833cb8987cf23bdd246e055b77bc">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>
<p >Destroys or copy-assigns the contents with a copy of the contents of the other filter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="ac0a58c8388997fee7b09ecd3fed65343" name="ac0a58c8388997fee7b09ecd3fed65343"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0a58c8388997fee7b09ecd3fed65343">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> -&gt;  <a class="el" href="classfcarouge_1_1kalman.xhtml">kalman</a> &amp;=default</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment operator. </p>
<p >Replaces the contents of the filter with those of the <code>other</code> filter using move semantics (i.e. the data in <code>other</code> filter is moved from the other into this filter). The other filter is in a valid but unspecified state afterwards.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>Another filter to be used as source to initialize the elements of the filter with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference value of this implicit object filter parameter, i.e. <code>*this</code>.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

</div>
</div>
<a id="afec5a7c22c82c90dd5a16348dcd04837" name="afec5a7c22c82c90dd5a16348dcd04837"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afec5a7c22c82c90dd5a16348dcd04837">&#9670;&nbsp;</a></span>p() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the estimated covariance matrix P. </p>
<dl class="section return"><dt>Returns</dt><dd>The estimated correlated variance matrix P.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01032">1032</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span>{</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">p</a>;</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"> 1036</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aa6465e04085a4115af829fd08072e56e"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p</a></div><div class="ttdeci">estimate_uncertainty p</div><div class="ttdoc">The estimate uncertainty, covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00151">kalman.hpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae53be9c76d5617dfc539855e0edb7983" name="ae53be9c76d5617dfc539855e0edb7983"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae53be9c76d5617dfc539855e0edb7983">&#9670;&nbsp;</a></span>p() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the estimated covariance matrix P. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01082">1082</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01083" name="l01083"></a><span class="lineno"> 1083</span>{</div>
<div class="line"><a id="l01084" name="l01084"></a><span class="lineno"> 1084</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">p</a> = std::move(</div>
<div class="line"><a id="l01085" name="l01085"></a><span class="lineno"> 1085</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01086" name="l01086"></a><span class="lineno"> 1086</span>                            std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01087" name="l01087"></a><span class="lineno"> 1087</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_ac0e89d56a929c5bd839886da696f274f"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00188">kalman.hpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aff9046ab09074b5e0c9e95999c96ac16" name="aff9046ab09074b5e0c9e95999c96ac16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff9046ab09074b5e0c9e95999c96ac16">&#9670;&nbsp;</a></span>p() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the estimated covariance matrix P. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01069">1069</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01071" name="l01071"></a><span class="lineno"> 1071</span>{</div>
<div class="line"><a id="l01072" name="l01072"></a><span class="lineno"> 1072</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">p</a> = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01073" name="l01073"></a><span class="lineno"> 1073</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a38ee9c89407b0d5e5ea4628fe9aa5a27" name="a38ee9c89407b0d5e5ea4628fe9aa5a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38ee9c89407b0d5e5ea4628fe9aa5a27">&#9670;&nbsp;</a></span>p() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01045">1045</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span>{</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">p</a> = value;</div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"> 1048</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa38fba84334f874047a9fec46d14199d" name="aa38fba84334f874047a9fec46d14199d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa38fba84334f874047a9fec46d14199d">&#9670;&nbsp;</a></span>p() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::p </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#ac0e89d56a929c5bd839886da696f274f">estimate_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the estimated covariance matrix P. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved estimated covariance matrix P.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01057">1057</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>{</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aa6465e04085a4115af829fd08072e56e">p</a> = std::move(value);</div>
<div class="line"><a id="l01060" name="l01060"></a><span class="lineno"> 1060</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7aace08260b714dcf1b71505db6e9c4d" name="a7aace08260b714dcf1b71505db6e9c4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aace08260b714dcf1b71505db6e9c4d">&#9670;&nbsp;</a></span>predict()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::predict </td>
          <td>(</td>
          <td class="paramtype">const PredictionArguments &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>input_u</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Produces estimates of the state variables and uncertainties. </p>
<p >Implements the total probability theorem.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arguments</td><td>Optional prediction parameters passed through for computations of prediction matrices. </td></tr>
    <tr><td class="paramname">input_u</td><td>Optional control parameters. Types must be compatible with the <code>Input</code> types. The parameter pack types are always deduced per the greedy matching rule.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000025">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients? </p>
<p class="enddd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01462">1462</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01464" name="l01464"></a><span class="lineno"> 1464</span>{</div>
<div class="line"><a id="l01465" name="l01465"></a><span class="lineno"> 1465</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2bba3eed22dd16a58476f26a66fe7204">predict</a>(arguments..., input_u...);</div>
<div class="line"><a id="l01466" name="l01466"></a><span class="lineno"> 1466</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad12cd3706e98a4c52fc3579b6e23f849" name="ad12cd3706e98a4c52fc3579b6e23f849"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad12cd3706e98a4c52fc3579b6e23f849">&#9670;&nbsp;</a></span>q() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the process noise covariance matrix Q. </p>
<dl class="section return"><dt>Returns</dt><dd>The process noise correlated variance matrix Q.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01095">1095</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01097" name="l01097"></a><span class="lineno"> 1097</span>{</div>
<div class="line"><a id="l01098" name="l01098"></a><span class="lineno"> 1098</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">q</a>;</div>
<div class="line"><a id="l01099" name="l01099"></a><span class="lineno"> 1099</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aad78e68fc14d2880b20b65952e39456f"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q</a></div><div class="ttdeci">process_uncertainty q</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00155">kalman.hpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c2588a07e489c62a864f7d24f092fe8" name="a0c2588a07e489c62a864f7d24f092fe8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c2588a07e489c62a864f7d24f092fe8">&#9670;&nbsp;</a></span>q() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the process noise covariance matrix Q on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00471">471</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span>  {</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2dc6a0e2b66a465c4f11a40faa13ba66">noise_process_q</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a2dc6a0e2b66a465c4f11a40faa13ba66"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2dc6a0e2b66a465c4f11a40faa13ba66">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::noise_process_q</a></div><div class="ttdeci">std::function&lt; process_uncertainty(const state &amp;, const PredictionArguments &amp;...)&gt; noise_process_q</div><div class="ttdoc">Compute process noise Q matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00240">kalman.hpp:240</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af82ffde1dadd3bf88e215a3ac0bd1a0b" name="af82ffde1dadd3bf88e215a3ac0bd1a0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af82ffde1dadd3bf88e215a3ac0bd1a0b">&#9670;&nbsp;</a></span>q() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the process noise covariance matrix Q. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers used to set the process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000019">Todo:</a></b></dt><dd>Don't we need to reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01149">1149</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01150" name="l01150"></a><span class="lineno"> 1150</span>{</div>
<div class="line"><a id="l01151" name="l01151"></a><span class="lineno"> 1151</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">q</a> = std::move(</div>
<div class="line"><a id="l01152" name="l01152"></a><span class="lineno"> 1152</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01153" name="l01153"></a><span class="lineno"> 1153</span>                           std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01154" name="l01154"></a><span class="lineno"> 1154</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a29380c51a414f04b711824a5bca511fd"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00191">kalman.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac348954166df8e25dc64d67a03caca79" name="ac348954166df8e25dc64d67a03caca79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac348954166df8e25dc64d67a03caca79">&#9670;&nbsp;</a></span>q() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to the prediction arguments and called by the filter to compute the process noise covariance matrix Q on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000020">Todo:</a></b></dt><dd>Understand why Clang Tidy doesn't find the out-of-line definition. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00453">453</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>  {</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2dc6a0e2b66a465c4f11a40faa13ba66">noise_process_q</a> = callable;</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac35e3b90fc17719c1a8c0d4d8a008785" name="ac35e3b90fc17719c1a8c0d4d8a008785"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac35e3b90fc17719c1a8c0d4d8a008785">&#9670;&nbsp;</a></span>q() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the process noise covariance matrix Q. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000018">Todo:</a></b></dt><dd>Don't we need to reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01135">1135</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01137" name="l01137"></a><span class="lineno"> 1137</span>{</div>
<div class="line"><a id="l01138" name="l01138"></a><span class="lineno"> 1138</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">q</a> = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a>{ value, values... });</div>
<div class="line"><a id="l01139" name="l01139"></a><span class="lineno"> 1139</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a43a8130c43da1665805b4774e77a0308" name="a43a8130c43da1665805b4774e77a0308"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a8130c43da1665805b4774e77a0308">&#9670;&nbsp;</a></span>q() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000016">Todo:</a></b></dt><dd>Don't we need to reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01109">1109</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01110" name="l01110"></a><span class="lineno"> 1110</span>{</div>
<div class="line"><a id="l01111" name="l01111"></a><span class="lineno"> 1111</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">q</a> = value;</div>
<div class="line"><a id="l01112" name="l01112"></a><span class="lineno"> 1112</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac534ebd63b2620769c4bbb76830df6b8" name="ac534ebd63b2620769c4bbb76830df6b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac534ebd63b2620769c4bbb76830df6b8">&#9670;&nbsp;</a></span>q() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::q </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a29380c51a414f04b711824a5bca511fd">process_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the process noise covariance matrix Q. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved process noise covariance matrix Q.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000017">Todo:</a></b></dt><dd>Don't we need to reset functions or values when the other is set? </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01122">1122</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01123" name="l01123"></a><span class="lineno"> 1123</span>{</div>
<div class="line"><a id="l01124" name="l01124"></a><span class="lineno"> 1124</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aad78e68fc14d2880b20b65952e39456f">q</a> = std::move(value);</div>
<div class="line"><a id="l01125" name="l01125"></a><span class="lineno"> 1125</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aad10f87648f333b36312f9afe50c5407" name="aad10f87648f333b36312f9afe50c5407"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad10f87648f333b36312f9afe50c5407">&#9670;&nbsp;</a></span>r() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation noise covariance matrix R. </p>
<p >The variance there is in each measurement.</p>
<dl class="section return"><dt>Returns</dt><dd>The observation noise correlated variance matrix R.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01162">1162</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01164" name="l01164"></a><span class="lineno"> 1164</span>{</div>
<div class="line"><a id="l01165" name="l01165"></a><span class="lineno"> 1165</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">r</a>;</div>
<div class="line"><a id="l01166" name="l01166"></a><span class="lineno"> 1166</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_af78826cf70b5869c0bd643cd623a45bc"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r</a></div><div class="ttdeci">output_uncertainty r</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00158">kalman.hpp:158</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a98278129bb6899f98c55ffd09799b560" name="a98278129bb6899f98c55ffd09799b560"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98278129bb6899f98c55ffd09799b560">&#9670;&nbsp;</a></span>r() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The moved target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called by the filter to compute the observation noise covariance matrix R on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00553">553</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>  {</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a06741667c0f7bc160e634fe34f07e59d">noise_observation_r</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a06741667c0f7bc160e634fe34f07e59d"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a06741667c0f7bc160e634fe34f07e59d">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::noise_observation_r</a></div><div class="ttdeci">std::function&lt; output_uncertainty(const state &amp;, const output &amp;, const UpdateArguments &amp;...)&gt; noise_observation_r</div><div class="ttdoc">Compute the observation noise R matrix.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00207">kalman.hpp:207</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad61f5815088a806f5c744e4b48bc9c70" name="ad61f5815088a806f5c744e4b48bc9c70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad61f5815088a806f5c744e4b48bc9c70">&#9670;&nbsp;</a></span>r() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the observation noise covariance matrix R. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01212">1212</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01213" name="l01213"></a><span class="lineno"> 1213</span>{</div>
<div class="line"><a id="l01214" name="l01214"></a><span class="lineno"> 1214</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">r</a> = std::move(</div>
<div class="line"><a id="l01215" name="l01215"></a><span class="lineno"> 1215</span>      <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l01216" name="l01216"></a><span class="lineno"> 1216</span>                          std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01217" name="l01217"></a><span class="lineno"> 1217</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_afacd9014b33d545e83c4e84881f5258c"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00194">kalman.hpp:194</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="affa201c6a10caab1e37fa12e10b67c55" name="affa201c6a10caab1e37fa12e10b67c55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affa201c6a10caab1e37fa12e10b67c55">&#9670;&nbsp;</a></span>r() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callable</td><td>The copied target Callable object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be called by the filter to compute the observation noise covariance matrix R on prediction steps.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000021">Todo:</a></b></dt><dd>Understand why Clang Tidy doesn't find the out-of-line definition. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00535">535</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span>  {</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a06741667c0f7bc160e634fe34f07e59d">noise_observation_r</a> = callable;</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a687ad5deeb6467a2ff72a1fbb40c6565" name="a687ad5deeb6467a2ff72a1fbb40c6565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a687ad5deeb6467a2ff72a1fbb40c6565">&#9670;&nbsp;</a></span>r() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the observation noise covariance matrix R. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01199">1199</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01201" name="l01201"></a><span class="lineno"> 1201</span>{</div>
<div class="line"><a id="l01202" name="l01202"></a><span class="lineno"> 1202</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">r</a> = <a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a>{ value, values... };</div>
<div class="line"><a id="l01203" name="l01203"></a><span class="lineno"> 1203</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6084a664fcde706247f91de2d441f6ac" name="a6084a664fcde706247f91de2d441f6ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6084a664fcde706247f91de2d441f6ac">&#9670;&nbsp;</a></span>r() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01175">1175</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01176" name="l01176"></a><span class="lineno"> 1176</span>{</div>
<div class="line"><a id="l01177" name="l01177"></a><span class="lineno"> 1177</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">r</a> = value;</div>
<div class="line"><a id="l01178" name="l01178"></a><span class="lineno"> 1178</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="acaefb648cec4a50998444d982e21c942" name="acaefb648cec4a50998444d982e21c942"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaefb648cec4a50998444d982e21c942">&#9670;&nbsp;</a></span>r() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::r </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#afacd9014b33d545e83c4e84881f5258c">output_uncertainty</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the observation noise covariance matrix R. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved observation noise covariance matrix R.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01187">1187</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01188" name="l01188"></a><span class="lineno"> 1188</span>{</div>
<div class="line"><a id="l01189" name="l01189"></a><span class="lineno"> 1189</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#af78826cf70b5869c0bd643cd623a45bc">r</a> = std::move(value);</div>
<div class="line"><a id="l01190" name="l01190"></a><span class="lineno"> 1190</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a85d0d89138b16394f874299e720a5334" name="a85d0d89138b16394f874299e720a5334"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85d0d89138b16394f874299e720a5334">&#9670;&nbsp;</a></span>s()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::s</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation uncertainty matrix S. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation uncertainty matrix S.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01438">1438</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01440" name="l01440"></a><span class="lineno"> 1440</span>{</div>
<div class="line"><a id="l01441" name="l01441"></a><span class="lineno"> 1441</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aeee7975d19763f616d88a6284f7a3b16">s</a>;</div>
<div class="line"><a id="l01442" name="l01442"></a><span class="lineno"> 1442</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_aeee7975d19763f616d88a6284f7a3b16"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#aeee7975d19763f616d88a6284f7a3b16">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::s</a></div><div class="ttdeci">innovation_uncertainty s</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00171">kalman.hpp:171</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4644c6c5e8987a82e6c2f39a9079d84d" name="a4644c6c5e8987a82e6c2f39a9079d84d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4644c6c5e8987a82e6c2f39a9079d84d">&#9670;&nbsp;</a></span>transition() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00829">829</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span>  {</div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a0883dfa21c7567a1518fef109d1a9602">transition</a> = std::forward&lt;decltype(callable)&gt;(callable);</div>
<div class="line"><a id="l00834" name="l00834"></a><span class="lineno">  834</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a0883dfa21c7567a1518fef109d1a9602"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a0883dfa21c7567a1518fef109d1a9602">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition</a></div><div class="ttdeci">std::function&lt; state(const state &amp;, const PredictionArguments &amp;...)&gt; transition</div><div class="ttdoc">State transition function f.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00265">kalman.hpp:265</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7846683e1f74966f3c855d1b01ba9c51" name="a7846683e1f74966f3c855d1b01ba9c51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7846683e1f74966f3c855d1b01ba9c51">&#9670;&nbsp;</a></span>transition() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::transition </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>callable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00821">821</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00824" name="l00824"></a><span class="lineno">  824</span>  {</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span>    <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a0883dfa21c7567a1518fef109d1a9602">transition</a> = callable;</div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6e6f32bce6418b0ee9eff0043f60b3b5" name="a6e6f32bce6418b0ee9eff0043f60b3b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e6f32bce6418b0ee9eff0043f60b3b5">&#9670;&nbsp;</a></span>u()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::u</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the control vector U. </p>
<dl class="section return"><dt>Returns</dt><dd>The control vector U.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01020">1020</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>{</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a40af56d017b38b9dd87c58df8f7e6ee4">u</a>;</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a40af56d017b38b9dd87c58df8f7e6ee4"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a40af56d017b38b9dd87c58df8f7e6ee4">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::u</a></div><div class="ttdeci">input u</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00175">kalman.hpp:175</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaba5bd00471dd86bb62ab433e601e290" name="aaba5bd00471dd86bb62ab433e601e290"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaba5bd00471dd86bb62ab433e601e290">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::update </td>
          <td>(</td>
          <td class="paramtype">const UpdateArguments &amp;...&#160;</td>
          <td class="paramname"><em>arguments</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>output_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the estimates with the outcome of a measurement. </p>
<p >Implements the Bayes' theorem. Combine one measurement and the prior estimate.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">output_z</td><td>Observation parameters. Types must be compatible with the <code>output</code> type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000024">Todo:</a></b></dt><dd><p class="startdd">Consider whether this method needs to exist or if the operator() is sufficient for all clients? </p>
<p class="enddd">Consider if returning the state vector X would be preferable? Or fluent interface? Would be compatible with an ES-EKF implementation? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01450">1450</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01452" name="l01452"></a><span class="lineno"> 1452</span>{</div>
<div class="line"><a id="l01453" name="l01453"></a><span class="lineno"> 1453</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_function" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#ada982df51bf70f5e21f6b5a7fa81cf7e">update</a>(arguments..., output_z...);</div>
<div class="line"><a id="l01454" name="l01454"></a><span class="lineno"> 1454</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2c098ccf298ad413115e454e7246a76" name="ad2c098ccf298ad413115e454e7246a76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2c098ccf298ad413115e454e7246a76">&#9670;&nbsp;</a></span>x() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the state estimate vector X. </p>
<dl class="section return"><dt>Returns</dt><dd>The state estimate vector X.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00946">946</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span>{</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">x</a>;</div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a465a2c8a276b63dbe54c2beacb1beb07"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x</a></div><div class="ttdeci">state x</div><div class="ttdoc">The state estimate vector x.</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00146">kalman.hpp:146</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad539bc1c2c592001bb2550722318ac95" name="ad539bc1c2c592001bb2550722318ac95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad539bc1c2c592001bb2550722318ac95">&#9670;&nbsp;</a></span>x() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x </td>
          <td>(</td>
          <td class="paramtype">auto &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">auto &amp;&amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first moved initializer used to set the state estimate vector X. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other moved initializers to set the state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00996">996</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00997" name="l00997"></a><span class="lineno">  997</span>{</div>
<div class="line"><a id="l00998" name="l00998"></a><span class="lineno">  998</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">x</a> = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ std::forward&lt;decltype(value)&gt;(value),</div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno">  999</span>                              std::forward&lt;decltype(values)&gt;(values)... });</div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span>}</div>
<div class="ttc" id="aclassfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37_xhtml_a7cc076d3e919201547efb890de7b58af"><div class="ttname"><a href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">fcarouge::kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00175">kalman.hpp:175</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a00c7538ba91b0e915e55ea4b671fd47c" name="a00c7538ba91b0e915e55ea4b671fd47c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00c7538ba91b0e915e55ea4b671fd47c">&#9670;&nbsp;</a></span>x() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const auto &amp;...&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The first copied initializer used to set the state estimate vector X. </td></tr>
    <tr><td class="paramname">values</td><td>The second and other copied initializers to set the state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00983">983</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00985" name="l00985"></a><span class="lineno">  985</span>{</div>
<div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">x</a> = std::move(<a class="code hl_typedef" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a>{ value, values... });</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4d03c5f472f16df72a2ba8999cffca60" name="a4d03c5f472f16df72a2ba8999cffca60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d03c5f472f16df72a2ba8999cffca60">&#9670;&nbsp;</a></span>x() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The copied state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00959">959</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00960" name="l00960"></a><span class="lineno">  960</span>{</div>
<div class="line"><a id="l00961" name="l00961"></a><span class="lineno">  961</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">x</a> = value;</div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno">  962</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="af3a1aaacd95a95705714ee6922992252" name="af3a1aaacd95a95705714ee6922992252"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3a1aaacd95a95705714ee6922992252">&#9670;&nbsp;</a></span>x() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::x </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a7cc076d3e919201547efb890de7b58af">state</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state estimate vector X. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The moved state estimate vector X.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00971">971</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l00972" name="l00972"></a><span class="lineno">  972</span>{</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>  <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a465a2c8a276b63dbe54c2beacb1beb07">x</a> = std::move(value);</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a859ab007e6da085502cb3415022e1182" name="a859ab007e6da085502cb3415022e1182"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a859ab007e6da085502cb3415022e1182">&#9670;&nbsp;</a></span>y()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::y</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the innovation vector Y. </p>
<dl class="section return"><dt>Returns</dt><dd>The innovation vector Y.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01426">1426</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01428" name="l01428"></a><span class="lineno"> 1428</span>{</div>
<div class="line"><a id="l01429" name="l01429"></a><span class="lineno"> 1429</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2484d5ac2634661f49bae5df3ed805e9">y</a>;</div>
<div class="line"><a id="l01430" name="l01430"></a><span class="lineno"> 1430</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a2484d5ac2634661f49bae5df3ed805e9"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a2484d5ac2634661f49bae5df3ed805e9">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::y</a></div><div class="ttdeci">innovation y</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00170">kalman.hpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1039f28547872c3792f1ee723f3712d5" name="a1039f28547872c3792f1ee723f3712d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1039f28547872c3792f1ee723f3712d5">&#9670;&nbsp;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::z</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the observation vector Z. </p>
<dl class="section return"><dt>Returns</dt><dd>The observation vector Z.</dd></dl>
<dl class="section user"><dt>Complexity</dt><dd>Constant. </dd></dl>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l01008">1008</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>
<div class="fragment"><div class="line"><a id="l01010" name="l01010"></a><span class="lineno"> 1010</span>{</div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"> 1011</span>  <span class="keywordflow">return</span> <a class="code hl_variable" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#af0e798a32b80dee9a86b68e6ea8fb664">filter</a>.<a class="code hl_variable" href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a71e02694e499381a6a4de04ae4dcb9e7">z</a>;</div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span>}</div>
<div class="ttc" id="astructfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a_xhtml_a71e02694e499381a6a4de04ae4dcb9e7"><div class="ttname"><a href="structfcarouge_1_1internal_1_1kalman_3_01_state_00_01_output_00_01_input_00_01_transpose_00_01_s189f7199b0f919964d120b8cacfaae8a.xhtml#a71e02694e499381a6a4de04ae4dcb9e7">fcarouge::internal::kalman&lt; State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::z</a></div><div class="ttdeci">output z</div><div class="ttdef"><b>Definition:</b> <a href="internal_2kalman_8hpp_source.xhtml#l00174">kalman.hpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af0e798a32b80dee9a86b68e6ea8fb664" name="af0e798a32b80dee9a86b68e6ea8fb664"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0e798a32b80dee9a86b68e6ea8fb664">&#9670;&nbsp;</a></span>filter</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , typename State , typename Output , typename Input , typename Transpose , typename Symmetrize , typename Divide , typename Identity , typename... UpdateArguments, typename... PredictionArguments&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml#a6d75c3fd77c3e71c27f557d8dee66ec7">implementation</a> <a class="el" href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a>&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;::filter</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encapsulates the implementation details of the filter. </p>

<p class="definition">Definition at line <a class="el" href="kalman_8hpp_source.xhtml#l00935">935</a> of file <a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/fcarouge/<a class="el" href="kalman_8hpp_source.xhtml">kalman.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="classfcarouge_1_1kalman_3_01_type_00_01_state_00_01_output_00_01_input_00_01_transpose_00_01_symc9c4c0380af457ba18e9450122cdac37.xhtml">kalman&lt; Type, State, Output, Input, Transpose, Symmetrize, Divide, Identity, std::tuple&lt; UpdateArguments... &gt;, std::tuple&lt; PredictionArguments... &gt; &gt;</a></li>
    <li class="footer">Generated on Fri Jul 8 2022 01:51:53 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.2 </li>
  </ul>
</div>
</body>
</html>
