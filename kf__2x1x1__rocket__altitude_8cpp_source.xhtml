<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: /github/workspace/sample/kf_2x1x1_rocket_altitude.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.2.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kf__2x1x1__rocket__altitude_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kf_2x1x1_rocket_altitude.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kf__2x1x1__rocket__altitude_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &quot;<a class="code" href="kalman_8hpp.xhtml">fcarouge/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Eigen/Eigen&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a> {</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml">   10</a></span><span class="keyword">namespace </span>{</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ac8465c2c1ce5f48416e03b9b4c1c236b">   12</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Size&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ac8465c2c1ce5f48416e03b9b4c1c236b">vector</a> = Eigen::Vector&lt;Type, Size&gt;;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a6cd03984df2ea54a7b8686e60d08de17">   48</a></span>[[maybe_unused]] <span class="keyword">auto</span> <a class="code hl_variable" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a6cd03984df2ea54a7b8686e60d08de17">kf_2x1x1_rocket_altitude</a>{[] {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="comment">// A 2x1x1 filter, constant acceleration dynamic model, no control, step time.</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keyword">using </span><a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> = <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman&lt;vector&lt;double, 2&gt;</a>, double, double, std::divides&lt;void&gt;,</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>                        std::tuple&lt;&gt;, std::tuple&lt;std::chrono::milliseconds&gt;&gt;;</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> filter;</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="comment">// Initialization</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="comment">// We don&#39;t know the rocket location; we will set initial position and</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  <span class="comment">// velocity to 0.</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>(0., 0.);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="comment">// Since our initial state vector is a guess, we will set a very high estimate</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="comment">// uncertainty. The high estimate uncertainty results in high Kalman gain,</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  <span class="comment">// giving a high weight to the measurement.</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">kalman::estimate_uncertainty</a>{{500, 0}, {0, 500}});</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <span class="comment">// Prediction</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="comment">// We will assume a discrete noise model - the noise is different at each time</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="comment">// period, but it is constant between time periods. In our previous example,</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="comment">// we used the system&#39;s random variance in acceleration σ^2 as a multiplier of</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="comment">// the process noise matrix. But here, we have an accelerometer that measures</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="comment">// the system random acceleration. The accelerometer error v is much lower</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  <span class="comment">// than system&#39;s random acceleration, therefore we use ϵ^2 as a multiplier of</span></div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  <span class="comment">// the process noise matrix. This makes our estimation uncertainty much lower!</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">q</a>([]([[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">kalman::state</a> &amp;x,</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>              <span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keywordflow">return</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">kalman::process_uncertainty</a>{</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>        {0.1 * 0.1 * dt * dt * dt * dt / 4, 0.1 * 0.1 * dt * dt * dt / 2},</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>        {0.1 * 0.1 * dt * dt * dt / 2, 0.1 * 0.1 * dt * dt}};</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  });</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="comment">// The state transition matrix F would be:</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">f</a>([]([[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">kalman::state</a> &amp;x,</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>              [[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">kalman::input</a> &amp;u,</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>              <span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    <span class="keywordflow">return</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">kalman::state_transition</a>{{1, dt}, {0, 1}};</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  });</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="comment">// The control matrix G would be:</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">g</a>([](<span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    <span class="keywordflow">return</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">kalman::input_control</a>{0.0313, dt};</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  });</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  <span class="comment">// We also don&#39;t know what the rocket acceleration is, but we can assume that</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  <span class="comment">// it&#39;s greater than zero. Let&#39;s assume: u0 = g</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keyword">const</span> <span class="keywordtype">double</span> gravity{-9.8}; <span class="comment">// [m.s^-2]</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="keyword">const</span> std::chrono::milliseconds delta_time{250};</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56">predict</a>(delta_time, -gravity);</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[0] / 0.3) &lt; 0.03 &amp;&amp;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[1] / 2.45) &lt; 0.03 &amp;&amp;</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>         <span class="stringliteral">&quot;The state estimates expected at 3% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 531.25) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 1) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 0) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 1) / 500) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  <span class="comment">// Measure and Update</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  <span class="comment">// The dimension of zn is 1x1 and the dimension of xn is 2x1, so the dimension</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <span class="comment">// of the observation matrix H will be 1x2.</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">h</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">kalman::output_model</a>{1., 0.});</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="comment">// For the sake of the example simplicity, we will assume a constant</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <span class="comment">// measurement uncertainty: R1 = R2...Rn-1 = Rn = R.</span></div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">r</a>(<a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">kalman::output_uncertainty</a>{400.});</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2697eb6865282a481107ec3aa4d42af5">update</a>(-32.4);</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[0] / -18.35) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[1] / -1.94) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 228.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 1) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 0) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56">predict</a>(delta_time, 39.72 + gravity);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[0] / -17.9) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[1] / 5.54) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 285.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 1) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 0) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="comment">// And so on, run a step of the filter, updating and predicting, every</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="comment">// measurements period: Δt = 250ms. The period is constant but passed as</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="comment">// variable for the example. The lambda helper shows how to simplify the</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="comment">// filter step call.</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">const</span> <span class="keyword">auto</span> step{[&amp;filter](<span class="keywordtype">double</span> altitude,</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>                            std::chrono::milliseconds step_time,</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>                            <span class="keywordtype">double</span> acceleration) {</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2697eb6865282a481107ec3aa4d42af5">update</a>(altitude);</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56">predict</a>(step_time, acceleration);</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  }};</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  step(-11.1, delta_time, 40.02 + gravity);</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[0] / -12.3) &lt; 0.002 &amp;&amp;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[1] / 14.8) &lt; 0.002 &amp;&amp;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>         <span class="stringliteral">&quot;The state estimates expected at 0.2% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 244.9) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 1) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 0) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 1) / 438.8) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  step(18., delta_time, 39.97 + gravity);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  step(22.9, delta_time, 39.81 + gravity);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  step(19.5, delta_time, 39.75 + gravity);</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  step(28.5, delta_time, 39.6 + gravity);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  step(46.5, delta_time, 39.77 + gravity);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  step(68.9, delta_time, 39.83 + gravity);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  step(48.2, delta_time, 39.73 + gravity);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  step(56.1, delta_time, 39.87 + gravity);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  step(90.5, delta_time, 39.81 + gravity);</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  step(104.9, delta_time, 39.92 + gravity);</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  step(140.9, delta_time, 39.78 + gravity);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  step(148., delta_time, 39.98 + gravity);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  step(187.6, delta_time, 39.76 + gravity);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  step(209.2, delta_time, 39.86 + gravity);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  step(244.6, delta_time, 39.61 + gravity);</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  step(276.4, delta_time, 39.86 + gravity);</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  step(323.5, delta_time, 39.74 + gravity);</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  step(357.3, delta_time, 39.87 + gravity);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  step(357.4, delta_time, 39.63 + gravity);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  step(398.3, delta_time, 39.67 + gravity);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  step(446.7, delta_time, 39.96 + gravity);</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  step(465.1, delta_time, 39.8 + gravity);</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  step(529.4, delta_time, 39.89 + gravity);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  step(570.4, delta_time, 39.85 + gravity);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  step(636.8, delta_time, 39.9 + gravity);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  step(693.3, delta_time, 39.81 + gravity);</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  step(707.3, delta_time, 39.81 + gravity);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a2697eb6865282a481107ec3aa4d42af5">update</a>(748.5);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="comment">// The Kalman gain for altitude converged to 0.12, which means that the</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="comment">// estimation weight is much higher than the measurement weight.</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 49.3) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>         <span class="stringliteral">&quot;At this point, the altitude uncertainty px = 49.3, which means that &quot;</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>         <span class="stringliteral">&quot;the standard deviation of the prediction is square root of 49.3: &quot;</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>         <span class="stringliteral">&quot;7.02m (remember that the standard deviation of the measurement is &quot;</span></div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>         <span class="stringliteral">&quot;20m).&quot;</span>);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56">predict</a>(delta_time, 39.68 + gravity);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="comment">// At the beginning, the estimated altitude is influenced by measurements and</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="comment">// it is not aligned well with the true rocket altitude, since the</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="comment">// measurements are very noisy. But as the Kalman gain converges, the noisy</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="comment">// measurement has less influence and the estimated altitude is well aligned</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  <span class="comment">// with the true altitude. In this example we don&#39;t have any maneuvers that</span></div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="comment">// cause acceleration changes, but if we had, the control input</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <span class="comment">// (accelerometer) would update the state extrapolation equation.</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[0] / 831.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">x</a>()[1] / 222.94) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  assert(std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 0) / 54.3) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(0, 1) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 0) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>         std::abs(1 - filter.<a class="code hl_function" href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">p</a>()(1, 1) / 2.6) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>}()};</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>} <span class="comment">// namespace</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>} <span class="comment">// namespace fcarouge::sample</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdoc">A generic Kalman filter.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00166">kalman.hpp:166</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a052507ea7e38da8fbbc78e3bf04c96b2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a052507ea7e38da8fbbc78e3bf04c96b2">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00220">kalman.hpp:220</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a0b119b5d090c39ddf0a5aaafbeeb8f6c"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a0b119b5d090c39ddf0a5aaafbeeb8f6c">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00215">kalman.hpp:215</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1d1f1dacf69723b9a2027df00faa44d7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1d1f1dacf69723b9a2027df00faa44d7">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00209">kalman.hpp:209</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a20e4a128994e061d95c7cc8547edeae2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a20e4a128994e061d95c7cc8547edeae2">fcarouge::kalman::q</a></div><div class="ttdeci">constexpr auto q() const -&gt; const process_uncertainty &amp;</div><div class="ttdoc">Returns the process noise covariance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00119">detail.hpp:119</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a2697eb6865282a481107ec3aa4d42af5"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a2697eb6865282a481107ec3aa4d42af5">fcarouge::kalman::update</a></div><div class="ttdeci">constexpr void update(const auto &amp;...arguments)</div><div class="ttdoc">Updates the estimates with the outcome of a measurement.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00324">detail.hpp:324</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a321ed407a09472e739e593efd9d89dd7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a321ed407a09472e739e593efd9d89dd7">fcarouge::kalman::p</a></div><div class="ttdeci">constexpr auto p() const -&gt; const estimate_uncertainty &amp;</div><div class="ttdoc">Returns the estimated covariance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00093">detail.hpp:93</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a3898db7da690aec04fa4621727d4bf56"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a3898db7da690aec04fa4621727d4bf56">fcarouge::kalman::predict</a></div><div class="ttdeci">constexpr void predict(const auto &amp;...arguments)</div><div class="ttdoc">Produces estimates of the state variables and uncertainties.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00342">detail.hpp:342</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a4734807882ed3bd3aeaffbb678e37be7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a4734807882ed3bd3aeaffbb678e37be7">fcarouge::kalman::g</a></div><div class="ttdeci">constexpr auto g() const -&gt; const input_control &amp;requires(not std::is_same_v&lt; Input, void &gt;)</div><div class="ttdoc">Returns the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00247">detail.hpp:247</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a57bfc90129e1eff359b9750cf7e3c38a"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a57bfc90129e1eff359b9750cf7e3c38a">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdoc">Type of the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00194">kalman.hpp:194</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a70e5dcb292b21eb58a81edf2b50bdf98"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a70e5dcb292b21eb58a81edf2b50bdf98">fcarouge::kalman::h</a></div><div class="ttdeci">constexpr auto h() const -&gt; const output_model &amp;</div><div class="ttdoc">Returns the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00215">detail.hpp:215</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a8fe68f6c32515ec3e338c9c3d205a753"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a8fe68f6c32515ec3e338c9c3d205a753">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00232">kalman.hpp:232</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a97aceea287d6f047b294f556db529baa"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a97aceea287d6f047b294f556db529baa">fcarouge::kalman::f</a></div><div class="ttdeci">constexpr auto f() const -&gt; const state_transition &amp;</div><div class="ttdoc">Returns the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00183">detail.hpp:183</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aadb2093697f3eb6b26b80d0f1af5fbed"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aadb2093697f3eb6b26b80d0f1af5fbed">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00225">kalman.hpp:225</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aba3d1735b4c0ee10bfa6b2dfa2266ad7"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aba3d1735b4c0ee10bfa6b2dfa2266ad7">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00212">kalman.hpp:212</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ac1f06b20e6494b0301d5b2ab8e4214b3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ac1f06b20e6494b0301d5b2ab8e4214b3">fcarouge::kalman::x</a></div><div class="ttdeci">constexpr auto x() const -&gt; const state &amp;</div><div class="ttdoc">Returns the state estimate column vector X.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00048">detail.hpp:48</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ae50bc6a7b064ac6c91ddab3791b120db"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ae50bc6a7b064ac6c91ddab3791b120db">fcarouge::kalman::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00204">kalman.hpp:204</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_afd422d2d0b9bdf85ffc00df9ae380be3"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#afd422d2d0b9bdf85ffc00df9ae380be3">fcarouge::kalman::r</a></div><div class="ttdeci">constexpr auto r() const -&gt; const output_uncertainty &amp;</div><div class="ttdoc">Returns the observation noise covariance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="detail_8hpp_source.xhtml#l00151">detail.hpp:151</a></div></div>
<div class="ttc" id="akalman_8hpp_xhtml"><div class="ttname"><a href="kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The Kalman filter-class and library top-level header.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a6cd03984df2ea54a7b8686e60d08de17"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a6cd03984df2ea54a7b8686e60d08de17">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::kf_2x1x1_rocket_altitude</a></div><div class="ttdeci">auto kf_2x1x1_rocket_altitude</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00048">kf_2x1x1_rocket_altitude.cpp:48</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_ac8465c2c1ce5f48416e03b9b4c1c236b"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ac8465c2c1ce5f48416e03b9b4c1c236b">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::vector</a></div><div class="ttdeci">Eigen::Vector&lt; Type, Size &gt; vector</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00012">kf_2x1x1_rocket_altitude.cpp:12</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a></div><div class="ttdoc">Examples, tutorials, demonstrators of the library.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_c29eeb5af533606caea8a09e66794740.xhtml">sample</a></li><li class="navelem"><a class="el" href="kf__2x1x1__rocket__altitude_8cpp.xhtml">kf_2x1x1_rocket_altitude.cpp</a></li>
    <li class="footer">Generated on Mon Jan 16 2023 04:16:12 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
