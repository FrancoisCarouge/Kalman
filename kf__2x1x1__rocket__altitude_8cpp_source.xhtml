<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: /github/workspace/sample/kf_2x1x1_rocket_altitude.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.3</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('kf__2x1x1__rocket__altitude_8cpp_source.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kf_2x1x1_rocket_altitude.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="kf__2x1x1__rocket__altitude_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.5.3</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#include &quot;<a class="code" href="kalman_8hpp.xhtml">fcarouge/kalman.hpp</a>&quot;</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#include &quot;fcarouge/linalg.hpp&quot;</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a> {</div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml">   47</a></span><span class="keyword">namespace </span>{</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">   48</a></span><span class="keyword">template</span> &lt;auto Size&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">vector</a> = column_vector&lt;double, Size&gt;;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">   49</a></span><span class="keyword">template</span> &lt;auto Row, auto Column&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">matrix</a> = <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">matrix&lt;double, Row, Column&gt;</a>;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a457455bb30add3297b7e2a0ac9a18bc1">   50</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a457455bb30add3297b7e2a0ac9a18bc1">altitude</a> = double;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ae5283deebaa0a27e883752f003e5d55e">   51</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ae5283deebaa0a27e883752f003e5d55e">acceleration</a> = double;</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">   52</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">milliseconds</a> = std::chrono::milliseconds;</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a78bfaeb377595995e72d5af14e0c82f3">   53</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a78bfaeb377595995e72d5af14e0c82f3">state</a> = fcarouge::state&lt;vector&lt;2&gt;&gt;;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="};">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a8a72f3aea780587350d7527cfac09b9d">   89</a></span>[[maybe_unused]] <span class="keyword">auto</span> sample{[] {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="comment">// A 2x1x1 filter, constant acceleration dynamic model, no control, step</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="comment">// time.</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <a class="code hl_class" href="classfcarouge_1_1kalman.xhtml">kalman</a> filter{</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>      <span class="comment">// We don&#39;t know the rocket location; we will set initial position and</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>      <span class="comment">// velocity to state X = [0.0, 0.0].</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a78bfaeb377595995e72d5af14e0c82f3">state</a>{0., 0.},</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>      <span class="comment">// The filter estimates the output Z altitude as a double [m].</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>      output&lt;altitude&gt;,</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>      <span class="comment">// The filter receives in the input U accelerometer as a double [m.s^-2].</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>      input&lt;acceleration&gt;,</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>      <span class="comment">// Since our initial state vector is a guess, we will set a very high</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      <span class="comment">// estimate uncertainty. The high estimate uncertainty P results in high</span></div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      <span class="comment">// Kalman gain, giving a high weight to the measurement.</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      estimate_uncertainty{{500., 0.}, {0., 500.}},</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>      <span class="comment">// We will assume a discrete noise model - the noise is different at each</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>      <span class="comment">// time period, but it is constant between time periods. In our previous</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>      <span class="comment">// example, we used the system&#39;s random variance in acceleration σ^2 as a</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      <span class="comment">// multiplier of the process noise matrix. But here, we have an</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>      <span class="comment">// accelerometer that measures the system random acceleration. The</span></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>      <span class="comment">// accelerometer error v is much lower than system&#39;s random acceleration,</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>      <span class="comment">// therefore we use ϵ^2 as a multiplier of the process noise matrix. This</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>      <span class="comment">// makes our estimation uncertainty much lower!</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>      process_uncertainty{[]([[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">vector&lt;2&gt;</a> &amp;x,</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>                             <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">milliseconds</a> &amp;delta_time) {</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>        <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">matrix&lt;2, 2&gt;</a>{</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>            {0.1 * 0.1 * dt * dt * dt * dt / 4, 0.1 * 0.1 * dt * dt * dt / 2},</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>            {0.1 * 0.1 * dt * dt * dt / 2, 0.1 * 0.1 * dt * dt}};</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>      }},</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>      <span class="comment">// For the sake of the example simplicity, we will assume a constant</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>      <span class="comment">// measurement uncertainty: R1 = R2...Rn-1 = Rn = R.</span></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>      output_uncertainty{400.},</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>      <span class="comment">// The state transition matrix F would be:</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      state_transition{[]([[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">vector&lt;2&gt;</a> &amp;x,</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>                          [[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ae5283deebaa0a27e883752f003e5d55e">acceleration</a> &amp;u,</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>                          <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">milliseconds</a> &amp;delta_time) {</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">matrix&lt;2, 2&gt;</a>{{1., dt}, {0., 1.}};</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>      }},</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>      <span class="comment">// The control matrix G would be:</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>      input_control{[](<span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">milliseconds</a> &amp;delta_time) {</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>        <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">vector&lt;2&gt;</a>{0.0313, dt};</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>      }},</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>      <span class="comment">// The filter prediction uses a delta time [ms] parameter.</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>      prediction_types&lt;milliseconds&gt;};</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="comment">// We also don&#39;t know what the rocket acceleration is, but we can assume that</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="comment">// it&#39;s greater than zero. Let&#39;s assume: u0 = g</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  <span class="keyword">const</span> <span class="keywordtype">double</span> gravity{-9.8}; <span class="comment">// [m.s^-2]</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="keyword">const</span> <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">milliseconds</a> delta_time{250};</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  filter.predict(delta_time, -gravity);</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  assert(std::abs(1 - filter.x()[0] / 0.3) &lt; 0.03 &amp;&amp;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>         std::abs(1 - filter.x()[1] / 2.45) &lt; 0.03 &amp;&amp;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>         <span class="stringliteral">&quot;The state estimates expected at 3% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  assert(std::abs(1 - filter.p()(0, 0) / 531.25) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>         std::abs(1 - filter.p()(0, 1) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>         std::abs(1 - filter.p()(1, 0) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>         std::abs(1 - filter.p()(1, 1) / 500) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  filter.update(-32.4);</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  assert(std::abs(1 - filter.x()[0] / -18.35) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>         std::abs(1 - filter.x()[1] / -1.94) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  assert(std::abs(1 - filter.p()(0, 0) / 228.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>         std::abs(1 - filter.p()(0, 1) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>         std::abs(1 - filter.p()(1, 0) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  filter.predict(delta_time, 39.72 + gravity);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  assert(std::abs(1 - filter.x()[0] / -17.9) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>         std::abs(1 - filter.x()[1] / 5.54) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  assert(std::abs(1 - filter.p()(0, 0) / 285.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>         std::abs(1 - filter.p()(0, 1) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>         std::abs(1 - filter.p()(1, 0) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="comment">// And so on, run a step of the filter, updating and predicting, every</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="comment">// measurements period: Δt = 250ms. The period is constant but passed as</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="comment">// variable for the example. The lambda helper shows how to simplify the</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="comment">// filter step call.</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  <span class="keyword">const</span> <span class="keyword">auto</span> step{[&amp;filter, &amp;delta_time](<a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a457455bb30add3297b7e2a0ac9a18bc1">altitude</a> measured_altitude,</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>                                         <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ae5283deebaa0a27e883752f003e5d55e">acceleration</a> measured_acceleration) {</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    filter.update(measured_altitude);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    filter.predict(delta_time, measured_acceleration);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  }};</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  step(-11.1, 40.02 + gravity);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  assert(std::abs(1 - filter.x()[0] / -12.3) &lt; 0.002 &amp;&amp;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>         std::abs(1 - filter.x()[1] / 14.8) &lt; 0.002 &amp;&amp;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>         <span class="stringliteral">&quot;The state estimates expected at 0.2% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  assert(std::abs(1 - filter.p()(0, 0) / 244.9) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>         std::abs(1 - filter.p()(0, 1) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>         std::abs(1 - filter.p()(1, 0) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>         std::abs(1 - filter.p()(1, 1) / 438.8) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  step(18., 39.97 + gravity);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  step(22.9, 39.81 + gravity);</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  step(19.5, 39.75 + gravity);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  step(28.5, 39.6 + gravity);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  step(46.5, 39.77 + gravity);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  step(68.9, 39.83 + gravity);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  step(48.2, 39.73 + gravity);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  step(56.1, 39.87 + gravity);</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  step(90.5, 39.81 + gravity);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  step(104.9, 39.92 + gravity);</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  step(140.9, 39.78 + gravity);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  step(148., 39.98 + gravity);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  step(187.6, 39.76 + gravity);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  step(209.2, 39.86 + gravity);</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  step(244.6, 39.61 + gravity);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  step(276.4, 39.86 + gravity);</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  step(323.5, 39.74 + gravity);</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  step(357.3, 39.87 + gravity);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  step(357.4, 39.63 + gravity);</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  step(398.3, 39.67 + gravity);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  step(446.7, 39.96 + gravity);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  step(465.1, 39.8 + gravity);</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  step(529.4, 39.89 + gravity);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  step(570.4, 39.85 + gravity);</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  step(636.8, 39.9 + gravity);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>  step(693.3, 39.81 + gravity);</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  step(707.3, 39.81 + gravity);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  filter.update(748.5);</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <span class="comment">// The Kalman gain for altitude converged to 0.12, which means that the</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="comment">// estimation weight is much higher than the measurement weight.</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  assert(std::abs(1 - filter.p()(0, 0) / 49.3) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>         <span class="stringliteral">&quot;At this point, the altitude uncertainty px = 49.3, which means that &quot;</span></div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>         <span class="stringliteral">&quot;the standard deviation of the prediction is square root of 49.3: &quot;</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>         <span class="stringliteral">&quot;7.02m (remember that the standard deviation of the measurement is &quot;</span></div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>         <span class="stringliteral">&quot;20m).&quot;</span>);</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  filter.predict(delta_time, 39.68 + gravity);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="comment">// At the beginning, the estimated altitude is influenced by measurements and</span></div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="comment">// it is not aligned well with the true rocket altitude, since the</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  <span class="comment">// measurements are very noisy. But as the Kalman gain converges, the noisy</span></div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="comment">// measurement has less influence and the estimated altitude is well aligned</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="comment">// with the true altitude. In this example we don&#39;t have any maneuvers that</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  <span class="comment">// cause acceleration changes, but if we had, the control input</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="comment">// (accelerometer) would update the state extrapolation equation.</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  assert(std::abs(1 - filter.x()[0] / 831.5) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>         std::abs(1 - filter.x()[1] / 222.94) &lt; 0.001 &amp;&amp;</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  assert(std::abs(1 - filter.p()(0, 0) / 54.3) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>         std::abs(1 - filter.p()(0, 1) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>         std::abs(1 - filter.p()(1, 0) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>         std::abs(1 - filter.p()(1, 1) / 2.6) &lt; 0.01 &amp;&amp;</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>         <span class="stringliteral">&quot;The estimate uncertainty expected at 1% accuracy.&quot;</span>);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>}()};</div>
</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>} <span class="comment">// namespace</span></div>
</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>} <span class="comment">// namespace fcarouge::sample</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml">fcarouge::kalman</a></div><div class="ttdoc">A generic Kalman filter.</div><div class="ttdef"><b>Definition</b> <a href="kalman__forward_8hpp_source.xhtml#l00049">kalman_forward.hpp:49</a></div></div>
<div class="ttc" id="akalman_8hpp_xhtml"><div class="ttname"><a href="kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The Kalman filter class and library top-level header.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a0a8c9182865abc20698872fe3f7a1e4b"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a0a8c9182865abc20698872fe3f7a1e4b">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::matrix</a></div><div class="ttdeci">matrix&lt; double, Row, Column &gt; matrix</div><div class="ttdef"><b>Definition</b> <a href="#l00049">kf_2x1x1_rocket_altitude.cpp:49</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a457455bb30add3297b7e2a0ac9a18bc1"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a457455bb30add3297b7e2a0ac9a18bc1">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::altitude</a></div><div class="ttdeci">double altitude</div><div class="ttdef"><b>Definition</b> <a href="#l00050">kf_2x1x1_rocket_altitude.cpp:50</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a78bfaeb377595995e72d5af14e0c82f3"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a78bfaeb377595995e72d5af14e0c82f3">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::state</a></div><div class="ttdeci">fcarouge::state&lt; vector&lt; 2 &gt; &gt; state</div><div class="ttdef"><b>Definition</b> <a href="#l00053">kf_2x1x1_rocket_altitude.cpp:53</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_abf9ddf2209d93af4f9238fd48f134976"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#abf9ddf2209d93af4f9238fd48f134976">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::milliseconds</a></div><div class="ttdeci">std::chrono::milliseconds milliseconds</div><div class="ttdef"><b>Definition</b> <a href="#l00052">kf_2x1x1_rocket_altitude.cpp:52</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_adf7571d0ee04963222d6ea9bcbe010f7"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#adf7571d0ee04963222d6ea9bcbe010f7">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::vector</a></div><div class="ttdeci">column_vector&lt; double, Size &gt; vector</div><div class="ttdef"><b>Definition</b> <a href="#l00048">kf_2x1x1_rocket_altitude.cpp:48</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_ae5283deebaa0a27e883752f003e5d55e"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#ae5283deebaa0a27e883752f003e5d55e">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::acceleration</a></div><div class="ttdeci">double acceleration</div><div class="ttdef"><b>Definition</b> <a href="#l00051">kf_2x1x1_rocket_altitude.cpp:51</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a></div><div class="ttdoc">Examples, tutorials, demonstrators of the library.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_c29eeb5af533606caea8a09e66794740.xhtml">sample</a></li><li class="navelem"><a class="el" href="kf__2x1x1__rocket__altitude_8cpp.xhtml">kf_2x1x1_rocket_altitude.cpp</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
