<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: fcarouge::naive::matrix&lt; Type, Row, Column &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.4.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('structfcarouge_1_1naive_1_1matrix.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="structfcarouge_1_1naive_1_1matrix-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::naive::matrix&lt; Type, Row, Column &gt; Struct Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Naive matrix.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::naive::matrix&lt; Type, Row, Column &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1naive_1_1matrix__coll__graph.svg" width="156" height="567"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad72d07aa359b43dea01b2e0b47a0c7b1" id="r_ad72d07aa359b43dea01b2e0b47a0c7b1"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad72d07aa359b43dea01b2e0b47a0c7b1">matrix</a> ()=default</td></tr>
<tr class="separator:ad72d07aa359b43dea01b2e0b47a0c7b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad39d0dd9c9f91b6878b77a15e57d8f0e" id="r_ad39d0dd9c9f91b6878b77a15e57d8f0e"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad39d0dd9c9f91b6878b77a15e57d8f0e">matrix</a> (const <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;other)=default</td></tr>
<tr class="separator:ad39d0dd9c9f91b6878b77a15e57d8f0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1da3b795f0880b0e1eb9a8036d49284" id="r_ab1da3b795f0880b0e1eb9a8036d49284"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab1da3b795f0880b0e1eb9a8036d49284">operator=</a> (const <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;other)=default</td></tr>
<tr class="separator:ab1da3b795f0880b0e1eb9a8036d49284"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3b04998ecf0eac3366edf04d716fa1" id="r_a0d3b04998ecf0eac3366edf04d716fa1"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0d3b04998ecf0eac3366edf04d716fa1">matrix</a> (<a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a0d3b04998ecf0eac3366edf04d716fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ae095d8bfbb8bc9be23d6c1cc09cbea" id="r_a5ae095d8bfbb8bc9be23d6c1cc09cbea"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5ae095d8bfbb8bc9be23d6c1cc09cbea">operator=</a> (<a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a5ae095d8bfbb8bc9be23d6c1cc09cbea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550d2e2f94551475a2edf67de9db9b33" id="r_a550d2e2f94551475a2edf67de9db9b33"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a550d2e2f94551475a2edf67de9db9b33">matrix</a> (const std::same_as&lt; Type &gt; auto &amp;...elements)</td></tr>
<tr class="separator:a550d2e2f94551475a2edf67de9db9b33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbac7807c7e63edce98a809b36e8c3cc" id="r_abbac7807c7e63edce98a809b36e8c3cc"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abbac7807c7e63edce98a809b36e8c3cc">matrix</a> (const std::same_as&lt; Type &gt; auto &amp;...elements)</td></tr>
<tr class="separator:abbac7807c7e63edce98a809b36e8c3cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f786ae58d1540e21a1f6963557622df" id="r_a2f786ae58d1540e21a1f6963557622df"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2f786ae58d1540e21a1f6963557622df">matrix</a> (const Type(&amp;elements)[Column])</td></tr>
<tr class="separator:a2f786ae58d1540e21a1f6963557622df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9c1d2f6c83e7ec74f763ea9977b58b2" id="r_ad9c1d2f6c83e7ec74f763ea9977b58b2"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad9c1d2f6c83e7ec74f763ea9977b58b2">matrix</a> (const Type(&amp;elements)[Row])</td></tr>
<tr class="separator:ad9c1d2f6c83e7ec74f763ea9977b58b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84e55200de57e3295d38f5e8962f9325" id="r_a84e55200de57e3295d38f5e8962f9325"><td class="memTemplParams" colspan="2">template&lt;typename... Types, std::size_t... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;Type, Types&gt;...&gt; &amp;&amp; ((Columns == Column) &amp;&amp; ... &amp;&amp; true))</td></tr>
<tr class="memitem:a84e55200de57e3295d38f5e8962f9325"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a84e55200de57e3295d38f5e8962f9325">matrix</a> (const Types(&amp;...rows)[Columns])</td></tr>
<tr class="separator:a84e55200de57e3295d38f5e8962f9325"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a12047f7f62b4842b3009e50d75faa6" id="r_a9a12047f7f62b4842b3009e50d75faa6"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9a12047f7f62b4842b3009e50d75faa6">matrix</a> (std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt; rows)</td></tr>
<tr class="separator:a9a12047f7f62b4842b3009e50d75faa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeefcf1415dc5bad02fb74ccdf536983a" id="r_aeefcf1415dc5bad02fb74ccdf536983a"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aeefcf1415dc5bad02fb74ccdf536983a">explicit</a> (false) operator Type() const</td></tr>
<tr class="separator:aeefcf1415dc5bad02fb74ccdf536983a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f37507515b5165e56ca1c7b9c6df128" id="r_a2f37507515b5165e56ca1c7b9c6df128"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2f37507515b5165e56ca1c7b9c6df128">operator[]</a> (this auto &amp;&amp;self, std::size_t index)</td></tr>
<tr class="separator:a2f37507515b5165e56ca1c7b9c6df128"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac056edb5c0976f1c2f03a6d9934120" id="r_a7ac056edb5c0976f1c2f03a6d9934120"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ac056edb5c0976f1c2f03a6d9934120">operator[]</a> (this auto &amp;&amp;self, std::size_t index)</td></tr>
<tr class="separator:a7ac056edb5c0976f1c2f03a6d9934120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfed1b3b01967dd8201a8b66fc057c86" id="r_acfed1b3b01967dd8201a8b66fc057c86"><td class="memItemLeft" align="right" valign="top">constexpr Type &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acfed1b3b01967dd8201a8b66fc057c86">operator[]</a> (this auto &amp;&amp;self, std::size_t row, std::size_t column)</td></tr>
<tr class="separator:acfed1b3b01967dd8201a8b66fc057c86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946ee778af019944e7c441730b52362a" id="r_a946ee778af019944e7c441730b52362a"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a946ee778af019944e7c441730b52362a">operator()</a> (this auto &amp;&amp;self, std::size_t index)</td></tr>
<tr class="separator:a946ee778af019944e7c441730b52362a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed5e035f5f6a4fe01eebe2af57be998a" id="r_aed5e035f5f6a4fe01eebe2af57be998a"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aed5e035f5f6a4fe01eebe2af57be998a">operator()</a> (this auto &amp;&amp;self, std::size_t index)</td></tr>
<tr class="separator:aed5e035f5f6a4fe01eebe2af57be998a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a035cd297824dc7614675ee258400dd72" id="r_a035cd297824dc7614675ee258400dd72"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a035cd297824dc7614675ee258400dd72">operator()</a> (this auto &amp;&amp;self, std::size_t row, std::size_t column)</td></tr>
<tr class="separator:a035cd297824dc7614675ee258400dd72"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a15e1f8de54dbe4186bf17501a9ac073b" id="r_a15e1f8de54dbe4186bf17501a9ac073b"><td class="memItemLeft" align="right" valign="top">Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a> [Row][Column] {}</td></tr>
<tr class="separator:a15e1f8de54dbe4186bf17501a9ac073b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type = double, std::size_t Row = 1, std::size_t Column = 1&gt;<br />
struct fcarouge::naive::matrix&lt; Type, Row, Column &gt;</div><p>Naive matrix. </p>
<p>An array-of-arrays naive implementation matrix.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Type</td><td>The matrix element type. </td></tr>
    <tr><td class="paramname">Row</td><td>The number of rows of the matrix. </td></tr>
    <tr><td class="paramname">Column</td><td>The number of columns of the matrix. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00068">68</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad72d07aa359b43dea01b2e0b47a0c7b1" name="ad72d07aa359b43dea01b2e0b47a0c7b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad72d07aa359b43dea01b2e0b47a0c7b1">&#9670;&#160;</a></span>matrix() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad39d0dd9c9f91b6878b77a15e57d8f0e" name="ad39d0dd9c9f91b6878b77a15e57d8f0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad39d0dd9c9f91b6878b77a15e57d8f0e">&#9670;&#160;</a></span>matrix() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d3b04998ecf0eac3366edf04d716fa1" name="a0d3b04998ecf0eac3366edf04d716fa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3b04998ecf0eac3366edf04d716fa1">&#9670;&#160;</a></span>matrix() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a550d2e2f94551475a2edf67de9db9b33" name="a550d2e2f94551475a2edf67de9db9b33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a550d2e2f94551475a2edf67de9db9b33">&#9670;&#160;</a></span>matrix() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const std::same_as&lt; Type &gt; auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>elements</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00079">79</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   81</span>      : <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>{{elements...}} {}</div>
<div class="ttc" id="astructfcarouge_1_1naive_1_1matrix_xhtml_a15e1f8de54dbe4186bf17501a9ac073b"><div class="ttname"><a href="#a15e1f8de54dbe4186bf17501a9ac073b">fcarouge::naive::matrix::data</a></div><div class="ttdeci">Type data[Row][Column]</div><div class="ttdef"><b>Definition</b> <a href="naive_8hpp_source.xhtml#l00177">naive.hpp:177</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abbac7807c7e63edce98a809b36e8c3cc" name="abbac7807c7e63edce98a809b36e8c3cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbac7807c7e63edce98a809b36e8c3cc">&#9670;&#160;</a></span>matrix() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const std::same_as&lt; Type &gt; auto &amp;...</td>          <td class="paramname"><span class="paramname"><em>elements</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00083">83</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   85</span>  {</div>
<div class="line"><span class="lineno">   86</span>    std::size_t i{0};</div>
<div class="line"><span class="lineno">   87</span>    ([&amp;] { <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i++][0] = elements; }(), ...);</div>
<div class="line"><span class="lineno">   88</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2f786ae58d1540e21a1f6963557622df" name="a2f786ae58d1540e21a1f6963557622df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f786ae58d1540e21a1f6963557622df">&#9670;&#160;</a></span>matrix() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const Type(&amp;)</td>          <td class="paramname"><span class="paramname"><em>elements</em></span>[Column]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00090">90</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   92</span>  {</div>
<div class="line"><span class="lineno">   93</span>    <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><span class="lineno">   94</span>      <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][j] = elements[j];</div>
<div class="line"><span class="lineno">   95</span>    }</div>
<div class="line"><span class="lineno">   96</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad9c1d2f6c83e7ec74f763ea9977b58b2" name="ad9c1d2f6c83e7ec74f763ea9977b58b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9c1d2f6c83e7ec74f763ea9977b58b2">&#9670;&#160;</a></span>matrix() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const Type(&amp;)</td>          <td class="paramname"><span class="paramname"><em>elements</em></span>[Row]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00098">98</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  100</span>  {</div>
<div class="line"><span class="lineno">  101</span>    <span class="keywordflow">for</span> (std::size_t i{0}; i &lt; Row; ++i) {</div>
<div class="line"><span class="lineno">  102</span>      <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][0] = elements[i];</div>
<div class="line"><span class="lineno">  103</span>    }</div>
<div class="line"><span class="lineno">  104</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a84e55200de57e3295d38f5e8962f9325" name="a84e55200de57e3295d38f5e8962f9325"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84e55200de57e3295d38f5e8962f9325">&#9670;&#160;</a></span>matrix() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<div class="memtemplate">
template&lt;typename... Types, std::size_t... Columns&gt; <br />
requires (std::conjunction_v&lt;std::is_same&lt;Type, Types&gt;...&gt; &amp;&amp; ((Columns == Column) &amp;&amp; ... &amp;&amp; true))</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">const </td>          <td class="paramname"><span class="paramname"><em>Types</em></span>(&amp;...rows)[Columns]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00107">107</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  110</span>  {</div>
<div class="line"><span class="lineno">  111</span>    std::size_t i{0};</div>
<div class="line"><span class="lineno">  112</span>    (</div>
<div class="line"><span class="lineno">  113</span>        [&amp;](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;row) {</div>
<div class="line"><span class="lineno">  114</span>          <span class="keywordflow">for</span> (std::size_t j{0}; j &lt; Column; ++j) {</div>
<div class="line"><span class="lineno">  115</span>            <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j] = row[j];</div>
<div class="line"><span class="lineno">  116</span>          }</div>
<div class="line"><span class="lineno">  117</span>          ++i;</div>
<div class="line"><span class="lineno">  118</span>        }(rows),</div>
<div class="line"><span class="lineno">  119</span>        ...);</div>
<div class="line"><span class="lineno">  120</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9a12047f7f62b4842b3009e50d75faa6" name="a9a12047f7f62b4842b3009e50d75faa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a12047f7f62b4842b3009e50d75faa6">&#9670;&#160;</a></span>matrix() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::matrix </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em>rows</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00122">122</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  123</span>                                                           {</div>
<div class="line"><span class="lineno">  124</span>    <span class="keywordflow">for</span> (std::size_t i{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;row : rows) {</div>
<div class="line"><span class="lineno">  125</span>      <span class="keywordflow">for</span> (std::size_t j{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">element</a> : row) {</div>
<div class="line"><span class="lineno">  126</span>        <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[i][j] = <a class="code hl_typedef" href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">element</a>;</div>
<div class="line"><span class="lineno">  127</span>        ++j;</div>
<div class="line"><span class="lineno">  128</span>      }</div>
<div class="line"><span class="lineno">  129</span>      ++i;</div>
<div class="line"><span class="lineno">  130</span>    }</div>
<div class="line"><span class="lineno">  131</span>  }</div>
<div class="ttc" id="anamespacefcarouge_1_1indexed_xhtml_a2f189c0e6996a3a73eab75bf5004f901"><div class="ttname"><a href="namespacefcarouge_1_1indexed.xhtml#a2f189c0e6996a3a73eab75bf5004f901">fcarouge::indexed::element</a></div><div class="ttdeci">product&lt; std::tuple_element_t&lt; RowIndex, RowIndexes &gt;, std::tuple_element_t&lt; ColumnIndex, ColumnIndexes &gt; &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="indexed_8hpp_source.xhtml#l00059">indexed.hpp:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aeefcf1415dc5bad02fb74ccdf536983a" name="aeefcf1415dc5bad02fb74ccdf536983a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeefcf1415dc5bad02fb74ccdf536983a">&#9670;&#160;</a></span>explicit()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::explicit </td>
          <td>(</td>
          <td class="paramtype">false</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00133">133</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  135</span>  {</div>
<div class="line"><span class="lineno">  136</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="#a15e1f8de54dbe4186bf17501a9ac073b">data</a>[0][0];</div>
<div class="line"><span class="lineno">  137</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a946ee778af019944e7c441730b52362a" name="a946ee778af019944e7c441730b52362a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a946ee778af019944e7c441730b52362a">&#9670;&#160;</a></span>operator()() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  161</span>  {</div>
<div class="line"><span class="lineno">  162</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[index][0];</div>
<div class="line"><span class="lineno">  163</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="aed5e035f5f6a4fe01eebe2af57be998a" name="aed5e035f5f6a4fe01eebe2af57be998a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed5e035f5f6a4fe01eebe2af57be998a">&#9670;&#160;</a></span>operator()() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00165">165</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  168</span>  {</div>
<div class="line"><span class="lineno">  169</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[0][index];</div>
<div class="line"><span class="lineno">  170</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a035cd297824dc7614675ee258400dd72" name="a035cd297824dc7614675ee258400dd72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a035cd297824dc7614675ee258400dd72">&#9670;&#160;</a></span>operator()() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00173">173</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  173</span>                                                                {</div>
<div class="line"><span class="lineno">  174</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[row][column];</div>
<div class="line"><span class="lineno">  175</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab1da3b795f0880b0e1eb9a8036d49284" name="ab1da3b795f0880b0e1eb9a8036d49284"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1da3b795f0880b0e1eb9a8036d49284">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5ae095d8bfbb8bc9be23d6c1cc09cbea" name="a5ae095d8bfbb8bc9be23d6c1cc09cbea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ae095d8bfbb8bc9be23d6c1cc09cbea">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a> &amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a>&lt; Type, Row, Column &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2f37507515b5165e56ca1c7b9c6df128" name="a2f37507515b5165e56ca1c7b9c6df128"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f37507515b5165e56ca1c7b9c6df128">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00139">139</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  142</span>  {</div>
<div class="line"><span class="lineno">  143</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[index][0];</div>
<div class="line"><span class="lineno">  144</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ac056edb5c0976f1c2f03a6d9934120" name="a7ac056edb5c0976f1c2f03a6d9934120"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ac056edb5c0976f1c2f03a6d9934120">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00146">146</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  149</span>  {</div>
<div class="line"><span class="lineno">  150</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[0][index];</div>
<div class="line"><span class="lineno">  151</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="acfed1b3b01967dd8201a8b66fc057c86" name="acfed1b3b01967dd8201a8b66fc057c86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfed1b3b01967dd8201a8b66fc057c86">&#9670;&#160;</a></span>operator[]() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type &amp;&amp; <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00154">154</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  154</span>                                                                {</div>
<div class="line"><span class="lineno">  155</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data[row][column];</div>
<div class="line"><span class="lineno">  156</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a15e1f8de54dbe4186bf17501a9ac073b" name="a15e1f8de54dbe4186bf17501a9ac073b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15e1f8de54dbe4186bf17501a9ac073b">&#9670;&#160;</a></span>data</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type <a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">fcarouge::naive::matrix</a>&lt; Type, Row, Column &gt;::data[Row][Column] {}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="naive_8hpp_source.xhtml#l00177">177</a> of file <a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  177</span>{};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="naive_8hpp_source.xhtml#l00429">fcarouge::transposer&lt; naive::matrix&lt; Type, Row, Column &gt; &gt;::operator()()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00243">fcarouge::naive::operator*()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00249">fcarouge::naive::operator*()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00227">fcarouge::naive::operator*()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00261">fcarouge::naive::operator*=()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00294">fcarouge::naive::operator+()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00280">fcarouge::naive::operator+()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00300">fcarouge::naive::operator+()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00321">fcarouge::naive::operator-()</a>, <a class="el" href="naive_8hpp_source.xhtml#l00307">fcarouge::naive::operator-()</a>, and <a class="el" href="naive_8hpp_source.xhtml#l00213">fcarouge::naive::operator==()</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>/github/workspace/support/naive/fcarouge/<a class="el" href="naive_8hpp_source.xhtml">naive.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1naive.xhtml">naive</a></li><li class="navelem"><a class="el" href="structfcarouge_1_1naive_1_1matrix.xhtml">matrix</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
