<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: kf_2x1x1_rocket_altitude.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.2.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('kf_2x1x1_rocket_altitude_8cpp-example.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kf_2x1x1_rocket_altitude.cpp</div></div>
</div><!--header-->
<div class="contents">
<p >Estimating the rocket altitude.</p>
<p >Estimating the rocket altitude.</p><dl class="section copyright"><dt>Copyright</dt><dd>This example is transcribed from KalmanFilter.NET copyright Alex Becker.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a href="https://www.kalmanfilter.net/multiExamples.html#ex10">https://www.kalmanfilter.net/multiExamples.html#ex10</a></dd></dl>
<p>In this example, we will estimate the altitude of a rocket. The rocket is equipped with an onboard altimeter that provides altitude measurements. In addition to an altimeter, the rocket is equipped with an accelerometer that measures the rocket acceleration. The accelerometer serves as a control input to the Kalman Filter. We assume constant acceleration dynamics. Accelerometers don't sense gravity. An accelerometer at rest on a table would measure 1g upwards, while accelerometers in free fall will measure zero. Thus, we need to subtract the gravitational acceleration constant g from each accelerometer measurement. The accelerometer measurement at time step n is: an = a − g + ϵ where:</p><ul>
<li>a is the actual acceleration of the object (the second derivative of the object position).</li>
<li>g is the gravitational acceleration constant; g = -9.8 m.s^-2.</li>
<li>ϵ is the accelerometer measurement error. In this example, we have a control variable u, which is based on the accelerometer measurement. The system state xn is defined by: xn = [ pn vn ] where: pn is the rocket altitude at time n. vn is the rocket velocity at time n. Let us assume a rocket boosting vertically with constant acceleration. The rocket is equipped with an altimeter that provides altitude measurements and an accelerometer that serves as a control input.</li>
<li>The measurements period: Δt = 0.25s</li>
<li>The rocket acceleration: a= 30 m.s^-2</li>
<li>The altimeter measurement error standard deviation: σxm = 20m</li>
<li>The accelerometer measurement error standard deviation: ϵ = 0.1 m.s^-2</li>
</ul>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="kalman_8hpp.xhtml">fcarouge/kalman.hpp</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;fcarouge/linalg.hpp&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a> {</div>
<div class="line"><span class="keyword">namespace </span>{</div>
<div class="line"><span class="keyword">template</span> &lt;auto Size&gt; <span class="keyword">using </span><a id="a0" name="a0"></a><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a2d00cd54b0e206acd56005bdae642e1d">vector</a> = column_vector&lt;double, Size&gt;;</div>
<div class="line"><span class="keyword">using </span><a id="a1" name="a1"></a><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#af6309b1f1d279d261974cc9d961fd7db">state</a> = vector&lt;2&gt;;</div>
<div class="line"><span class="keyword">using </span><a id="a2" name="a2"></a><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a856eba1de322b96602cd6a614b0ebb3c">output</a> = double;</div>
<div class="line"><span class="keyword">using </span><a id="a3" name="a3"></a><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#aa628c1ade77c9a1d33116f327f91aa70">input</a> = double;</div>
<div class="line"> </div>
<div class="line">[[maybe_unused]] <span class="keyword">auto</span> <a id="a4" name="a4"></a><a class="code hl_variable" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a8a72f3aea780587350d7527cfac09b9d">sample</a>{[] {</div>
<div class="line">  <span class="comment">// A 2x1x1 filter, constant acceleration dynamic model, no control, step time.</span></div>
<div class="line">  <span class="keyword">using </span>kalman = kalman&lt;state, output, input, std::tuple&lt;&gt;,</div>
<div class="line">                        std::tuple&lt;std::chrono::milliseconds&gt;&gt;;</div>
<div class="line">  kalman filter;</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Initialization</span></div>
<div class="line">  <span class="comment">// We don&#39;t know the rocket location; we will set initial position and</span></div>
<div class="line">  <span class="comment">// velocity to 0.</span></div>
<div class="line">  filter.x(0., 0.);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Since our initial state vector is a guess, we will set a very high estimate</span></div>
<div class="line">  <span class="comment">// uncertainty. The high estimate uncertainty results in high Kalman gain,</span></div>
<div class="line">  <span class="comment">// giving a high weight to the measurement.</span></div>
<div class="line">  filter.p(<a id="a5" name="a5"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a6d203bb8f431e7d683ca21261d2e512b">kalman::estimate_uncertainty</a>{{500, 0}, {0, 500}});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Prediction</span></div>
<div class="line">  <span class="comment">// We will assume a discrete noise model - the noise is different at each time</span></div>
<div class="line">  <span class="comment">// period, but it is constant between time periods. In our previous example,</span></div>
<div class="line">  <span class="comment">// we used the system&#39;s random variance in acceleration σ^2 as a multiplier of</span></div>
<div class="line">  <span class="comment">// the process noise matrix. But here, we have an accelerometer that measures</span></div>
<div class="line">  <span class="comment">// the system random acceleration. The accelerometer error v is much lower</span></div>
<div class="line">  <span class="comment">// than system&#39;s random acceleration, therefore we use ϵ^2 as a multiplier of</span></div>
<div class="line">  <span class="comment">// the process noise matrix. This makes our estimation uncertainty much lower!</span></div>
<div class="line">  filter.q([]([[maybe_unused]] <span class="keyword">const</span> <a id="a6" name="a6"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af6ce8697cff935182e0038cdcfd844f4">kalman::state</a> &amp;x,</div>
<div class="line">              <span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">    <span class="keywordflow">return</span> <a id="a7" name="a7"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a10744ae8b23cfeee58b6ce4987242c87">kalman::process_uncertainty</a>{</div>
<div class="line">        {0.1 * 0.1 * dt * dt * dt * dt / 4, 0.1 * 0.1 * dt * dt * dt / 2},</div>
<div class="line">        {0.1 * 0.1 * dt * dt * dt / 2, 0.1 * 0.1 * dt * dt}};</div>
<div class="line">  });</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The state transition matrix F would be:</span></div>
<div class="line">  filter.f([]([[maybe_unused]] <span class="keyword">const</span> <a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af6ce8697cff935182e0038cdcfd844f4">kalman::state</a> &amp;x,</div>
<div class="line">              [[maybe_unused]] <span class="keyword">const</span> <a id="a8" name="a8"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#ad73f295bc047ef3c931a4d20104e4127">kalman::input</a> &amp;u,</div>
<div class="line">              <span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">    <span class="keywordflow">return</span> <a id="a9" name="a9"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a554a853cc7e8ebbf878b140551a535c8">kalman::state_transition</a>{{1, dt}, {0, 1}};</div>
<div class="line">  });</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The control matrix G would be:</span></div>
<div class="line">  filter.g([](<span class="keyword">const</span> std::chrono::milliseconds &amp;delta_time) {</div>
<div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">    <span class="keywordflow">return</span> <a id="a10" name="a10"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#aa4216a5e5baa908a826b359f14779934">kalman::input_control</a>{0.0313, dt};</div>
<div class="line">  });</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// We also don&#39;t know what the rocket acceleration is, but we can assume that</span></div>
<div class="line">  <span class="comment">// it&#39;s greater than zero. Let&#39;s assume: u0 = g</span></div>
<div class="line">  <span class="keyword">const</span> <span class="keywordtype">double</span> gravity{-9.8}; <span class="comment">// [m.s^-2]</span></div>
<div class="line">  <span class="keyword">const</span> std::chrono::milliseconds delta_time{250};</div>
<div class="line">  filter.predict(delta_time, -gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / 0.3) &lt; 0.03 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 2.45) &lt; 0.03 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 3% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 531.25) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 500) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// Measure and Update</span></div>
<div class="line">  <span class="comment">// The dimension of zn is 1x1 and the dimension of xn is 2x1, so the dimension</span></div>
<div class="line">  <span class="comment">// of the observation matrix H will be 1x2.</span></div>
<div class="line">  filter.h(<a id="a11" name="a11"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#a1a9d07aa2b616cc3e4e444a4a100bbf2">kalman::output_model</a>{1., 0.});</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// For the sake of the example simplicity, we will assume a constant</span></div>
<div class="line">  <span class="comment">// measurement uncertainty: R1 = R2...Rn-1 = Rn = R.</span></div>
<div class="line">  filter.r(<a id="a12" name="a12"></a><a class="code hl_typedef" href="classfcarouge_1_1kalman.xhtml#af92fafd91695af30574a7be7771e5357">kalman::output_uncertainty</a>{400.});</div>
<div class="line"> </div>
<div class="line">  filter.update(-32.4);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -18.35) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / -1.94) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 228.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  filter.predict(delta_time, 39.72 + gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -17.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 5.54) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 285.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// And so on, run a step of the filter, updating and predicting, every</span></div>
<div class="line">  <span class="comment">// measurements period: Δt = 250ms. The period is constant but passed as</span></div>
<div class="line">  <span class="comment">// variable for the example. The lambda helper shows how to simplify the</span></div>
<div class="line">  <span class="comment">// filter step call.</span></div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> step{[&amp;filter](<span class="keywordtype">double</span> altitude,</div>
<div class="line">                            std::chrono::milliseconds step_time,</div>
<div class="line">                            <span class="keywordtype">double</span> acceleration) {</div>
<div class="line">    filter.update(altitude);</div>
<div class="line">    filter.predict(step_time, acceleration);</div>
<div class="line">  }};</div>
<div class="line"> </div>
<div class="line">  step(-11.1, delta_time, 40.02 + gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -12.3) &lt; 0.002 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 14.8) &lt; 0.002 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.2% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 244.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 438.8) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  step(18., delta_time, 39.97 + gravity);</div>
<div class="line">  step(22.9, delta_time, 39.81 + gravity);</div>
<div class="line">  step(19.5, delta_time, 39.75 + gravity);</div>
<div class="line">  step(28.5, delta_time, 39.6 + gravity);</div>
<div class="line">  step(46.5, delta_time, 39.77 + gravity);</div>
<div class="line">  step(68.9, delta_time, 39.83 + gravity);</div>
<div class="line">  step(48.2, delta_time, 39.73 + gravity);</div>
<div class="line">  step(56.1, delta_time, 39.87 + gravity);</div>
<div class="line">  step(90.5, delta_time, 39.81 + gravity);</div>
<div class="line">  step(104.9, delta_time, 39.92 + gravity);</div>
<div class="line">  step(140.9, delta_time, 39.78 + gravity);</div>
<div class="line">  step(148., delta_time, 39.98 + gravity);</div>
<div class="line">  step(187.6, delta_time, 39.76 + gravity);</div>
<div class="line">  step(209.2, delta_time, 39.86 + gravity);</div>
<div class="line">  step(244.6, delta_time, 39.61 + gravity);</div>
<div class="line">  step(276.4, delta_time, 39.86 + gravity);</div>
<div class="line">  step(323.5, delta_time, 39.74 + gravity);</div>
<div class="line">  step(357.3, delta_time, 39.87 + gravity);</div>
<div class="line">  step(357.4, delta_time, 39.63 + gravity);</div>
<div class="line">  step(398.3, delta_time, 39.67 + gravity);</div>
<div class="line">  step(446.7, delta_time, 39.96 + gravity);</div>
<div class="line">  step(465.1, delta_time, 39.8 + gravity);</div>
<div class="line">  step(529.4, delta_time, 39.89 + gravity);</div>
<div class="line">  step(570.4, delta_time, 39.85 + gravity);</div>
<div class="line">  step(636.8, delta_time, 39.9 + gravity);</div>
<div class="line">  step(693.3, delta_time, 39.81 + gravity);</div>
<div class="line">  step(707.3, delta_time, 39.81 + gravity);</div>
<div class="line"> </div>
<div class="line">  filter.update(748.5);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The Kalman gain for altitude converged to 0.12, which means that the</span></div>
<div class="line">  <span class="comment">// estimation weight is much higher than the measurement weight.</span></div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 49.3) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;At this point, the altitude uncertainty px = 49.3, which means that &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;the standard deviation of the prediction is square root of 49.3: &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;7.02m (remember that the standard deviation of the measurement is &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;20m).&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  filter.predict(delta_time, 39.68 + gravity);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// At the beginning, the estimated altitude is influenced by measurements and</span></div>
<div class="line">  <span class="comment">// it is not aligned well with the true rocket altitude, since the</span></div>
<div class="line">  <span class="comment">// measurements are very noisy. But as the Kalman gain converges, the noisy</span></div>
<div class="line">  <span class="comment">// measurement has less influence and the estimated altitude is well aligned</span></div>
<div class="line">  <span class="comment">// with the true altitude. In this example we don&#39;t have any maneuvers that</span></div>
<div class="line">  <span class="comment">// cause acceleration changes, but if we had, the control input</span></div>
<div class="line">  <span class="comment">// (accelerometer) would update the state extrapolation equation.</span></div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / 831.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 222.94) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 54.3) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 2.6) &lt; 0.01 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()};</div>
<div class="line">} <span class="comment">// namespace</span></div>
<div class="line">} <span class="comment">// namespace fcarouge::sample</span></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a10744ae8b23cfeee58b6ce4987242c87"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a10744ae8b23cfeee58b6ce4987242c87">fcarouge::kalman::process_uncertainty</a></div><div class="ttdeci">typename implementation::process_uncertainty process_uncertainty</div><div class="ttdoc">Type of the process noise correlated variance matrix Q.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00207">kalman.hpp:207</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a1a9d07aa2b616cc3e4e444a4a100bbf2"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a1a9d07aa2b616cc3e4e444a4a100bbf2">fcarouge::kalman::output_model</a></div><div class="ttdeci">typename implementation::output_model output_model</div><div class="ttdoc">Type of the observation transition matrix H.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00220">kalman.hpp:220</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a554a853cc7e8ebbf878b140551a535c8"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a554a853cc7e8ebbf878b140551a535c8">fcarouge::kalman::state_transition</a></div><div class="ttdeci">typename implementation::state_transition state_transition</div><div class="ttdoc">Type of the state transition matrix F.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00215">kalman.hpp:215</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_a6d203bb8f431e7d683ca21261d2e512b"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#a6d203bb8f431e7d683ca21261d2e512b">fcarouge::kalman::estimate_uncertainty</a></div><div class="ttdeci">typename implementation::estimate_uncertainty estimate_uncertainty</div><div class="ttdoc">Type of the estimated correlated variance matrix P.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00204">kalman.hpp:204</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_aa4216a5e5baa908a826b359f14779934"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#aa4216a5e5baa908a826b359f14779934">fcarouge::kalman::input_control</a></div><div class="ttdeci">typename implementation::input_control input_control</div><div class="ttdoc">Type of the control transition matrix G.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00227">kalman.hpp:227</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_ad73f295bc047ef3c931a4d20104e4127"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#ad73f295bc047ef3c931a4d20104e4127">fcarouge::kalman::input</a></div><div class="ttdeci">typename implementation::input input</div><div class="ttdoc">Type of the control column vector U.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00199">kalman.hpp:199</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af6ce8697cff935182e0038cdcfd844f4"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af6ce8697cff935182e0038cdcfd844f4">fcarouge::kalman::state</a></div><div class="ttdeci">typename implementation::state state</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00189">kalman.hpp:189</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1kalman_xhtml_af92fafd91695af30574a7be7771e5357"><div class="ttname"><a href="classfcarouge_1_1kalman.xhtml#af92fafd91695af30574a7be7771e5357">fcarouge::kalman::output_uncertainty</a></div><div class="ttdeci">typename implementation::output_uncertainty output_uncertainty</div><div class="ttdoc">Type of the observation noise correlated variance matrix R.</div><div class="ttdef"><b>Definition:</b> <a href="kalman_8hpp_source.xhtml#l00210">kalman.hpp:210</a></div></div>
<div class="ttc" id="akalman_8hpp_xhtml"><div class="ttname"><a href="kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The Kalman filter class and library top-level header.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a2d00cd54b0e206acd56005bdae642e1d"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a2d00cd54b0e206acd56005bdae642e1d">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::vector</a></div><div class="ttdeci">column_vector&lt; double, Size &gt; vector</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00010">kf_2x1x1_rocket_altitude.cpp:10</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a856eba1de322b96602cd6a614b0ebb3c"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a856eba1de322b96602cd6a614b0ebb3c">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::output</a></div><div class="ttdeci">double output</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00012">kf_2x1x1_rocket_altitude.cpp:12</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_a8a72f3aea780587350d7527cfac09b9d"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#a8a72f3aea780587350d7527cfac09b9d">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::sample</a></div><div class="ttdeci">auto sample</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00049">kf_2x1x1_rocket_altitude.cpp:49</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_aa628c1ade77c9a1d33116f327f91aa70"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#aa628c1ade77c9a1d33116f327f91aa70">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::input</a></div><div class="ttdeci">double input</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00013">kf_2x1x1_rocket_altitude.cpp:13</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03_xhtml_af6309b1f1d279d261974cc9d961fd7db"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02kf__2x1x1__rocket__altitude_8cpp_03.xhtml#af6309b1f1d279d261974cc9d961fd7db">fcarouge::sample::anonymous_namespace{kf_2x1x1_rocket_altitude.cpp}::state</a></div><div class="ttdeci">vector&lt; 2 &gt; state</div><div class="ttdef"><b>Definition:</b> <a href="kf__2x1x1__rocket__altitude_8cpp_source.xhtml#l00011">kf_2x1x1_rocket_altitude.cpp:11</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a></div><div class="ttdoc">Examples, tutorials, demonstrators of the library.</div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sun Jul 2 2023 05:07:58 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
