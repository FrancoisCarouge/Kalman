<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: kf_2x1x1_rocket_altitude.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.5.3</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('kf_2x1x1_rocket_altitude_8cpp-example.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">kf_2x1x1_rocket_altitude.cpp</div></div>
</div><!--header-->
<div class="contents">
<p>Estimating the rocket altitude.</p>
<p>Estimating the rocket altitude.</p><dl class="section copyright"><dt>Copyright</dt><dd>This example is transcribed from KalmanFilter.NET copyright Alex Becker.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a href="https://www.kalmanfilter.net/multiExamples.html#ex10">https://www.kalmanfilter.net/multiExamples.html#ex10</a></dd></dl>
<p>In this example, we will estimate the altitude of a rocket. The rocket is equipped with an onboard altimeter that provides altitude measurements. In addition to an altimeter, the rocket is equipped with an accelerometer that measures the rocket acceleration. The accelerometer serves as a control input to the Kalman Filter. We assume constant acceleration dynamics. Accelerometers don't sense gravity. An accelerometer at rest on a table would measure 1g upwards, while accelerometers in free fall will measure zero. Thus, we need to subtract the gravitational acceleration constant g from each accelerometer measurement. The accelerometer measurement at time step n is: an = a − g + ϵ where:</p><ul>
<li>a is the actual acceleration of the object (the second derivative of the object position).</li>
<li>g is the gravitational acceleration constant; g = -9.8 m.s^-2.</li>
<li>ϵ is the accelerometer measurement error. In this example, we have a control variable u, which is based on the accelerometer measurement. The system state xn is defined by: xn = [ pn vn ] where: pn is the rocket altitude at time n. vn is the rocket velocity at time n. Let us assume a rocket boosting vertically with constant acceleration. The rocket is equipped with an altimeter that provides altitude measurements and an accelerometer that serves as a control input.</li>
<li>The constant measurements period: Δt = 0.25s</li>
<li>The rocket acceleration: a= 30 m.s^-2</li>
<li>The altimeter measurement error standard deviation: σxm = 20m</li>
<li>The accelerometer measurement error standard deviation: ϵ = 0.1 m.s^-2</li>
</ul>
<div class="fragment"><div class="line"><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">Kalman Filter</span></div>
<div class="line"><span class="comment">Version 0.5.3</span></div>
<div class="line"><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><span class="comment">means.</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><span class="comment">software under copyright law.</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="kalman_8hpp.xhtml">fcarouge/kalman.hpp</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;fcarouge/linalg.hpp&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a> {</div>
<div class="line"><span class="keyword">namespace </span>{</div>
<div class="line"><span class="keyword">template</span> &lt;auto Size&gt; <span class="keyword">using </span>vector = column_vector&lt;double, Size&gt;;</div>
<div class="line"><span class="keyword">template</span> &lt;auto Row, auto Column&gt; <span class="keyword">using </span>matrix = matrix&lt;double, Row, Column&gt;;</div>
<div class="line"><span class="keyword">using </span>altitude = double;</div>
<div class="line"><span class="keyword">using </span>acceleration = double;</div>
<div class="line"><span class="keyword">using </span>milliseconds = std::chrono::milliseconds;</div>
<div class="line"><span class="keyword">using </span>state = fcarouge::state&lt;vector&lt;2&gt;&gt;;</div>
<div class="line"> </div>
<div class="line">[[maybe_unused]] <span class="keyword">auto</span> sample{[] {</div>
<div class="line">  <span class="comment">// A 2x1x1 filter, constant acceleration dynamic model, no control, step</span></div>
<div class="line">  <span class="comment">// time.</span></div>
<div class="line">  <a id="a0" name="a0"></a><a class="code hl_function" href="namespacefcarouge.xhtml#a4a3bd37a96fd242e89867316396afcd5">kalman</a> filter{</div>
<div class="line">      <span class="comment">// We don&#39;t know the rocket location; we will set initial position and</span></div>
<div class="line">      <span class="comment">// velocity to state X = [0.0, 0.0].</span></div>
<div class="line">      state{0., 0.},</div>
<div class="line">      <span class="comment">// The filter estimates the output Z altitude as a double [m].</span></div>
<div class="line">      output&lt;altitude&gt;,</div>
<div class="line">      <span class="comment">// The filter receives in the input U accelerometer as a double [m.s^-2].</span></div>
<div class="line">      input&lt;acceleration&gt;,</div>
<div class="line">      <span class="comment">// Since our initial state vector is a guess, we will set a very high</span></div>
<div class="line">      <span class="comment">// estimate uncertainty. The high estimate uncertainty P results in high</span></div>
<div class="line">      <span class="comment">// Kalman gain, giving a high weight to the measurement.</span></div>
<div class="line">      estimate_uncertainty{{500., 0.}, {0., 500.}},</div>
<div class="line">      <span class="comment">// We will assume a discrete noise model - the noise is different at each</span></div>
<div class="line">      <span class="comment">// time period, but it is constant between time periods. In our previous</span></div>
<div class="line">      <span class="comment">// example, we used the system&#39;s random variance in acceleration σ^2 as a</span></div>
<div class="line">      <span class="comment">// multiplier of the process noise matrix. But here, we have an</span></div>
<div class="line">      <span class="comment">// accelerometer that measures the system random acceleration. The</span></div>
<div class="line">      <span class="comment">// accelerometer error v is much lower than system&#39;s random acceleration,</span></div>
<div class="line">      <span class="comment">// therefore we use ϵ^2 as a multiplier of the process noise matrix. This</span></div>
<div class="line">      <span class="comment">// makes our estimation uncertainty much lower!</span></div>
<div class="line">      process_uncertainty{[]([[maybe_unused]] <span class="keyword">const</span> vector&lt;2&gt; &amp;x,</div>
<div class="line">                             <span class="keyword">const</span> milliseconds &amp;delta_time) {</div>
<div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">        <span class="keywordflow">return</span> matrix&lt;2, 2&gt;{</div>
<div class="line">            {0.1 * 0.1 * dt * dt * dt * dt / 4, 0.1 * 0.1 * dt * dt * dt / 2},</div>
<div class="line">            {0.1 * 0.1 * dt * dt * dt / 2, 0.1 * 0.1 * dt * dt}};</div>
<div class="line">      }},</div>
<div class="line">      <span class="comment">// For the sake of the example simplicity, we will assume a constant</span></div>
<div class="line">      <span class="comment">// measurement uncertainty: R1 = R2...Rn-1 = Rn = R.</span></div>
<div class="line">      output_uncertainty{400.},</div>
<div class="line">      <span class="comment">// The state transition matrix F would be:</span></div>
<div class="line">      state_transition{[]([[maybe_unused]] <span class="keyword">const</span> vector&lt;2&gt; &amp;x,</div>
<div class="line">                          [[maybe_unused]] <span class="keyword">const</span> acceleration &amp;u,</div>
<div class="line">                          <span class="keyword">const</span> milliseconds &amp;delta_time) {</div>
<div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">        <span class="keywordflow">return</span> matrix&lt;2, 2&gt;{{1., dt}, {0., 1.}};</div>
<div class="line">      }},</div>
<div class="line">      <span class="comment">// The control matrix G would be:</span></div>
<div class="line">      input_control{[](<span class="keyword">const</span> milliseconds &amp;delta_time) {</div>
<div class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> dt{std::chrono::duration&lt;double&gt;(delta_time).count()};</div>
<div class="line">        <span class="keywordflow">return</span> vector&lt;2&gt;{0.0313, dt};</div>
<div class="line">      }},</div>
<div class="line">      <span class="comment">// The filter prediction uses a delta time [ms] parameter.</span></div>
<div class="line">      prediction_types&lt;milliseconds&gt;};</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// We also don&#39;t know what the rocket acceleration is, but we can assume that</span></div>
<div class="line">  <span class="comment">// it&#39;s greater than zero. Let&#39;s assume: u0 = g</span></div>
<div class="line">  <span class="keyword">const</span> <span class="keywordtype">double</span> gravity{-9.8}; <span class="comment">// [m.s^-2]</span></div>
<div class="line">  <span class="keyword">const</span> milliseconds delta_time{250};</div>
<div class="line">  filter.predict(delta_time, -gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / 0.3) &lt; 0.03 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 2.45) &lt; 0.03 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 3% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 531.25) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 125) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 500) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  filter.update(-32.4);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -18.35) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / -1.94) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 228.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 53.7) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  filter.predict(delta_time, 39.72 + gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -17.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 5.54) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 285.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 174.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 483.2) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// And so on, run a step of the filter, updating and predicting, every</span></div>
<div class="line">  <span class="comment">// measurements period: Δt = 250ms. The period is constant but passed as</span></div>
<div class="line">  <span class="comment">// variable for the example. The lambda helper shows how to simplify the</span></div>
<div class="line">  <span class="comment">// filter step call.</span></div>
<div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> step{[&amp;filter, &amp;delta_time](altitude measured_altitude,</div>
<div class="line">                                         acceleration measured_acceleration) {</div>
<div class="line">    filter.update(measured_altitude);</div>
<div class="line">    filter.predict(delta_time, measured_acceleration);</div>
<div class="line">  }};</div>
<div class="line"> </div>
<div class="line">  step(-11.1, 40.02 + gravity);</div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / -12.3) &lt; 0.002 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 14.8) &lt; 0.002 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.2% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 244.9) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 211.6) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 438.8) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  step(18., 39.97 + gravity);</div>
<div class="line">  step(22.9, 39.81 + gravity);</div>
<div class="line">  step(19.5, 39.75 + gravity);</div>
<div class="line">  step(28.5, 39.6 + gravity);</div>
<div class="line">  step(46.5, 39.77 + gravity);</div>
<div class="line">  step(68.9, 39.83 + gravity);</div>
<div class="line">  step(48.2, 39.73 + gravity);</div>
<div class="line">  step(56.1, 39.87 + gravity);</div>
<div class="line">  step(90.5, 39.81 + gravity);</div>
<div class="line">  step(104.9, 39.92 + gravity);</div>
<div class="line">  step(140.9, 39.78 + gravity);</div>
<div class="line">  step(148., 39.98 + gravity);</div>
<div class="line">  step(187.6, 39.76 + gravity);</div>
<div class="line">  step(209.2, 39.86 + gravity);</div>
<div class="line">  step(244.6, 39.61 + gravity);</div>
<div class="line">  step(276.4, 39.86 + gravity);</div>
<div class="line">  step(323.5, 39.74 + gravity);</div>
<div class="line">  step(357.3, 39.87 + gravity);</div>
<div class="line">  step(357.4, 39.63 + gravity);</div>
<div class="line">  step(398.3, 39.67 + gravity);</div>
<div class="line">  step(446.7, 39.96 + gravity);</div>
<div class="line">  step(465.1, 39.8 + gravity);</div>
<div class="line">  step(529.4, 39.89 + gravity);</div>
<div class="line">  step(570.4, 39.85 + gravity);</div>
<div class="line">  step(636.8, 39.9 + gravity);</div>
<div class="line">  step(693.3, 39.81 + gravity);</div>
<div class="line">  step(707.3, 39.81 + gravity);</div>
<div class="line"> </div>
<div class="line">  filter.update(748.5);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// The Kalman gain for altitude converged to 0.12, which means that the</span></div>
<div class="line">  <span class="comment">// estimation weight is much higher than the measurement weight.</span></div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 49.3) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;At this point, the altitude uncertainty px = 49.3, which means that &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;the standard deviation of the prediction is square root of 49.3: &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;7.02m (remember that the standard deviation of the measurement is &quot;</span></div>
<div class="line">         <span class="stringliteral">&quot;20m).&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  filter.predict(delta_time, 39.68 + gravity);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// At the beginning, the estimated altitude is influenced by measurements and</span></div>
<div class="line">  <span class="comment">// it is not aligned well with the true rocket altitude, since the</span></div>
<div class="line">  <span class="comment">// measurements are very noisy. But as the Kalman gain converges, the noisy</span></div>
<div class="line">  <span class="comment">// measurement has less influence and the estimated altitude is well aligned</span></div>
<div class="line">  <span class="comment">// with the true altitude. In this example we don&#39;t have any maneuvers that</span></div>
<div class="line">  <span class="comment">// cause acceleration changes, but if we had, the control input</span></div>
<div class="line">  <span class="comment">// (accelerometer) would update the state extrapolation equation.</span></div>
<div class="line"> </div>
<div class="line">  assert(std::abs(1 - filter.x()[0] / 831.5) &lt; 0.001 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.x()[1] / 222.94) &lt; 0.001 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The state estimates expected at 0.1% accuracy.&quot;</span>);</div>
<div class="line">  assert(std::abs(1 - filter.p()(0, 0) / 54.3) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(0, 1) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 0) / 10.4) &lt; 0.01 &amp;&amp;</div>
<div class="line">         std::abs(1 - filter.p()(1, 1) / 2.6) &lt; 0.01 &amp;&amp;</div>
<div class="line">         <span class="stringliteral">&quot;The estimate uncertainty expected at 1% accuracy.&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}()};</div>
<div class="line">} <span class="comment">// namespace</span></div>
<div class="line">} <span class="comment">// namespace fcarouge::sample</span></div>
<div class="ttc" id="akalman_8hpp_xhtml"><div class="ttname"><a href="kalman_8hpp.xhtml">kalman.hpp</a></div><div class="ttdoc">The Kalman filter class and library top-level header.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a></div><div class="ttdoc">Examples, tutorials, demonstrators of the library.</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a4a3bd37a96fd242e89867316396afcd5"><div class="ttname"><a href="namespacefcarouge.xhtml#a4a3bd37a96fd242e89867316396afcd5">fcarouge::kalman</a></div><div class="ttdeci">kalman(Arguments... arguments) -&gt; kalman&lt; kalman_internal::deduce_filter&lt; Arguments... &gt; &gt;</div><div class="ttdoc">Deduces the filter type from its declared configuration.</div></div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
