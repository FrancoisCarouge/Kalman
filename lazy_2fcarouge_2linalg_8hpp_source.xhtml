<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Kalman: /github/workspace/linalg/lazy/fcarouge/linalg.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Kalman<span id="projectnumber">&#160;0.2.0</span>
   </div>
   <div id="projectbrief">Kalman Filter</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('lazy_2fcarouge_2linalg_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">linalg.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="lazy_2fcarouge_2linalg_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">Kalman Filter</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.2.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/Kalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#ifndef FCAROUGE_LINALG_LAZY_HPP</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#define FCAROUGE_LINALG_LAZY_HPP</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &quot;<a class="code" href="utility_8hpp.xhtml">fcarouge/utility.hpp</a>&quot;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="preprocessor">#include &lt;coroutine&gt;</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="preprocessor">#include &lt;generator&gt;</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="preprocessor">#include &lt;ranges&gt;</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a> {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="comment">// Semantic? Guarantees? to_generator? std::ranges::to overload? make_generator?</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span><span class="comment">// Overloads for C-array?</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span><span class="comment">// Need one copy, avoid any extra?</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="keyword">template</span> &lt;std::ranges::range Range&gt;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> std::generator&lt;typename Range::value_type&gt;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">   69</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(Range elements) {</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  <span class="keywordflow">return</span> [](<span class="keyword">auto</span> elements_copy)</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>             -&gt; std::generator&lt;<span class="keyword">typename</span> <span class="keyword">decltype</span>(elements)::value_type&gt; {</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;element : elements_copy) { <span class="comment">// std::ranges::elements_of</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>      <span class="keyword">co_yield</span> element;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    }</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  }(elements);</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>}</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="comment">// Need one copy, avoid any extra?</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a34cda4cdb141fdaa3b43f3973585e4b1">   80</a></span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(Type element) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keywordflow">return</span> [](Type element_copy) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keyword">co_yield</span> element_copy;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  }(element);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>}</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = double, <span class="keyword">auto</span> Row = 1, <span class="keyword">auto</span> Column = 1,</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>          <span class="keywordtype">bool</span> Copyable = <span class="keyword">false</span>&gt;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml">  116</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a> {</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#af86ce6ac51113a4d4659d9d132cb43f4">  119</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#af86ce6ac51113a4d4659d9d132cb43f4">matrix</a>()</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>      : <a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>{[]() -&gt; std::<a class="code hl_typedef" href="structfcarouge_1_1matrix.xhtml#aef4e1a401c270d709c1ebaf0a3ea4a91">generator</a>&lt;Type&gt; {</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>          <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a0a995e0b4a122d37f327be9b065d8136">Row</a> * <a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#ab24112c8116a37f1feff0dbbe6ac9178">Column</a>}; k &gt; 0; --k) { <span class="comment">// repeat(Type{}) | take(R*C)</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>            <span class="keyword">co_yield</span> {};</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>          }</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>        }()} {}</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ad5662e0df22e0adaa13c6638a429df6b">  126</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ad5662e0df22e0adaa13c6638a429df6b">matrix</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, false&gt;</a> &amp;other)</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>      : genie{std::move(other.genie)} {}</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#aaf48cfde31b36aed22819ec63b357c96">  129</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#aaf48cfde31b36aed22819ec63b357c96">matrix</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> &amp;other)</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>      : genie{other.clone()} {}</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a> &amp;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a93634d9b719e38f5737ee6df3d90e2a4">  133</a></span>  <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a93634d9b719e38f5737ee6df3d90e2a4">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, false&gt;</a> &amp;other) {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>    genie = std::move(other.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  }</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a> &amp;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#aef867f6ed87d203b1805512580ce95e0">  139</a></span>  <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#aef867f6ed87d203b1805512580ce95e0">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> &amp;other) {</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    genie = other.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>();</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  }</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a8839e855b616e74c73a88c4ce4a396ef">  144</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a8839e855b616e74c73a88c4ce4a396ef">matrix</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, false&gt;</a> &amp;&amp;other)</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>      : genie{std::move(other.genie)} {}</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a8445d8e616e57e252b2cfbc267739123">  147</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a8445d8e616e57e252b2cfbc267739123">matrix</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> &amp;&amp;other)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>      : genie{other.clone()} {}</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a807760a155f249bd3ba3529b21363cfc">  150</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a807760a155f249bd3ba3529b21363cfc">operator=</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, false&gt;</a> &amp;&amp;other) {</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    genie = std::move(other.genie);</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  }</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ab3ac05d0aeb1057133c6432fb10e59ee">  155</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ab3ac05d0aeb1057133c6432fb10e59ee">operator=</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> &amp;&amp;other) {</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    genie = other.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>();</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a750c2a33f4a421f80af145d5eaa8bd91">  160</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a750c2a33f4a421f80af145d5eaa8bd91">matrix</a>(<span class="keyword">const</span> std::same_as&lt;Type&gt; <span class="keyword">auto</span> &amp;...elements)</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    <span class="keyword">requires</span>(<span class="keyword">sizeof</span>...(elements) == Row * Column)</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>      : genie{[](<span class="keyword">auto</span>... elements_copy) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>          (<span class="keyword">co_yield</span> elements_copy, ...);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>        }(elements...)} {}</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ae8d706f1fed5c4cfba4dfd3be19815c1">  166</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ae8d706f1fed5c4cfba4dfd3be19815c1">matrix</a>(Type (&amp;elements)[Row * Column])</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    <span class="keyword">requires</span>(Row == 1 || Column == 1)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>      : genie{<a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(std::to_array(elements))} {}</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">template</span> &lt;<span class="keyword">auto</span>... Columns&gt;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ac8588dae124ae763ea9efc16f64dfcde">  171</a></span>  <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac8588dae124ae763ea9efc16f64dfcde">matrix</a>(<span class="keyword">const</span> Type (&amp;...rows)[Columns])</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    <span class="keyword">requires</span>((<span class="keyword">sizeof</span>...(rows) == Row) &amp;&amp; (((Columns == Column) &amp;&amp; ... &amp;&amp; <span class="keyword">true</span>)))</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>      : genie{[](<span class="keyword">auto</span> rows_copy) -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>          <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;row : rows_copy) {</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;element : row) { <span class="comment">// std::ranges::elements_of</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>              <span class="keyword">co_yield</span> element;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>            }</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>          }</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>        }(std::to_array({std::to_array(rows)...}))} {}</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ae49a5b34d19651a33fece603e19ab5d6">  181</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ae49a5b34d19651a33fece603e19ab5d6">matrix</a>(std::generator&lt;Type&gt; other)</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>      : genie{std::move(other)} {}</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">  184</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> std::generator&lt;Type&gt; <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  }</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a45aa1fe0841174ac3cd300875f1bd622">  193</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span>(<span class="keyword">false</span>)</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#abea1bee894ce50acc260645ce92a21b8">  194</a></span>  <span class="keyword">operator</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, !Copyable&gt;</a>() <span class="keyword">const</span> {</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>    <span class="keywordflow">return</span> clone();</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  }</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a8faf72ffb586809e220a72311f55e047">  198</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span>(<span class="keyword">false</span>) <span class="keyword">operator</span> Type() <span class="keyword">const</span></div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keyword">requires</span>(Row == 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  {</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    Type element{*genie.begin()};</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(element);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    <span class="keywordflow">return</span> element;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  }</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a21b64d2811192433795b124e140bbca2">  208</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">explicit</span>(<span class="keyword">false</span>) <span class="keyword">operator</span> std::generator&lt;Type&gt;() <span class="keyword">const</span> {</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    <span class="keyword">co_yield</span> std::ranges::elements_of(genie);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  }</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type operator[](<span class="keyword">auto</span> index) <span class="keyword">const</span></div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>    <span class="keyword">requires</span>(Row &gt; 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  {</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span> </div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keywordflow">return</span> elements[index];</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  }</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#acb50b9f741eb141a526e0271ea98d6c2">  223</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#acb50b9f741eb141a526e0271ea98d6c2">operator[]</a>(<span class="keyword">auto</span> index) <span class="keyword">const</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>    <span class="keyword">requires</span>(Row == 1)</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  {</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    <span class="keywordflow">return</span> elements[index];</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  }</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a287a5b1c9d1668eb83e0e198fe088ca0">  234</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a287a5b1c9d1668eb83e0e198fe088ca0">operator()</a>(<span class="keyword">auto</span> index) <span class="keyword">const</span></div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    <span class="keyword">requires</span>(Row &gt; 1 &amp;&amp; Column == 1)</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  {</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>    <span class="keywordflow">return</span> elements[index];</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  }</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a267410d17977190209f548b57ec2976c">  245</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a267410d17977190209f548b57ec2976c">operator()</a>(<span class="keyword">auto</span> index) <span class="keyword">const</span></div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    <span class="keyword">requires</span>(Row == 1)</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  {</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>    <span class="keywordflow">return</span> elements[index];</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  }</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#affe6fae4cb1cfbfb7a46b135e835361f">  258</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> Type <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#affe6fae4cb1cfbfb7a46b135e835361f">operator()</a>(<span class="keyword">auto</span> row, <span class="keyword">auto</span> column)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>    std::array&lt;Type, Row * Column&gt; elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(genie, elements.begin());</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    genie = <a class="code hl_function" href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">make_generator</a>(elements);</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    <span class="keywordflow">return</span> elements[row * Column + column];</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  }</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#aef4e1a401c270d709c1ebaf0a3ea4a91">  267</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1matrix.xhtml#aef4e1a401c270d709c1ebaf0a3ea4a91">generator</a> = std::generator&lt;Type&gt;;</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#adfcf42a6f9989e33aa99acf4e947758d">  268</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1matrix.xhtml#adfcf42a6f9989e33aa99acf4e947758d">promise_type</a> = <span class="keyword">typename</span> std::coroutine_traits&lt;generator&gt;::promise_type;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <span class="comment">// Add other aliases such as iterator or value type?</span></div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">  271</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> genie.begin(); }</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a35e3b25e4af7bfcc97c5bdc3446a4c01">  272</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a35e3b25e4af7bfcc97c5bdc3446a4c01">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> genie.end(); }</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno"><a class="line" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">  278</a></span>  <span class="keyword">mutable</span> <a class="code hl_typedef" href="structfcarouge_1_1matrix.xhtml#aef4e1a401c270d709c1ebaf0a3ea4a91">generator</a> <a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>};</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = <span class="keywordtype">double</span>, auto Column = 1, <span class="keywordtype">bool</span> Copyable = false&gt;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge.xhtml#ac13c25e27a85ae315c7996927b7a3c28">row_vector</a> = <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;Type, <span class="keyword">decltype</span>(Column){1}, Column, Copyable&gt;;</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type = <span class="keywordtype">double</span>, auto Row = 1, <span class="keywordtype">bool</span> Copyable = false&gt;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge.xhtml#a6f496dc857f8b172efc57e3ba9bfdbf8">column_vector</a> = <a class="code hl_function" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">matrix</a>&lt;Type, Row, <span class="keyword">decltype</span>(Row){1}, Copyable&gt;;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a4833d152f612bead262723ae23039575">  293</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <a class="code hl_function" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">matrix</a>(Type) -&gt; <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a>;</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#ac0175c0b371513180978bbdb30909c54">  296</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">matrix</a>(<span class="keyword">const</span> Type (&amp;)[Row][Column]) -&gt; <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a>;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row&gt;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a36b1c08e7faa5e078cd8c56e4acd8a54">  299</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">matrix</a>(<span class="keyword">const</span> Type (&amp;)[Row]) -&gt; <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, 1&gt;</a>;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span><span class="comment">// Fix me. Test me.</span></div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types, <span class="keyword">auto</span>... Columns&gt;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">  303</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">matrix</a>(<span class="keyword">const</span> Types (&amp;...rows)[Columns])</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    -&gt; <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix</a>&lt;std::common_type_t&lt;Types...&gt;, <span class="keyword">sizeof</span>...(Columns),</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>              (Columns * ... * 1) / <span class="keyword">sizeof</span>...(Columns)&gt;;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a3b0c4f263f282cbb330a4ca6b5ad10d9">  309</a></span><span class="keyword">auto</span> <a class="code hl_variable" href="namespacefcarouge.xhtml#a3b0c4f263f282cbb330a4ca6b5ad10d9">make_identity_generator</a>{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Column) j{0}; j &lt; Column; ++j) {</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>      <span class="keyword">co_yield</span> i == j;</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    }</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  }</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>}};</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a7fe918283834c2c859a7325fc8d3a563">  318</a></span><span class="keyword">auto</span> <a class="code hl_variable" href="namespacefcarouge.xhtml#a7fe918283834c2c859a7325fc8d3a563">make_zero_generator</a>{[]() -&gt; std::generator&lt;Type&gt; {</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k) {</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    <span class="keyword">co_yield</span> 0.0;</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  }</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>}};</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span> </div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a1ea35424b203a1ba2ab287785e36b753">  328</a></span><span class="keyword">auto</span> identity_v&lt;matrix&lt;Type, Row, Column&gt;&gt;{[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>      make_identity_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>  }</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>}};</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a27e109425619816f11a1c78c3a9e59f6">  340</a></span><span class="keyword">auto</span> zero_v&lt;matrix&lt;Type, Row, Column&gt;&gt;{[](<span class="keyword">auto</span>... args) {</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, true&gt;</a> m{make_zero_generator&lt;Type, Row, Column&gt;()};</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (<span class="keyword">sizeof</span>...(args)) {</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>    <span class="keywordflow">return</span> m(args...);</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  } <span class="keywordflow">else</span> {</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>    <span class="keywordflow">return</span> m;</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  }</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>}};</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span> </div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a62fb05e2f569f36e8cac44a90ccbc106">  351</a></span><span class="keyword">template</span> &lt;std::invocable L&gt; <span class="keywordtype">bool</span> <a class="code hl_function" href="namespacefcarouge.xhtml#a84939a609e68330c2689aff14d978311">operator==</a>(L lhs, L rhs) {</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  <span class="keywordflow">return</span> lhs() == rhs();</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>}</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span> </div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a47d78fa7b2fbab1fdec6f6e30d6b1da0">  355</a></span><span class="keyword">template</span> &lt;std::invocable L, <span class="keyword">typename</span> T&gt; <span class="keywordtype">bool</span> <a class="code hl_function" href="namespacefcarouge.xhtml#a84939a609e68330c2689aff14d978311">operator==</a>(L lhs, T rhs) {</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  <span class="keywordflow">return</span> lhs() == rhs;</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>}</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">auto</span> Row, <span class="keyword">auto</span> Column, <span class="keywordtype">bool</span> CopyableOrNot1,</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>          <span class="keywordtype">bool</span> CopyableOrNot2&gt;</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">bool</span></div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a84939a609e68330c2689aff14d978311">  362</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a84939a609e68330c2689aff14d978311">operator==</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, CopyableOrNot1&gt;</a> lhs,</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>           <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column, CopyableOrNot2&gt;</a> rhs) {</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>  std::array&lt;Type, Row * Column&gt; lhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, lhs_elements.begin());</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  lhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="namespacefcarouge.xhtml#a34cda4cdb141fdaa3b43f3973585e4b1">make_generator</a>(lhs_elements);</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  std::array&lt;Type, Row * Column&gt; rhs_elements; <span class="comment">// std::ranges::to</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  <a class="code hl_variable" href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">std::ranges::copy</a>(rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a>, rhs_elements.begin());</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  rhs.<a class="code hl_variable" href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">genie</a> = <a class="code hl_function" href="namespacefcarouge.xhtml#a34cda4cdb141fdaa3b43f3973585e4b1">make_generator</a>(rhs_elements);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span> </div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  <span class="keywordflow">return</span> lhs_elements == rhs_elements;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>}</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span> </div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Size&gt;</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a5f46009dfa013275132875c5be3ab85c">  376</a></span>[[nodiscard]] <span class="keyword">inline</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, 1&gt;</a> <a class="code hl_function" href="namespacefcarouge.xhtml#acd2db4da220479f456ab712130ed255c">operator*</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Size&gt;</a> lhs,</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>                                                    <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Size, 1&gt;</a> rhs) {</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>  <span class="comment">// fix me?</span></div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>  <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Row) i{0}; i &lt; Row; ++i) {       <span class="comment">// chunk_by_rows</span></div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>    <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Size, 1&gt;</a> rhs_copy{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">clone</a>()}; <span class="comment">// repeat_n</span></div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>    <span class="keyword">auto</span> next2{rhs_copy.begin()};</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>    Type element{}; <span class="comment">// inner_product?</span></div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>    <span class="keywordflow">for</span> (<span class="keyword">decltype</span>(Size) k{0}; k &lt; Size; ++k, ++next1, ++next2) {</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>      element += *next1 * *next2;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>    }</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>    <span class="keyword">co_yield</span> element;</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  }</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>}</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>[[nodiscard]] <span class="keyword">inline</span> matrix&lt;Type, Row, Column&gt;</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a0647c4efb9c02b9ea365aacec50e4ae0">  393</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#acd2db4da220479f456ab712130ed255c">operator*</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> lhs, <a class="code hl_concept" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a> <span class="keyword">auto</span> rhs) {</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>  <span class="keyword">auto</span> next{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next) {</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>    <span class="keyword">co_yield</span> *next *rhs;</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  }</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>}</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a214880fe1dfe8701212c14c9ece44013">  401</a></span>[[nodiscard]] <span class="keyword">inline</span> <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> <a class="code hl_function" href="namespacefcarouge.xhtml#a11a6f09387090b4241f56399c3e4960a">operator+</a>(Type lhs,</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>                                                  <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, 1, 1&gt;</a> rhs) {</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  <span class="keyword">co_yield</span> lhs + *rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>();</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>}</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span> </div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, auto Row, auto Column&gt;</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>[[nodiscard]] <span class="keyword">inline</span> matrix&lt;Type, Row, Column&gt;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a37839500158d123b7bdc6824a025f0bc">  408</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a11a6f09387090b4241f56399c3e4960a">operator+</a>(<a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> lhs, <a class="code hl_struct" href="structfcarouge_1_1matrix.xhtml">matrix&lt;Type, Row, Column&gt;</a> rhs) {</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>  <span class="keyword">auto</span> next1{lhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>  <span class="keyword">auto</span> next2{rhs.<a class="code hl_function" href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">begin</a>()};</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> k{Row * Column}; k &gt; 0; --k, ++next1, ++next2) {</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>    <span class="keyword">co_yield</span> *next1 + *next2;</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  }</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>}</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span> </div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_LINALG_LAZY_HPP</span></div>
<div class="ttc" id="a_l_i_c_e_n_s_e_8txt_xhtml_aaff024f9fd06471d3fb778f865b5b424"><div class="ttname"><a href="_l_i_c_e_n_s_e_8txt.xhtml#aaff024f9fd06471d3fb778f865b5b424">copy</a></div><div class="ttdeci">This is free and unencumbered software released into the public domain Anyone is free to copy</div><div class="ttdef"><b>Definition:</b> <a href="_l_i_c_e_n_s_e_8txt_source.xhtml#l00003">LICENSE.txt:3</a></div></div>
<div class="ttc" id="aconceptfcarouge_1_1arithmetic_xhtml"><div class="ttname"><a href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a></div><div class="ttdef"><b>Definition:</b> <a href="utility_8hpp_source.xhtml#l00056">utility.hpp:56</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div><div class="ttdef"><b>Definition:</b> <a href="baseline_8cpp_source.xhtml#l00046">baseline.cpp:46</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a11a6f09387090b4241f56399c3e4960a"><div class="ttname"><a href="namespacefcarouge.xhtml#a11a6f09387090b4241f56399c3e4960a">fcarouge::operator+</a></div><div class="ttdeci">constexpr auto operator+(matrix&lt; Type, 1, 1 &gt; lhs, arithmetic auto rhs)</div><div class="ttdef"><b>Definition:</b> <a href="naive_2fcarouge_2linalg_8hpp_source.xhtml#l00274">linalg.hpp:274</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a34cda4cdb141fdaa3b43f3973585e4b1"><div class="ttname"><a href="namespacefcarouge.xhtml#a34cda4cdb141fdaa3b43f3973585e4b1">fcarouge::make_generator</a></div><div class="ttdeci">constexpr auto make_generator(Type element) -&gt; std::generator&lt; Type &gt;</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00080">linalg.hpp:80</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a3b0c4f263f282cbb330a4ca6b5ad10d9"><div class="ttname"><a href="namespacefcarouge.xhtml#a3b0c4f263f282cbb330a4ca6b5ad10d9">fcarouge::make_identity_generator</a></div><div class="ttdeci">auto make_identity_generator</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00309">linalg.hpp:309</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a6f496dc857f8b172efc57e3ba9bfdbf8"><div class="ttname"><a href="namespacefcarouge.xhtml#a6f496dc857f8b172efc57e3ba9bfdbf8">fcarouge::column_vector</a></div><div class="ttdeci">Eigen::Vector&lt; Type, Row &gt; column_vector</div><div class="ttdoc">Compile-time sized Eigen3 column vector.</div><div class="ttdef"><b>Definition:</b> <a href="eigen_2fcarouge_2linalg_8hpp_source.xhtml#l00067">linalg.hpp:67</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a7fe918283834c2c859a7325fc8d3a563"><div class="ttname"><a href="namespacefcarouge.xhtml#a7fe918283834c2c859a7325fc8d3a563">fcarouge::make_zero_generator</a></div><div class="ttdeci">auto make_zero_generator</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00318">linalg.hpp:318</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a84939a609e68330c2689aff14d978311"><div class="ttname"><a href="namespacefcarouge.xhtml#a84939a609e68330c2689aff14d978311">fcarouge::operator==</a></div><div class="ttdeci">constexpr bool operator==(matrix&lt; Type, Row, Column, CopyableOrNot1 &gt; lhs, matrix&lt; Type, Row, Column, CopyableOrNot2 &gt; rhs)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00362">linalg.hpp:362</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a8b8af7d40046cbeef79bfaca7078aeaa"><div class="ttname"><a href="namespacefcarouge.xhtml#a8b8af7d40046cbeef79bfaca7078aeaa">fcarouge::matrix</a></div><div class="ttdeci">matrix(const Types(&amp;...rows)[Columns]) -&gt; matrix&lt; std::common_type_t&lt; Types... &gt;, sizeof...(Columns),(Columns *... *1)/sizeof...(Columns)&gt;</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_ac13c25e27a85ae315c7996927b7a3c28"><div class="ttname"><a href="namespacefcarouge.xhtml#ac13c25e27a85ae315c7996927b7a3c28">fcarouge::row_vector</a></div><div class="ttdeci">Eigen::RowVector&lt; Type, Column &gt; row_vector</div><div class="ttdoc">Compile-time sized Eigen3 row vector.</div><div class="ttdef"><b>Definition:</b> <a href="eigen_2fcarouge_2linalg_8hpp_source.xhtml#l00063">linalg.hpp:63</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_acd2db4da220479f456ab712130ed255c"><div class="ttname"><a href="namespacefcarouge.xhtml#acd2db4da220479f456ab712130ed255c">fcarouge::operator*</a></div><div class="ttdeci">constexpr auto operator*(matrix&lt; Type, Row, Column &gt; lhs, arithmetic auto rhs)</div><div class="ttdef"><b>Definition:</b> <a href="naive_2fcarouge_2linalg_8hpp_source.xhtml#l00247">linalg.hpp:247</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_ae167596e2c65ae7024cbc80f5b5d1974"><div class="ttname"><a href="namespacefcarouge.xhtml#ae167596e2c65ae7024cbc80f5b5d1974">fcarouge::make_generator</a></div><div class="ttdeci">constexpr std::generator&lt; typename Range::value_type &gt; make_generator(Range elements)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00069">linalg.hpp:69</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml">fcarouge::matrix</a></div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00116">linalg.hpp:116</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a0a995e0b4a122d37f327be9b065d8136"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a0a995e0b4a122d37f327be9b065d8136">fcarouge::matrix::Row</a></div><div class="ttdeci">constexpr Row</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00194">linalg.hpp:194</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a267410d17977190209f548b57ec2976c"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a267410d17977190209f548b57ec2976c">fcarouge::matrix::operator()</a></div><div class="ttdeci">constexpr Type operator()(auto index) const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00245">linalg.hpp:245</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a287a5b1c9d1668eb83e0e198fe088ca0"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a287a5b1c9d1668eb83e0e198fe088ca0">fcarouge::matrix::operator()</a></div><div class="ttdeci">constexpr Type operator()(auto index) const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00234">linalg.hpp:234</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a345b32af8d533e28e162b7757e23d2ec"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a345b32af8d533e28e162b7757e23d2ec">fcarouge::matrix::genie</a></div><div class="ttdeci">generator genie</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00278">linalg.hpp:278</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a35e3b25e4af7bfcc97c5bdc3446a4c01"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a35e3b25e4af7bfcc97c5bdc3446a4c01">fcarouge::matrix::end</a></div><div class="ttdeci">auto end() const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00272">linalg.hpp:272</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a3d43f3ebeab72104b65bc49131d293fc"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a3d43f3ebeab72104b65bc49131d293fc">fcarouge::matrix::clone</a></div><div class="ttdeci">constexpr std::generator&lt; Type &gt; clone() const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00184">linalg.hpp:184</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a750c2a33f4a421f80af145d5eaa8bd91"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a750c2a33f4a421f80af145d5eaa8bd91">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const std::same_as&lt; Type &gt; auto &amp;...elements)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00160">linalg.hpp:160</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a807760a155f249bd3ba3529b21363cfc"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a807760a155f249bd3ba3529b21363cfc">fcarouge::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(matrix&lt; Type, Row, Column, false &gt; &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00150">linalg.hpp:150</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a8445d8e616e57e252b2cfbc267739123"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a8445d8e616e57e252b2cfbc267739123">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(matrix&lt; Type, Row, Column, true &gt; &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00147">linalg.hpp:147</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a8839e855b616e74c73a88c4ce4a396ef"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a8839e855b616e74c73a88c4ce4a396ef">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(matrix&lt; Type, Row, Column, false &gt; &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00144">linalg.hpp:144</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_a93634d9b719e38f5737ee6df3d90e2a4"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#a93634d9b719e38f5737ee6df3d90e2a4">fcarouge::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(const matrix&lt; Type, Row, Column, false &gt; &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00133">linalg.hpp:133</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_aaf48cfde31b36aed22819ec63b357c96"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#aaf48cfde31b36aed22819ec63b357c96">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const matrix&lt; Type, Row, Column, true &gt; &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00129">linalg.hpp:129</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ab24112c8116a37f1feff0dbbe6ac9178"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ab24112c8116a37f1feff0dbbe6ac9178">fcarouge::matrix::Column</a></div><div class="ttdeci">constexpr Column</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00194">linalg.hpp:194</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ab3ac05d0aeb1057133c6432fb10e59ee"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ab3ac05d0aeb1057133c6432fb10e59ee">fcarouge::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(matrix&lt; Type, Row, Column, true &gt; &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00155">linalg.hpp:155</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ac6248dacd7be4fb05540b8ab2956cb7b"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ac6248dacd7be4fb05540b8ab2956cb7b">fcarouge::matrix::begin</a></div><div class="ttdeci">auto begin() const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00271">linalg.hpp:271</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ac8588dae124ae763ea9efc16f64dfcde"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ac8588dae124ae763ea9efc16f64dfcde">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const Type(&amp;...rows)[Columns])</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00171">linalg.hpp:171</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_acb50b9f741eb141a526e0271ea98d6c2"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#acb50b9f741eb141a526e0271ea98d6c2">fcarouge::matrix::operator[]</a></div><div class="ttdeci">constexpr Type operator[](auto index) const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00223">linalg.hpp:223</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ad5662e0df22e0adaa13c6638a429df6b"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ad5662e0df22e0adaa13c6638a429df6b">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(const matrix&lt; Type, Row, Column, false &gt; &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00126">linalg.hpp:126</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_adfcf42a6f9989e33aa99acf4e947758d"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#adfcf42a6f9989e33aa99acf4e947758d">fcarouge::matrix::promise_type</a></div><div class="ttdeci">typename std::coroutine_traits&lt; generator &gt;::promise_type promise_type</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00268">linalg.hpp:268</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ae49a5b34d19651a33fece603e19ab5d6"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ae49a5b34d19651a33fece603e19ab5d6">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(std::generator&lt; Type &gt; other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00181">linalg.hpp:181</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_ae8d706f1fed5c4cfba4dfd3be19815c1"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#ae8d706f1fed5c4cfba4dfd3be19815c1">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix(Type(&amp;elements)[Row *Column])</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00166">linalg.hpp:166</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_aef4e1a401c270d709c1ebaf0a3ea4a91"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#aef4e1a401c270d709c1ebaf0a3ea4a91">fcarouge::matrix::generator</a></div><div class="ttdeci">std::generator&lt; Type &gt; generator</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00267">linalg.hpp:267</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_aef867f6ed87d203b1805512580ce95e0"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#aef867f6ed87d203b1805512580ce95e0">fcarouge::matrix::operator=</a></div><div class="ttdeci">constexpr matrix &amp; operator=(const matrix&lt; Type, Row, Column, true &gt; &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00139">linalg.hpp:139</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_af86ce6ac51113a4d4659d9d132cb43f4"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#af86ce6ac51113a4d4659d9d132cb43f4">fcarouge::matrix::matrix</a></div><div class="ttdeci">constexpr matrix()</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00119">linalg.hpp:119</a></div></div>
<div class="ttc" id="astructfcarouge_1_1matrix_xhtml_affe6fae4cb1cfbfb7a46b135e835361f"><div class="ttname"><a href="structfcarouge_1_1matrix.xhtml#affe6fae4cb1cfbfb7a46b135e835361f">fcarouge::matrix::operator()</a></div><div class="ttdeci">constexpr Type operator()(auto row, auto column) const</div><div class="ttdef"><b>Definition:</b> <a href="lazy_2fcarouge_2linalg_8hpp_source.xhtml#l00258">linalg.hpp:258</a></div></div>
<div class="ttc" id="autility_8hpp_xhtml"><div class="ttname"><a href="utility_8hpp.xhtml">utility.hpp</a></div><div class="ttdoc">The collection of utilities supporting the library.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_c1845e5bf011c2136883d0d7188f50e9.xhtml">linalg</a></li><li class="navelem"><a class="el" href="dir_a5865fd9dbf72bad167b68249efe8e33.xhtml">lazy</a></li><li class="navelem"><a class="el" href="dir_0a4f59775a28c8901f3ddbf67298531c.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="lazy_2fcarouge_2linalg_8hpp.xhtml">linalg.hpp</a></li>
    <li class="footer">Generated on Sun Jul 2 2023 17:31:47 for Kalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
